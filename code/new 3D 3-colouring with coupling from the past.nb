(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 13.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    557470,      10503]
NotebookOptionsPosition[    530549,       9989]
NotebookOutlinePosition[    549276,      10406]
CellTagsIndexPosition[    549233,      10403]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell["", "CodeText",ExpressionUUID->"ec0c784a-ce9d-4c5a-b232-cf84abfadbcd"],

Cell[TextData[{
 StyleBox["WARNING", "Subtitle"],
 ": The dimension of the cube should never be odd! The initial cubes will be \
invalid. I should probably introduce a check to prevent accidents..."
}], "Text",
 CellChangeTimes->{{3.912416699794735*^9, 3.9124167114307404`*^9}, {
  3.9124167607999697`*^9, 
  3.9124168075457*^9}},ExpressionUUID->"1c0f1225-b49f-4433-89f2-3809bd6fabfe"],

Cell[BoxData[{
 RowBox[{"Ideas", ":", "\n", 
  RowBox[{"-", " ", 
   RowBox[{"ListPlot3D", "[", "]"}]}], " ", ":", " ", 
  RowBox[{"plot", " ", "height", " ", "function"}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"-", " ", "try"}], " ", "colours", " ", "\"\<Tomato\>\""}], ",", 
  " ", "\"\<Gold\>\"", ",", " ", "\"\<LawnGreen\>\"", ",", " ", 
  "\"\<SteelBlue\>\""}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"-", " ", 
    RowBox[{"Image3D", "[", "]"}]}], " ", "with", " ", 
   RowBox[{"Image3DSlices", "[", "]"}]}], ":", " ", 
  RowBox[{"prints", " ", "all", " ", "slices"}]}], "\n", 
 RowBox[{
  RowBox[{"-", " ", 
   RowBox[{"ListDensityPlot", "[", "]"}]}], ":", " ", 
  RowBox[{
  "useful", " ", "if", " ", "we", " ", "want", " ", "to", " ", 
   "blur"}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"-", " ", 
    RowBox[{"ListContourPlot", "[", "]"}]}], ":", " ", 
   RowBox[{"gives", " ", "contours"}]}], " "}], "\n", 
 RowBox[{
  RowBox[{"-", " ", 
   RowBox[{"ListVectorPlot", "[", "]"}]}], ",", " ", 
  RowBox[{"ListVectorPlot3D", "[", "]"}], ",", " ", 
  RowBox[{"ListStreamPlot", "[", "]"}], ",", " ", 
  RowBox[{"ListStreamPlot3D", "[", "]"}], ",", " ", 
  RowBox[{
   RowBox[{"ListSliceVectorPlot3D", "[", "]"}], ":", " ", 
   RowBox[{"for", " ", 
    RowBox[{"flows", "?", " ", 
     RowBox[{"(", 
      RowBox[{
      "look", " ", "at", " ", "density", " ", "functions", " ", "also"}], 
      ")"}]}]}]}]}], "\n", 
 RowBox[{
  RowBox[{"-", " ", 
   RowBox[{"ArrayPlot3D", "[", "]"}]}], ",", " ", 
  RowBox[{"Raster3D", "[", "]"}]}], "\n", 
 RowBox[{
  RowBox[{"-", " ", 
   RowBox[{"Graphics3D", "[", "]"}]}], ":", " ", 
  RowBox[{
  "example", " ", "on", " ", "website", " ", "tells", " ", "you", " ", "how", 
   " ", "to", " ", "space", " ", "your", " ", "cell"}]}], "\n", 
 RowBox[{
  RowBox[{"-", " ", 
   RowBox[{"RegionPlot3D", "[", "]"}]}], ":", " ", 
  RowBox[{
  "shows", " ", "only", " ", "region", " ", "for", " ", "which", " ", "pred", 
   " ", "is", " ", "True"}]}]}], "Code",
 CellChangeTimes->{{3.8961935040712976`*^9, 3.8961935381558247`*^9}, {
   3.896194936842407*^9, 3.896194938170011*^9}, {3.8961976953367853`*^9, 
   3.8961977638117313`*^9}, {3.896198335144771*^9, 3.896198366856309*^9}, {
   3.8961986608628683`*^9, 3.896198674854718*^9}, {3.896198716270617*^9, 
   3.896198716661545*^9}, {3.896198782094411*^9, 3.896198791070257*^9}, {
   3.8961989110295343`*^9, 3.8961989204212313`*^9}, {3.896198964157205*^9, 
   3.896198979236967*^9}, {3.89619921442766*^9, 3.896199283091106*^9}, {
   3.896199362138769*^9, 3.896199418306302*^9}, {3.896328007182756*^9, 
   3.8963280077184763`*^9}, 3.912310676550824*^9},
 EmphasizeSyntaxErrors->True,
 CellLabel->"In[1]:=",ExpressionUUID->"e646de66-4019-4a45-9f24-b862c681f906"],

Cell["\<\
Ideas for visualisation:
- layers with slider. all three dimensions. either together or separately. \
maybe make both for safety. also have height plot. 
- translucent cells? - DOES NOT WORK
- get max height cell from both max and min grids and scale.\
\>", "Text",
 CellChangeTimes->{{3.912187496858489*^9, 3.9121875178478317`*^9}, {
  3.912187612260333*^9, 3.912187642990597*^9}, {3.9122412710676527`*^9, 
  3.912241278745646*^9}, {3.9122413209842653`*^9, 
  3.9122413417334547`*^9}},ExpressionUUID->"7def9534-b5ec-46ec-afcf-\
1dbb61179113"],

Cell[BoxData[
 RowBox[{
  RowBox[{"ResourceFunction", "[", "\"\<DarkMode\>\"", "]"}], "[", 
  "]"}]], "Input",
 CellLabel->"In[1]:=",ExpressionUUID->"5bd8729e-1b5d-4b5f-b063-cb7f0991f434"],

Cell["Output Locations", "Text",
 CellChangeTimes->{{3.9120763950365133`*^9, 
  3.9120763988073053`*^9}},ExpressionUUID->"8a942dd6-5ed6-43b7-bf58-\
29d355d7d106"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"currDir", " ", "=", " ", 
   RowBox[{"ToString", "[", 
    RowBox[{"NotebookDirectory", "[", "]"}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"logDir", " ", "=", " ", 
   RowBox[{"StringJoin", "[", 
    RowBox[{"currDir", ",", " ", "\"\<3D output files/\>\""}], "]"}]}], 
  ";"}]}], "Code",
 CellChangeTimes->{{3.912076419771578*^9, 3.9120764205557737`*^9}, {
   3.912310139246233*^9, 3.912310139990097*^9}, 3.912311323635508*^9},
 CellLabel->"In[1]:=",ExpressionUUID->"25294259-c6c3-46b8-9874-58800bbfe360"],

Cell["\<\
Colour Templates
(uncomment displaySwatches[] to pick a colour!)\
\>", "Text",
 CellChangeTimes->{
  3.9120763846005793`*^9},ExpressionUUID->"137fda44-2f58-466e-b9cf-\
77f14954051f"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"rybColourRules", " ", "=", " ", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"0", "->", "Red"}], ",", 
     RowBox[{"1", "->", "Yellow"}], ",", 
     RowBox[{"2", "->", "Blue"}]}], "}"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"rybDarkColourRules", " ", "=", " ", "\"\<DarkRainbow\>\""}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{"fancyColourRules", " ", "=", " ", "\"\<CandyColors\>\""}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{"blueColourRules", " ", "=", " ", "\"\<DeepSeaColors\>\""}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{"pinkColourRules", " ", "=", " ", "\"\<ValentineTones\>\""}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{"orangeColourRules", " ", "=", " ", "\"\<SolarColors\>\""}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"tigerColourRules", " ", "=", " ", "\"\<SunsetColors\>\""}], ";"}],
   "\n"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"displaySwatch", "[", "colourFunction_", "]"}], " ", ":=", " ", 
   RowBox[{"ArrayPlot", "[", 
    RowBox[{
     RowBox[{"Mod", "[", 
      RowBox[{
       RowBox[{"generateMaxHeightGrid", "[", "21", "]"}], ",", "3"}], "]"}], 
     ",", " ", 
     RowBox[{"ColorFunction", "\[Rule]", "colourFunction"}]}], "]"}]}], 
  "\n"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"displaySwatches", "[", "]"}], " ", ":=", " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"gradients", " ", "=", " ", 
        RowBox[{"ColorData", "[", "\"\<Gradients\>\"", "]"}]}], ",", " ", 
       RowBox[{"len", " ", "=", " ", 
        RowBox[{"Length", "[", 
         RowBox[{"ColorData", "[", "\"\<Gradients\>\"", "]"}], "]"}]}], ",", 
       " ", 
       RowBox[{"swatches", " ", "=", " ", 
        RowBox[{"{", "}"}]}], ",", " ", 
       RowBox[{"i", " ", "=", " ", "0"}]}], "}"}], ",", " ", "\n", "\t", 
     RowBox[{"Grid", "[", 
      RowBox[{"ArrayReshape", "[", 
       RowBox[{
        RowBox[{"Nest", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"Append", "[", 
            RowBox[{"#", ",", " ", 
             RowBox[{"displaySwatch", "[", 
              RowBox[{"gradients", "[", 
               RowBox[{"[", 
                RowBox[{"i", "++"}], "]"}], "]"}], "]"}]}], "]"}], " ", "&"}],
           ",", " ", "swatches", ",", " ", 
          RowBox[{"len", " ", "+", " ", "1"}]}], "]"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Ceiling", "[", 
           RowBox[{"len", " ", "/", " ", "6"}], "]"}], ",", "6"}], "}"}]}], 
       "]"}], "]"}]}], "]"}]}], "\n"}], "\n", 
 RowBox[{
  RowBox[{"(*", 
   RowBox[{"displaySwatches", "[", "]"}], "*)"}]}]}], "Code",
 CellLabel->"In[3]:=",ExpressionUUID->"27a3c9a8-323b-4c69-ac0d-666ac9c09b77"],

Cell["\<\
The following codeblock contains functions that will be evaluated either at \
the beginning or at the end of the simulation. They generate min/max height \
grids, and go between 3-coloured grids to height grids.\
\>", "Text",
 CellChangeTimes->{
  3.9120770127480183`*^9},ExpressionUUID->"ba87411f-0479-4ab8-9fa6-\
a40adbcfb0e3"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"initialFaceGrid2D", "[", "n_", "]"}], " ", ":=", " ", 
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"i", " ", "+", " ", "j"}], " ", "<=", " ", 
       RowBox[{"n", " ", "-", " ", "1"}]}], ",", " ", 
      RowBox[{"Mod", "[", 
       RowBox[{
        RowBox[{"i", " ", "+", " ", "j"}], ",", " ", "n"}], "]"}], ",", " ", 
      RowBox[{"n", " ", "-", " ", "2", " ", "-", " ", 
       RowBox[{"Mod", "[", 
        RowBox[{
         RowBox[{"i", " ", "+", " ", "j"}], ",", " ", "n"}], "]"}]}]}], "]"}],
     ",", " ", 
    RowBox[{"{", 
     RowBox[{"i", ",", " ", "0", ",", " ", 
      RowBox[{"n", " ", "-", " ", "1"}]}], "}"}], ",", " ", 
    RowBox[{"{", 
     RowBox[{"j", ",", " ", "0", ",", " ", 
      RowBox[{"n", " ", "-", " ", "1"}]}], "}"}]}], "]"}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"initialCubeBorder", "[", "n_", "]"}], " ", ":=", " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"cube", " ", "=", " ", 
        RowBox[{"ConstantArray", "[", 
         RowBox[{
          RowBox[{"-", "1"}], ",", " ", 
          RowBox[{"{", 
           RowBox[{"n", ",", " ", "n", ",", " ", "n"}], "}"}]}], "]"}]}], ",",
        " ", "\n", "\t", 
       RowBox[{"top", " ", "=", " ", 
        RowBox[{"initialFaceGrid2D", "[", "n", "]"}]}], ",", "\n", "\t", 
       RowBox[{"bottom", " ", "=", " ", 
        RowBox[{"Reverse", "[", 
         RowBox[{
          RowBox[{"initialFaceGrid2D", "[", "n", "]"}], ",", " ", 
          RowBox[{"{", "1", "}"}]}], "]"}]}]}], "}"}], ",", " ", "\n", " ", 
     RowBox[{
      RowBox[{
       RowBox[{"cube", "[", 
        RowBox[{"[", 
         RowBox[{"1", ",", " ", "All", ",", " ", "All"}], "]"}], "]"}], " ", 
       "=", " ", "top"}], ";", "\n", " ", 
      RowBox[{
       RowBox[{"cube", "[", 
        RowBox[{"[", 
         RowBox[{"n", ",", " ", "All", ",", " ", "All"}], "]"}], "]"}], " ", 
       "=", " ", "bottom"}], ";", "\n", " ", 
      RowBox[{
       RowBox[{"cube", "[", 
        RowBox[{"[", 
         RowBox[{"All", ",", " ", "1", ",", " ", "All"}], "]"}], "]"}], " ", 
       "=", " ", "top"}], ";", "\n", " ", 
      RowBox[{
       RowBox[{"cube", "[", 
        RowBox[{"[", 
         RowBox[{"All", ",", " ", "n", ",", " ", "All"}], "]"}], "]"}], " ", 
       "=", " ", "bottom"}], ";", "\n", " ", 
      RowBox[{
       RowBox[{"cube", "[", 
        RowBox[{"[", 
         RowBox[{"All", ",", " ", "All", ",", " ", "1"}], "]"}], "]"}], " ", 
       "=", " ", "top"}], ";", "\n", " ", 
      RowBox[{
       RowBox[{"cube", "[", 
        RowBox[{"[", 
         RowBox[{"All", ",", " ", "All", ",", " ", "n"}], "]"}], "]"}], " ", 
       "=", " ", "bottom"}], ";", "\n", " ", "cube"}]}], "\n", " ", "]"}]}], 
  "\n", "\n", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
    "Takes", " ", "a", " ", "grid", " ", "with", " ", "a", " ", "filled", " ",
      "in", " ", "height", " ", "function", " ", "as", " ", "input", " ", 
     "and", " ", "converts", " ", "it", " ", "to", " ", "its", " ", 
     "corresponding", " ", "3"}], "-", 
    RowBox[{"colouring", " ", 
     RowBox[{"form", "."}]}]}], " ", "*)"}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"to3Colouring", "[", "grid_", "]"}], " ", ":=", " ", 
   RowBox[{"Mod", "[", 
    RowBox[{"grid", ",", " ", "3"}], "]"}]}], "\n", "\n", 
  RowBox[{"(*", " ", 
   RowBox[{"Helper", " ", "function", " ", "for", " ", "toHeightFunction"}], 
   " ", "*)"}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"findListHeight", "[", 
    RowBox[{"first_", ",", " ", "list_", ",", " ", "len_"}], "]"}], " ", ":=",
    " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"initialList", " ", "=", " ", 
        RowBox[{"SparseArray", "[", 
         RowBox[{
          RowBox[{"{", "}"}], ",", " ", 
          RowBox[{"{", "len", "}"}], ",", " ", 
          RowBox[{"-", "1"}]}], "]"}]}], ",", " ", 
       RowBox[{"k", " ", "=", " ", "0"}], ",", " ", 
       RowBox[{"prev", " ", "=", " ", "first"}]}], "}"}], ",", " ", 
     RowBox[{"(*", " ", 
      RowBox[{
      "remember", " ", "that", " ", "list", " ", "is", " ", "of", " ", 
       "length", " ", 
       RowBox[{"(", 
        RowBox[{"len", " ", "+", " ", "1"}], ")"}]}], " ", "*)"}], "\n", " ", 
     
     RowBox[{"Nest", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"k", "++"}], ";", " ", 
          RowBox[{"newList", " ", "=", " ", "#"}], ";", " ", 
          RowBox[{"prev", " ", "=", " ", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"MemberQ", "[", 
              RowBox[{
               RowBox[{"list", "[", 
                RowBox[{"[", 
                 RowBox[{"{", 
                  RowBox[{"k", ",", " ", 
                   RowBox[{"k", " ", "+", " ", "1"}]}], "}"}], "]"}], "]"}], 
               ",", " ", "1"}], "]"}], ",", " ", 
             RowBox[{"prev", " ", "+", " ", 
              RowBox[{"list", "[", 
               RowBox[{"[", 
                RowBox[{"k", " ", "+", " ", "1"}], "]"}], "]"}], " ", "-", 
              " ", 
              RowBox[{"list", "[", 
               RowBox[{"[", "k", "]"}], "]"}]}], ",", " ", 
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"list", "[", 
                 RowBox[{"[", "k", "]"}], "]"}], " ", "==", " ", "2"}], ",", 
               " ", 
               RowBox[{"prev", " ", "+", " ", "1"}], ",", " ", 
               RowBox[{"prev", " ", "-", " ", "1"}]}], "]"}]}], "]"}]}], ";", 
          " ", 
          RowBox[{
           RowBox[{"newList", "[", 
            RowBox[{"[", "k", "]"}], "]"}], " ", "=", " ", "prev"}], ";", " ",
           "newList"}], " ", ")"}], " ", "&"}], " ", ",", " ", 
       RowBox[{"Normal", "[", "initialList", "]"}], ",", " ", "len"}], 
      "]"}]}], "\n", "]"}]}], "\n", "\n", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"Takes", " ", "a", " ", "3"}], "-", 
    RowBox[{
    "coloured", " ", "grid", " ", "as", " ", "input", " ", "and", " ", 
     "returns", " ", "the", " ", "corresponding", " ", "grid", " ", 
     "labelled", " ", "with", " ", "its", " ", "height", " ", 
     RowBox[{"values", "."}]}]}], " ", "*)"}], "\n", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"Edit", ":", " ", 
     RowBox[{
      RowBox[{
      "we", " ", "now", " ", "convert", " ", "our", " ", "grid", " ", "to", 
       " ", "a", " ", "3"}], "-", 
      RowBox[{"coloured", " ", "grid", " ", "before", " ", "computing"}]}]}], 
    ",", " ", 
    RowBox[{
    "so", " ", "it", " ", "gives", " ", "the", " ", "correct", " ", "output", 
     " ", "on", " ", "every", " ", 
     RowBox[{"grid", "!"}]}]}], " ", "*)"}], "\n", 
  RowBox[{"(*", " ", 
   RowBox[{"Note", ":", " ", 
    RowBox[{
    "this", " ", "starts", " ", "with", " ", "the", " ", "initial", " ", 
     "border", " ", "grid"}]}], " ", "*)"}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"toHeightFunction", "[", "grid_", "]"}], " ", ":=", " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"dim", " ", "=", " ", 
        RowBox[{"Length", "[", "grid", "]"}]}], ",", " ", 
       RowBox[{"heightGrid", " ", "=", " ", 
        RowBox[{"initialGridBorder", "[", 
         RowBox[{"Length", "[", "grid", "]"}], "]"}]}], ",", " ", 
       RowBox[{"k", " ", "=", " ", "1"}], ",", " ", 
       RowBox[{"cgrid", " ", "=", " ", 
        RowBox[{"to3Colouring", "[", "grid", "]"}]}]}], "}"}], ",", "\n", 
     "  ", 
     RowBox[{"Nest", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"k", "++"}], ";", " ", 
          RowBox[{"nextHeightGrid", " ", "=", " ", "#"}], ";", " ", 
          RowBox[{
           RowBox[{"nextHeightGrid", "[", 
            RowBox[{"[", 
             RowBox[{"k", ",", " ", 
              RowBox[{"2", " ", ";;", " ", 
               RowBox[{"-", "2"}]}]}], "]"}], "]"}], " ", "=", " ", 
           RowBox[{"findListHeight", "[", 
            RowBox[{
             RowBox[{"heightGrid", "[", 
              RowBox[{"[", 
               RowBox[{"k", ",", " ", "1"}], "]"}], "]"}], ",", " ", 
             RowBox[{"Normal", "[", 
              RowBox[{"cgrid", "[", 
               RowBox[{"[", 
                RowBox[{"k", ",", " ", 
                 RowBox[{"1", " ", ";;", " ", 
                  RowBox[{"-", "2"}]}]}], "]"}], "]"}], "]"}], ",", " ", 
             RowBox[{"dim", " ", "-", " ", "2"}]}], "]"}]}], ";", " ", 
          "nextHeightGrid"}], ")"}], " ", "&"}], ",", " ", "heightGrid", ",", 
       " ", 
       RowBox[{"dim", " ", "-", " ", "2"}]}], "]"}]}], " ", "\n", "]"}]}], 
  " ", "\n", "\n", 
  RowBox[{"(*", " ", 
   RowBox[{
   "Calculates", " ", "the", " ", "sum", " ", "of", " ", "absolute", " ", 
    "differences", " ", "between", " ", "the", " ", "heights", " ", "of", " ",
     "corresponding", " ", "sites", " ", "in", " ", "the", " ", "input", " ", 
    "grids"}], " ", "*)"}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"checkHeightDifference", "[", 
    RowBox[{"cube1_", ",", " ", "cube2_"}], "]"}], " ", ":=", " ", 
   RowBox[{"Total", "[", 
    RowBox[{
     RowBox[{"Abs", "[", 
      RowBox[{"cube1", " ", "-", " ", "cube2"}], "]"}], ",", " ", "3"}], 
    "]"}]}], "\n", "\n", 
  RowBox[{"(*", " ", 
   RowBox[{"Format", " ", "time"}], " ", "*)"}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"displayTime", "[", "time_", "]"}], " ", ":=", " ", 
   RowBox[{"DateString", "[", 
    RowBox[{"time", ",", " ", 
     RowBox[{"{", 
      RowBox[{
      "\"\<Hour\>\"", ",", " ", "\"\<:\>\"", ",", " ", "\"\<Minute\>\"", ",", 
       " ", "\"\<:\>\"", ",", " ", "\"\<Second\>\""}], "}"}]}], "]"}]}], "\n",
   "\n", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{"**", "**"}], "*", " ", "Display", " ", "Functions"}], " ", 
   "******)"}], "\n", "\n", 
  RowBox[{"(*", " ", 
   RowBox[{
   "Displays", " ", "height", " ", "grid", " ", "matrix", " ", "in", " ", 
    "array", " ", "form"}], " ", "*)"}], "\n", 
  RowBox[{"(*", " ", 
   RowBox[{"OPTIMISATION", ":", " ", 
    RowBox[{
    "check", " ", "if", " ", "you", " ", "need", " ", "to", " ", "perform", 
     " ", 
     RowBox[{"toHeightFunction", "!"}], " ", "maybe", " ", "check", " ", 
     "max", " ", "value", " ", "in", " ", 
     RowBox[{"grid", "?"}]}]}], " ", "*)"}], "\n", "\n", "\n", 
  RowBox[{"(*", " ", 
   RowBox[{
   "Displays", " ", "height", " ", "grid", " ", "matrix", " ", "in", " ", 
    "array", " ", "form"}], " ", "*)"}], "\n", 
  RowBox[{"(*", " ", 
   RowBox[{"OPTIMISATION", ":", " ", 
    RowBox[{
    "check", " ", "if", " ", "you", " ", "need", " ", "to", " ", "perform", 
     " ", 
     RowBox[{"to3Coloring", "!"}], " ", "maybe", " ", "check", " ", "max", 
     " ", "value", " ", "in", " ", 
     RowBox[{"grid", "?"}]}]}], " ", "*)"}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"displayColouringGrid", "[", 
    RowBox[{"grid_", ",", " ", "colourFunction_"}], "]"}], " ", ":=", " ", 
   RowBox[{"ArrayPlot", "[", 
    RowBox[{
     RowBox[{"to3Colouring", "[", "grid", "]"}], ",", " ", 
     RowBox[{"ColorFunction", "\[Rule]", "colourFunction"}]}], "]"}]}], "\n", 
  "\n", 
  RowBox[{"(*", " ", 
   RowBox[{
   "Displays", " ", "height", " ", "grid", " ", "matrices", " ", "in", " ", 
    "array", " ", "form"}], " ", "*)"}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"displayColouringGrids", "[", 
    RowBox[{"grid1_", ",", " ", "grid2_", ",", " ", "colourFunction_"}], 
    "]"}], " ", ":=", " ", 
   RowBox[{"Grid", "[", 
    RowBox[{"{", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"displayColouringGrid", "[", 
        RowBox[{"grid1", ",", " ", "colourFunction"}], "]"}], ",", " ", 
       RowBox[{"displayColouringGrid", "[", 
        RowBox[{"grid2", ",", " ", "colourFunction"}], "]"}]}], "}"}], "}"}], 
    "]"}]}], "\n", "\n", "\n"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"displayHeightPlots", "[", 
    RowBox[{"grid1_", ",", " ", "grid2_"}], "]"}], " ", ":=", " ", 
   RowBox[{"Grid", "[", 
    RowBox[{"{", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"displayHeightPlot", "[", "grid1", "]"}], ",", " ", 
       RowBox[{"displayHeightPlot", "[", "grid2", "]"}]}], "}"}], "}"}], 
    "]"}]}], "\n"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"displayGrid", "[", 
    RowBox[{"grid_", ",", " ", "colourFunction_"}], "]"}], " ", ":=", " ", 
   RowBox[{"Grid", "[", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"displayHeightGrid", "[", "grid", "]"}], "}"}], ",", " ", "\n",
       "\t\t\t\t\t\t\t\t\t\t\t\t\t  ", 
      RowBox[{"{", 
       RowBox[{"displayColouringGrid", "[", 
        RowBox[{"grid", ",", " ", "colourFunction"}], "]"}], "}"}], ",", "\n",
       "\t\t\t\t\t\t\t\t\t\t\t\t\t  ", 
      RowBox[{"{", 
       RowBox[{"displayHeightPlot", "[", "grid", "]"}], "}"}]}], "}"}], 
    "]"}]}], "\n"}], "\n", 
 RowBox[{
  RowBox[{"displayGrids", "[", 
   RowBox[{"grid1_", ",", " ", "grid2_", ",", " ", "colourFunction_"}], "]"}],
   " ", ":=", " ", 
  RowBox[{"Grid", "[", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"displayHeightGrids", "[", 
       RowBox[{"grid1", ",", " ", "grid2"}], "]"}], "}"}], ",", " ", "\n", 
     "\t\t\t\t\t\t\t\t\t\t\t\t\t  ", 
     RowBox[{"{", 
      RowBox[{"displayColouringGrids", "[", 
       RowBox[{"grid1", ",", " ", "grid2", ",", " ", "colourFunction"}], 
       "]"}], "}"}], ",", "\n", "\t\t\t\t\t\t\t\t\t\t\t\t\t  ", 
     RowBox[{"{", 
      RowBox[{"displayHeightPlots", "[", 
       RowBox[{"grid1", ",", " ", "grid2"}], "]"}], "}"}]}], "}"}], 
   "]"}]}], "\n", 
 RowBox[{"\t\t\t\t\t\t"}]}], "Code",
 CellChangeTimes->{{3.9120775054307423`*^9, 3.9120775067779837`*^9}, {
   3.912236781613709*^9, 3.912236784533803*^9}, {3.912236856073638*^9, 
   3.912236858110496*^9}, {3.912236890690868*^9, 3.91223689407804*^9}, {
   3.912236933342312*^9, 3.912236950895697*^9}, {3.912238117368524*^9, 
   3.912238135414617*^9}, {3.91223818189043*^9, 3.912238216275185*^9}, {
   3.912238254847288*^9, 3.912238282381641*^9}, 3.91223831988457*^9, {
   3.912239306719515*^9, 3.912239306965551*^9}, {3.912239965731444*^9, 
   3.912239973579812*^9}, 3.912240790010014*^9, {3.912315528465104*^9, 
   3.912315530338512*^9}, {3.912315569715016*^9, 3.91231559464865*^9}, 
   3.9123184634983463`*^9, 3.912318654468335*^9, {3.912318858454385*^9, 
   3.9123188625075274`*^9}, {3.912414084111382*^9, 3.912414090690804*^9}},
 CellLabel->"In[12]:=",ExpressionUUID->"fcac06f5-8334-4b9b-ad54-5a70c0e8fdd2"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
    RowBox[{"generateMaxCube", "[", "dim_", "]"}], " ", ":=", " ", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"cube", " ", "=", " ", 
        RowBox[{"initialCubeBorder", "[", "dim", "]"}]}], "}"}], ",", " ", 
      "\n", " ", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"cube", "[", 
         RowBox[{"[", 
          RowBox[{"1", ",", " ", "All", ",", " ", "All"}], "]"}], "]"}], 
        "}"}], " ", "~", " ", "Join", " ", "~", " ", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"generateMaxHeightGrid", "[", 
          RowBox[{"dim", ",", " ", 
           RowBox[{"cube", "[", 
            RowBox[{"[", 
             RowBox[{"i", ",", " ", "All", ",", " ", "All"}], "]"}], "]"}]}], 
          "]"}], ",", " ", 
         RowBox[{"{", 
          RowBox[{"i", ",", " ", "2", ",", " ", "6"}], "}"}]}], "]"}], " ", 
       "~", " ", "Join", " ", "~", " ", 
       RowBox[{"{", 
        RowBox[{"cube", "[", 
         RowBox[{"[", 
          RowBox[{"7", ",", " ", "All", ",", " ", "All"}], "]"}], "]"}], 
        "}"}]}]}], "]"}]}], "*)"}], "\n", " ", "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"generateMaxCube", "[", "dim_", "]"}], " ", ":=", " ", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"cube", " ", "=", " ", 
         RowBox[{"initialCubeBorder", "[", "dim", "]"}]}], ",", " ", 
        RowBox[{"depth", " ", "=", " ", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"dim", " ", "+", " ", "1"}], ")"}], " ", "/", " ", "2"}]}],
         ",", " ", "nextLevelTop", ",", " ", "nextLevelBottom"}], "}"}], ",", 
      "  ", "\n", " ", 
      RowBox[{
       RowBox[{"Do", "[", "\n", " ", 
        RowBox[{
         RowBox[{
          RowBox[{"nextLevelTop", " ", "=", " ", 
           RowBox[{
            RowBox[{"cube", "[", 
             RowBox[{"[", 
              RowBox[{
               RowBox[{"i", " ", "-", " ", "1"}], ",", " ", 
               RowBox[{"i", " ", ";;", " ", 
                RowBox[{"-", "i"}]}], ",", " ", 
               RowBox[{"i", " ", ";;", " ", 
                RowBox[{"-", "i"}]}]}], "]"}], "]"}], " ", "+", " ", "1"}]}], 
          ";", "\n", " ", 
          RowBox[{"nextLevelBottom", " ", "=", " ", 
           RowBox[{"Reverse", "[", 
            RowBox[{"nextLevelTop", ",", " ", 
             RowBox[{"{", "1", "}"}]}], "]"}]}], ";", "\n", " ", 
          RowBox[{
           RowBox[{"cube", "[", 
            RowBox[{"[", 
             RowBox[{"i", ",", " ", 
              RowBox[{"i", " ", ";;", " ", 
               RowBox[{"-", "i"}]}], ",", " ", 
              RowBox[{"i", " ", ";;", " ", 
               RowBox[{"-", "i"}]}]}], "]"}], "]"}], " ", "=", " ", 
           "nextLevelTop"}], ";", "\n", " ", 
          RowBox[{
           RowBox[{"cube", "[", 
            RowBox[{"[", 
             RowBox[{
              RowBox[{"-", "i"}], ",", " ", 
              RowBox[{"i", " ", ";;", " ", 
               RowBox[{"-", "i"}]}], ",", " ", 
              RowBox[{"i", " ", ";;", " ", 
               RowBox[{"-", "i"}]}]}], "]"}], "]"}], " ", "=", " ", 
           "nextLevelBottom"}], ";", "\n", " ", 
          RowBox[{
           RowBox[{"cube", "[", 
            RowBox[{"[", 
             RowBox[{
              RowBox[{"i", " ", ";;", " ", 
               RowBox[{"-", "i"}]}], ",", " ", "i", ",", " ", 
              RowBox[{"i", " ", ";;", " ", 
               RowBox[{"-", "i"}]}]}], "]"}], "]"}], " ", "=", " ", 
           "nextLevelTop"}], ";", "\n", " ", 
          RowBox[{
           RowBox[{"cube", "[", 
            RowBox[{"[", 
             RowBox[{
              RowBox[{"i", " ", ";;", " ", 
               RowBox[{"-", "i"}]}], ",", " ", 
              RowBox[{"-", "i"}], ",", " ", 
              RowBox[{"i", " ", ";;", " ", 
               RowBox[{"-", "i"}]}]}], "]"}], "]"}], " ", "=", " ", 
           "nextLevelBottom"}], ";", "\n", " ", 
          RowBox[{
           RowBox[{"cube", "[", 
            RowBox[{"[", 
             RowBox[{
              RowBox[{"i", " ", ";;", " ", 
               RowBox[{"-", "i"}]}], ",", " ", 
              RowBox[{"i", " ", ";;", " ", 
               RowBox[{"-", "i"}]}], ",", " ", "i"}], "]"}], "]"}], " ", "=", 
           " ", "nextLevelTop"}], ";", "\n", " ", 
          RowBox[{
           RowBox[{"cube", "[", 
            RowBox[{"[", 
             RowBox[{
              RowBox[{"i", " ", ";;", " ", 
               RowBox[{"-", "i"}]}], ",", " ", 
              RowBox[{"i", " ", ";;", " ", 
               RowBox[{"-", "i"}]}], ",", " ", 
              RowBox[{"-", "i"}]}], "]"}], "]"}], " ", "=", " ", 
           "nextLevelBottom"}]}], ",", " ", 
         RowBox[{"{", 
          RowBox[{"i", ",", " ", "2", ",", " ", "depth"}], "}"}]}], "]"}], 
       ";", "\n", " ", "cube"}]}], "]"}]}], " ", "\n", " ", "\n", 
   RowBox[{
    RowBox[{"generateMinCube", "[", "dim_", "]"}], " ", ":=", " ", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"cube", " ", "=", " ", 
         RowBox[{"initialCubeBorder", "[", "dim", "]"}]}], ",", " ", 
        RowBox[{"depth", " ", "=", " ", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"dim", " ", "+", " ", "1"}], ")"}], " ", "/", " ", "2"}]}],
         ",", " ", "nextLevelTop", ",", " ", "nextLevelBottom"}], "}"}], ",", 
      "  ", "\n", " ", 
      RowBox[{
       RowBox[{"Do", "[", "\n", " ", 
        RowBox[{
         RowBox[{
          RowBox[{"nextLevelTop", " ", "=", " ", 
           RowBox[{
            RowBox[{"cube", "[", 
             RowBox[{"[", 
              RowBox[{
               RowBox[{"i", " ", "-", " ", "1"}], ",", " ", 
               RowBox[{"i", " ", ";;", " ", 
                RowBox[{"-", "i"}]}], ",", " ", 
               RowBox[{"i", " ", ";;", " ", 
                RowBox[{"-", "i"}]}]}], "]"}], "]"}], " ", "-", " ", "1"}]}], 
          ";", "\n", " ", 
          RowBox[{"nextLevelBottom", " ", "=", " ", 
           RowBox[{"Reverse", "[", 
            RowBox[{"nextLevelTop", ",", " ", 
             RowBox[{"{", "1", "}"}]}], "]"}]}], ";", "\n", " ", 
          RowBox[{
           RowBox[{"cube", "[", 
            RowBox[{"[", 
             RowBox[{"i", ",", " ", 
              RowBox[{"i", " ", ";;", " ", 
               RowBox[{"-", "i"}]}], ",", " ", 
              RowBox[{"i", " ", ";;", " ", 
               RowBox[{"-", "i"}]}]}], "]"}], "]"}], " ", "=", " ", 
           "nextLevelTop"}], ";", "\n", " ", 
          RowBox[{
           RowBox[{"cube", "[", 
            RowBox[{"[", 
             RowBox[{
              RowBox[{"-", "i"}], ",", " ", 
              RowBox[{"i", " ", ";;", " ", 
               RowBox[{"-", "i"}]}], ",", " ", 
              RowBox[{"i", " ", ";;", " ", 
               RowBox[{"-", "i"}]}]}], "]"}], "]"}], " ", "=", " ", 
           "nextLevelBottom"}], ";", "\n", " ", 
          RowBox[{
           RowBox[{"cube", "[", 
            RowBox[{"[", 
             RowBox[{
              RowBox[{"i", " ", ";;", " ", 
               RowBox[{"-", "i"}]}], ",", " ", "i", ",", " ", 
              RowBox[{"i", " ", ";;", " ", 
               RowBox[{"-", "i"}]}]}], "]"}], "]"}], " ", "=", " ", 
           "nextLevelTop"}], ";", "\n", " ", 
          RowBox[{
           RowBox[{"cube", "[", 
            RowBox[{"[", 
             RowBox[{
              RowBox[{"i", " ", ";;", " ", 
               RowBox[{"-", "i"}]}], ",", " ", 
              RowBox[{"-", "i"}], ",", " ", 
              RowBox[{"i", " ", ";;", " ", 
               RowBox[{"-", "i"}]}]}], "]"}], "]"}], " ", "=", " ", 
           "nextLevelBottom"}], ";", "\n", " ", 
          RowBox[{
           RowBox[{"cube", "[", 
            RowBox[{"[", 
             RowBox[{
              RowBox[{"i", " ", ";;", " ", 
               RowBox[{"-", "i"}]}], ",", " ", 
              RowBox[{"i", " ", ";;", " ", 
               RowBox[{"-", "i"}]}], ",", " ", "i"}], "]"}], "]"}], " ", "=", 
           " ", "nextLevelTop"}], ";", "\n", " ", 
          RowBox[{
           RowBox[{"cube", "[", 
            RowBox[{"[", 
             RowBox[{
              RowBox[{"i", " ", ";;", " ", 
               RowBox[{"-", "i"}]}], ",", " ", 
              RowBox[{"i", " ", ";;", " ", 
               RowBox[{"-", "i"}]}], ",", " ", 
              RowBox[{"-", "i"}]}], "]"}], "]"}], " ", "=", " ", 
           "nextLevelBottom"}]}], ",", " ", 
         RowBox[{"{", 
          RowBox[{"i", ",", " ", "2", ",", " ", "depth"}], "}"}]}], "]"}], 
       ";", "\n", " ", "cube"}]}], "]"}]}]}]}]], "Code",
 CellChangeTimes->{{3.895851743137969*^9, 3.895851743139699*^9}, 
   3.895924359871799*^9, {3.89592453810701*^9, 3.895924578194954*^9}, {
   3.8959252186688757`*^9, 3.895925220809202*^9}, {3.895925524859675*^9, 
   3.8959256363294773`*^9}, {3.8959256734090548`*^9, 3.895925702131855*^9}, {
   3.8959258099186487`*^9, 3.895925816806987*^9}, {3.8959259730488577`*^9, 
   3.895926282836673*^9}, {3.8959265493100758`*^9, 3.895926662644783*^9}, {
   3.895926706278529*^9, 3.895926786482958*^9}, {3.895926821613821*^9, 
   3.895926844925844*^9}, {3.895926900435109*^9, 3.895926936672982*^9}, {
   3.895926973114499*^9, 3.8959269735383453`*^9}, {3.895927198189516*^9, 
   3.895927215223157*^9}, {3.895927252199391*^9, 3.895927286790578*^9}, {
   3.895927406293037*^9, 3.895927410636898*^9}, {3.895927797828179*^9, 
   3.895927846144252*^9}, {3.89592793271642*^9, 3.8959279929073544`*^9}, {
   3.895931126242578*^9, 3.895931154621812*^9}, {3.8959313015059223`*^9, 
   3.895931377045375*^9}, {3.8959323011157093`*^9, 3.895932313219329*^9}, {
   3.895932461177787*^9, 3.8959325714721403`*^9}, {3.895932678723037*^9, 
   3.895932757580627*^9}, {3.8959328868123503`*^9, 3.895932888159932*^9}, {
   3.895935459823525*^9, 3.895935511447383*^9}, {3.8959357274782267`*^9, 
   3.8959357371406116`*^9}, {3.895936585436318*^9, 3.895936664508355*^9}, {
   3.89593717123914*^9, 3.895937174638939*^9}, {3.895937700482608*^9, 
   3.89593781260238*^9}, {3.895937851834051*^9, 3.895937883000745*^9}, {
   3.8959385051235247`*^9, 3.895938554533948*^9}, {3.89593860441994*^9, 
   3.895938624564167*^9}, {3.895938669851734*^9, 3.895938702339554*^9}, {
   3.895938816474195*^9, 3.895938875201742*^9}, {3.89593897753822*^9, 
   3.8959390346086817`*^9}, {3.895939281351036*^9, 3.8959394332172203`*^9}, {
   3.895939477153347*^9, 3.895939545154372*^9}, {3.895939589287294*^9, 
   3.895939606036065*^9}, {3.8959396848508453`*^9, 3.8959397130195103`*^9}, {
   3.8959398017319927`*^9, 3.895939804211789*^9}, {3.8959398409789457`*^9, 
   3.8959399341642437`*^9}, {3.895940025532848*^9, 3.8959400487644033`*^9}, {
   3.895940116780529*^9, 3.895940226988255*^9}, {3.895940507003642*^9, 
   3.8959405075474253`*^9}, {3.8959405866897993`*^9, 3.895940671176176*^9}, {
   3.895940703692581*^9, 3.8959407116663027`*^9}, {3.895940754848997*^9, 
   3.89594075729636*^9}, {3.8959407924797487`*^9, 3.895940922519642*^9}, {
   3.895940955351569*^9, 3.89594096823952*^9}, {3.895941016398425*^9, 
   3.8959411012133713`*^9}, {3.8959416217422657`*^9, 
   3.8959416510212517`*^9}, {3.895941751587575*^9, 3.895941811835779*^9}, {
   3.8959418894383717`*^9, 3.895941941232431*^9}, {3.8959420049647017`*^9, 
   3.895942005128944*^9}, {3.8959420661853848`*^9, 3.8959420678330383`*^9}, {
   3.895942138071947*^9, 3.8959422674461203`*^9}, 3.8959423198197193`*^9, {
   3.895942374462367*^9, 3.895942384931842*^9}, 3.895942746413762*^9, {
   3.8959427883930693`*^9, 3.895942810457045*^9}, {3.8959428545690527`*^9, 
   3.895942859976574*^9}, {3.895942894983653*^9, 3.8959428979759197`*^9}, {
   3.895942937507091*^9, 3.895942937591359*^9}, {3.895943262735242*^9, 
   3.895943267316884*^9}, {3.895966917004333*^9, 3.8959669469986143`*^9}, {
   3.895966997823306*^9, 3.89596704386239*^9}, {3.89596809177496*^9, 
   3.895968142191331*^9}, {3.8959682178881483`*^9, 3.8959682261725473`*^9}, {
   3.896029050033618*^9, 3.896029068137042*^9}, {3.8960291353107023`*^9, 
   3.896029139532143*^9}, {3.89602917515187*^9, 3.896029247645176*^9}, {
   3.8961074083514023`*^9, 3.8961076271262617`*^9}, {3.896108202159047*^9, 
   3.896108217674529*^9}, {3.89612133484925*^9, 3.896121334879374*^9}, {
   3.896333926923399*^9, 3.896333957460273*^9}, {3.8963342115459137`*^9, 
   3.8963342124743032`*^9}, {3.896334412981388*^9, 3.896334437790207*^9}, 
   3.8963344724866858`*^9, {3.8963347829749804`*^9, 3.896334788763483*^9}, {
   3.896337232426865*^9, 3.896337241139146*^9}, {3.896337276290044*^9, 
   3.896337298000836*^9}, {3.89633757679998*^9, 3.8963376254077663`*^9}, {
   3.8963376957588987`*^9, 3.896337842910202*^9}, {3.896337873366638*^9, 
   3.896337890286662*^9}, {3.8963379309026833`*^9, 3.89633795526123*^9}, {
   3.896338010019981*^9, 3.8963380326993437`*^9}, {3.8963381139954643`*^9, 
   3.896338122499373*^9}, {3.896338203438754*^9, 3.896338210235207*^9}, {
   3.8963382822578373`*^9, 3.896338305210328*^9}, 3.8963383916974993`*^9, {
   3.8963483268507853`*^9, 3.896348424583952*^9}, {3.896348514567173*^9, 
   3.896348516114107*^9}, {3.896348558057222*^9, 3.8963486335051517`*^9}, {
   3.8963487681597023`*^9, 3.896348850607461*^9}, {3.8963489171436357`*^9, 
   3.896348921088109*^9}, {3.8963489775137453`*^9, 3.896348990512315*^9}, {
   3.896349024592252*^9, 3.896349031358507*^9}, {3.896349186133471*^9, 
   3.896349204749407*^9}, {3.8963716164542627`*^9, 3.896371655926025*^9}, {
   3.896371756413437*^9, 3.896371790636338*^9}, {3.896372567219589*^9, 
   3.896372571050908*^9}, {3.896373316915986*^9, 3.896373358291664*^9}, {
   3.896407376844158*^9, 3.896407406656273*^9}, {3.89640745709867*^9, 
   3.8964074616951942`*^9}, {3.896407601239127*^9, 3.89640761911943*^9}, {
   3.896407650855463*^9, 3.896407652271559*^9}, {3.896407682339316*^9, 
   3.896407714302945*^9}, 3.8964078818960533`*^9, {3.896408474561571*^9, 
   3.8964084797293053`*^9}, {3.8964085304903517`*^9, 3.896408576912929*^9}, {
   3.8964088431539507`*^9, 3.89640886725655*^9}, {3.8964089190345383`*^9, 
   3.8964089912410507`*^9}, 3.896411364032544*^9, {3.896411555775547*^9, 
   3.896411560210909*^9}, {3.8964116249414473`*^9, 3.8964116268667393`*^9}, {
   3.8964117236814823`*^9, 3.896411733209247*^9}, {3.89641176893865*^9, 
   3.896411788777835*^9}, {3.896411829490048*^9, 3.896411854225235*^9}, {
   3.896413117100971*^9, 3.896413457913006*^9}, {3.89641348873833*^9, 
   3.896413593256999*^9}, {3.896414227715905*^9, 3.896414261627845*^9}, {
   3.896414345804163*^9, 3.896414366524419*^9}, {3.8964144449315357`*^9, 
   3.896414482055689*^9}, {3.896414532026331*^9, 3.8964145387787027`*^9}, {
   3.896414661241715*^9, 3.896414875292243*^9}, {3.9123161381909027`*^9, 
   3.912316140315507*^9}},
 CellLabel->"In[24]:=",ExpressionUUID->"34a5ce17-7bbe-4b28-b8dc-8f3c89a7e4af"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"Alternate", " ", "code"}], ";", " ", 
    RowBox[{
    "works", " ", "slower", " ", "and", " ", "more", " ", "complicated", " ", 
     "to", " ", "use", " ", "colours", " ", "with"}]}], " ", "*)"}], "\n", 
  "\n", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{"cubeToImage", "[", "cube_", "]"}], " ", ":=", " ", 
    RowBox[{
     RowBox[{
      RowBox[{"Image3D", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"(", 
          RowBox[{"cube", " ", "+", " ", "1"}], ")"}], " ", "/", " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"Max", "[", "cube", "]"}], " ", "+", " ", "1"}], ")"}]}], 
        ",", " ", 
        RowBox[{"Magnification", "\[Rule]", "Automatic"}], ",", " ", 
        RowBox[{"ImageSize", "\[Rule]", "Medium"}], ",", " ", 
        RowBox[{"ColorFunction", "\[Rule]", "blueColourRules"}]}], "]"}], 
      "\n", "\n", 
      RowBox[{"cubeSlicesSingleAxis", "[", 
       RowBox[{"dim_", ",", " ", "cube_", ",", " ", "axis_"}], "]"}]}], " ", ":=",
      " ", 
     RowBox[{
      RowBox[{
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"image", " ", "=", " ", 
           RowBox[{"cubeToImage", "[", "cube", "]"}]}], "}"}], ",", "\n", 
         "\t\t\t\t\t\t\t\t\t\t\t", 
         RowBox[{"Manipulate", "[", 
          RowBox[{
           RowBox[{"Image3DSlices", "[", 
            RowBox[{"image", ",", " ", "i", ",", " ", "axis"}], "]"}], ",", 
           " ", 
           RowBox[{"{", 
            RowBox[{"i", ",", " ", "1", ",", " ", "dim", ",", " ", "1"}], 
            "}"}]}], "]"}]}], "]"}], "\n", 
       RowBox[{"cubeSlices", "[", 
        RowBox[{"dim_", ",", " ", "cube_"}], "]"}]}], " ", ":=", " ", 
      RowBox[{
       RowBox[{
        RowBox[{"Manipulate", "[", 
         RowBox[{
          RowBox[{"Grid", "[", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"Image3DSlices", "[", 
               RowBox[{
                RowBox[{"Image3D", "[", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{"cube", " ", "+", " ", "1"}], ")"}], " ", "/", 
                   " ", 
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Max", "[", "cube", "]"}], " ", "+", " ", "1"}], 
                    ")"}]}], ",", " ", 
                  RowBox[{"Magnification", "\[Rule]", "Automatic"}], ",", " ", 
                  RowBox[{"ImageSize", "\[Rule]", "Medium"}]}], "]"}], ",", 
                " ", "i", ",", " ", "1"}], "]"}], ",", "\n", 
              "\t\t\t\t\t\t\t\t\t\t", 
              RowBox[{"Image3DSlices", "[", 
               RowBox[{
                RowBox[{"Image3D", "[", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{"cube", " ", "+", " ", "1"}], ")"}], " ", "/", 
                   " ", 
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Max", "[", "cube", "]"}], " ", "+", " ", "1"}], 
                    ")"}]}], ",", " ", 
                  RowBox[{"Magnification", "\[Rule]", "Automatic"}], ",", " ", 
                  RowBox[{"ImageSize", "\[Rule]", "Medium"}]}], "]"}], ",", 
                " ", "i", ",", " ", "2"}], "]"}], ",", "\n", 
              "\t\t\t\t\t\t\t\t\t\t", 
              RowBox[{"Image3DSlices", "[", 
               RowBox[{
                RowBox[{"Image3D", "[", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{"cube", " ", "+", " ", "1"}], ")"}], " ", "/", 
                   " ", 
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Max", "[", "cube", "]"}], " ", "+", " ", "1"}], 
                    ")"}]}], ",", " ", 
                  RowBox[{"Magnification", "\[Rule]", "Automatic"}], ",", " ", 
                  RowBox[{"ImageSize", "\[Rule]", "Medium"}]}], "]"}], ",", 
                " ", "i", ",", " ", "3"}], "]"}]}], "}"}], "}"}], "]"}], ",", 
          " ", 
          RowBox[{"{", 
           RowBox[{"i", ",", " ", "1", ",", " ", "dim", ",", " ", "1"}], 
           "}"}]}], "]"}], "\n", "\t\t\t\t\t\t\t\t\t\t", "\n", 
        RowBox[{"cubesSlices", "[", 
         RowBox[{"dim_", ",", " ", "cube1_", ",", " ", "cube2_"}], "]"}]}], 
       " ", ":=", " ", 
       RowBox[{
        RowBox[{"Grid", "[", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"cubeSlices", "[", 
             RowBox[{"dim", ",", " ", "cube1"}], "]"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"cubeSlices", "[", 
             RowBox[{"dim", ",", " ", "cube2"}], "]"}], "}"}]}], "}"}], "]"}],
         "\n", "\n", 
        RowBox[{"cubeToImage", "[", "maxCube", "]"}]}]}]}]}]}], 
   "*)"}]}]], "Code",
 CellChangeTimes->{{3.912252328502087*^9, 3.912252402584948*^9}, {
  3.912252650618332*^9, 3.9122526787291117`*^9}, {3.9122531051650753`*^9, 
  3.912253150927306*^9}, {3.912253230768302*^9, 3.9122532863435707`*^9}, {
  3.912254001008072*^9, 3.9122540834580603`*^9}, {3.912261514870071*^9, 
  3.912261580410975*^9}, {3.912261701293288*^9, 3.912261725431531*^9}, {
  3.912261828728067*^9, 3.912261864242016*^9}, {3.912261904423257*^9, 
  3.912261912727086*^9}, {3.9122622152929*^9, 3.91226222689668*^9}, {
  3.912262260868675*^9, 3.912262280349835*^9}, {3.91226232504403*^9, 
  3.912262347229721*^9}, {3.9122626266737328`*^9, 3.912262639718912*^9}, {
  3.912268256667344*^9, 3.91226827857467*^9}, {3.9122707786212473`*^9, 
  3.912270794814865*^9}, {3.91231449065786*^9, 3.912314521883709*^9}},
 CellLabel->
  "In[159]:=",ExpressionUUID->"43c9ca43-dc34-48cc-ba70-58f0db2b1acf"],

Cell[TextData[{
 StyleBox["Display Functions\n", "Section"],
 "We have the following display functions for single cubes:\n- \
cubeLayers[cube, <colourFunction>]: displays concentric layers of a cube.\n- \
displaySlicePlot[cube, args, <colourFunction>]: displays a 2D slice of the \
cube along a specified axis. Here, args takes the form {{depth}, All, All}, \
{All, {depth}, All}, or {All, All, {depth}}, where depth is the layer number \
of the slice you want.\n- displayHeightPlot[grid]: takes a 2D grid as input \
and displays a plot of the height function.\n- sliceGridWithHeight[cube, \
args]: displays a 2D slice of the height function of the cube, its \
corresponding 3-colouring, and the plot of its height function. Here, args \
takes the form {{depth}, All, All}, {All, {depth}, All}, or {All, All, \
{depth}}, where depth is the layer number of the slice you want.\n- \
cubeSlicesSingleAxis[cube, axis]: a dynamic plot of \
sliceGridWithHeight[]--allows you to drag a slider to move between the \
layers.\n- cubeSlicesAllAxesSimultaneouslyGrid[cube, i]: displays the 2D \
slice of the layer of the cube at depth i along all three axes.\n- \
cubeSlicesAllAxesSimultaneously[cube]: a dynamic version of \
cubeSlicesAllAxesSimultaneouslyGrid[]--allows you to drag a slider to move \
between the layers. The layers at the same depth are displayed for all three \
axes.\n- cubeSlicesAllAxesSeparately[cube]: like \
cubeSlicesAllAxesSimultaneouslyCube[], but you can pick the depth of the \
layer along all three axes separately.\n\nWe have the following display \
functions for two cubes:\n- cubesLayersSeparately[cube1, cube2, \
<colourFunction>]: displays two copies of cubeLayers[] side by side, one for \
each cube, with separate sliders.\n- cubesLayersSimultaneously[cube1, cube2, \
<colourFunction>]: similar to cubesLayersSeparately, but with a single \
slider, so you see the concentric layers at the same depth for each cube.\n- \
cubesSlicesSeparately[cube1, cube2]: displays two copies of \
cubeSlicesAllAxesSimultaneously[] side by side, one for each cube, with \
separate sliders.\n- cubesSlicesSimultaneously[cube1, cube2]: similar to \
cubesSlicesSeparately, but with a single slider, so you see the layers at the \
same depth for each cube."
}], "Text",
 CellChangeTimes->{{3.912409148835154*^9, 3.912409175079817*^9}, {
   3.912443386415956*^9, 3.912443657985716*^9}, {3.912443760749338*^9, 
   3.9124439385990963`*^9}, {3.912444135217409*^9, 3.912444305168536*^9}, {
   3.912444379101831*^9, 3.912444435214204*^9}, {3.912444763363852*^9, 
   3.912444916672462*^9}, {3.912444961750602*^9, 3.91244496454106*^9}, {
   3.912445000212619*^9, 3.912445036184997*^9}, 
   3.9124466184289513`*^9},ExpressionUUID->"b80fafbb-a30b-4188-b067-\
42d643f41c2b"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"displayCube", "[", 
    RowBox[{"dim_", ",", " ", "cube_", ",", " ", 
     RowBox[{"colourFunction_", " ", ":", " ", "blueColourRules"}]}], "]"}], 
   " ", ":=", " ", 
   RowBox[{"ArrayPlot3D", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"(", 
       RowBox[{"cube", " ", "+", " ", "1"}], ")"}], " ", "/", " ", 
      RowBox[{"(", 
       RowBox[{"dim", " ", "+", " ", "1"}], ")"}]}], ",", " ", 
     RowBox[{"ColorFunction", " ", "->", " ", "colourFunction"}], ",", " ", 
     RowBox[{"OpacityFunction", "\[Rule]", "1"}], ",", " ", 
     RowBox[{"Mesh", "\[Rule]", "False"}], ",", " ", 
     RowBox[{"PlotTheme", "\[Rule]", "\"\<Detailed\>\""}]}], "]"}]}], 
  "\n"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"cubeLayers", "[", 
    RowBox[{"cube_", ",", " ", 
     RowBox[{"colourFunction_", " ", ":", " ", "blueColourRules"}]}], "]"}], 
   " ", ":=", " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"dim", " ", "=", " ", 
       RowBox[{"Length", "[", "cube", "]"}]}], "}"}], ",", " ", 
     RowBox[{"Manipulate", "[", 
      RowBox[{
       RowBox[{"displayCube", "[", 
        RowBox[{"dim", ",", " ", 
         RowBox[{"cube", "[", 
          RowBox[{"[", 
           RowBox[{
            RowBox[{"i", ";;", " ", 
             RowBox[{"-", "i"}]}], ",", " ", 
            RowBox[{"i", " ", ";;", " ", 
             RowBox[{"-", "i"}]}], ",", " ", 
            RowBox[{"i", " ", ";;", " ", 
             RowBox[{"-", "i"}]}]}], "]"}], "]"}], ",", " ", 
         "colourFunction"}], "]"}], ",", " ", 
       RowBox[{"{", 
        RowBox[{"i", ",", " ", "1", ",", " ", 
         RowBox[{"Ceiling", "[", 
          RowBox[{"dim", " ", "/", " ", "2"}], "]"}], ",", " ", "1"}], 
        "}"}]}], "]"}]}], "]"}]}], "\n"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"cubesLayersSeparately", "[", 
    RowBox[{"cube1_", ",", " ", "cube2_", ",", " ", 
     RowBox[{"colourFunction_", " ", ":", " ", "blueColourRules"}]}], "]"}], 
   " ", ":=", " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"dim", " ", "=", " ", 
       RowBox[{"Length", "[", "cube", "]"}]}], "}"}], ",", " ", 
     RowBox[{"Grid", "[", 
      RowBox[{
       RowBox[{"cubeLayers", "[", 
        RowBox[{"cube1", ",", " ", "colourFunction"}], "]"}], ",", " ", 
       RowBox[{"cubeLayers", "[", 
        RowBox[{"cube2", ",", " ", "colourFunction"}], "]"}]}], "]"}]}], 
    "]"}]}], "\n"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"cubesLayersSimultaneously", "[", 
    RowBox[{"cube1_", ",", " ", "cube2_", ",", " ", 
     RowBox[{"colourFunction_", " ", ":", " ", "blueColourRules"}]}], "]"}], 
   " ", ":=", " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"dim", " ", "=", " ", 
       RowBox[{"Length", "[", "cube", "]"}]}], "}"}], ",", " ", 
     RowBox[{"Manipulate", "[", 
      RowBox[{
       RowBox[{"Grid", "[", 
        RowBox[{"{", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"displayCube", "[", 
            RowBox[{"dim", ",", " ", 
             RowBox[{"cube1", "[", 
              RowBox[{"[", 
               RowBox[{
                RowBox[{"i", ";;", " ", 
                 RowBox[{"-", "i"}]}], ",", " ", 
                RowBox[{"i", " ", ";;", " ", 
                 RowBox[{"-", "i"}]}], ",", " ", 
                RowBox[{"i", " ", ";;", " ", 
                 RowBox[{"-", "i"}]}]}], "]"}], "]"}], ",", " ", 
             "colourFunction"}], "]"}], ",", " ", 
           RowBox[{"displayCube", "[", 
            RowBox[{"dim", ",", " ", 
             RowBox[{"cube2", "[", 
              RowBox[{"[", 
               RowBox[{
                RowBox[{"i", ";;", " ", 
                 RowBox[{"-", "i"}]}], ",", " ", 
                RowBox[{"i", " ", ";;", " ", 
                 RowBox[{"-", "i"}]}], ",", " ", 
                RowBox[{"i", " ", ";;", " ", 
                 RowBox[{"-", "i"}]}]}], "]"}], "]"}], ",", " ", 
             "colourFunction"}], "]"}]}], "}"}], "}"}], "]"}], ",", " ", 
       RowBox[{"{", 
        RowBox[{"i", ",", " ", "1", ",", " ", 
         RowBox[{"Ceiling", "[", 
          RowBox[{"dim", " ", "/", " ", "2"}], "]"}], ",", " ", "1"}], 
        "}"}]}], "]"}]}], "]"}]}], "\n", "\n", 
  RowBox[{"(*", " ", 
   RowBox[{
   "Slices", " ", "the", " ", "cube", " ", "along", " ", "a", " ", "specifed",
     " ", "axis", " ", "and", " ", "returns", " ", "a", " ", "2", "D", " ", 
    "grid"}], " ", "*)"}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"sliceGrid", "[", 
    RowBox[{"cube_", ",", " ", "args_"}], "]"}], " ", ":=", " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"dim", " ", "=", " ", 
       RowBox[{"Length", "[", "cube", "]"}]}], "}"}], ",", " ", 
     RowBox[{"ArrayReshape", "[", 
      RowBox[{
       RowBox[{"Take", "[", 
        RowBox[{"cube", ",", " ", 
         RowBox[{"Sequence", " ", "@@", " ", "args"}]}], "]"}], ",", " ", 
       RowBox[{"{", 
        RowBox[{"dim", ",", " ", "dim"}], "}"}]}], "]"}]}], "]"}]}], "\n", 
  "\n", 
  RowBox[{"(*", " ", 
   RowBox[{
   "Plots", " ", "a", " ", "slice", " ", "of", " ", "a", " ", "cube"}], " ", 
   "*)"}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"displaySlicePlot", "[", 
    RowBox[{"cube_", ",", " ", "args_", ",", " ", 
     RowBox[{"colourFunction_", " ", ":", " ", "blueColourRules"}]}], "]"}], 
   " ", ":=", " ", 
   RowBox[{"ArrayPlot", "[", 
    RowBox[{
     RowBox[{"sliceGrid", "[", 
      RowBox[{"cube", ",", " ", "args"}], "]"}], ",", " ", 
     RowBox[{"ColorFunction", "\[Rule]", "colourFunction"}]}], "]"}]}], 
  "\n"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"displayHeightPlot", "[", "grid_", "]"}], " ", ":=", " ", 
   RowBox[{"ListPlot3D", "[", "grid", "]"}]}], "\n", "\n", 
  RowBox[{"(*", " ", 
   RowBox[{"TODO", ":", " ", 
    RowBox[{"add", " ", "labels", " ", "to", " ", 
     RowBox[{"grids", "/", "plots"}], " ", "in", " ", "the", " ", "following",
      " ", "functions"}]}], " ", "*)"}], "\n", 
  RowBox[{"(*", " ", 
   RowBox[{
   "Places", " ", "colour", " ", "plot", " ", "of", " ", "a", " ", "slice", 
    " ", "above", " ", "a", " ", "height", " ", "plot", " ", "of", " ", "the",
     " ", "slice"}], " ", "*)"}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"sliceGridWithHeight", "[", 
    RowBox[{"cube_", ",", " ", "args_"}], "]"}], " ", ":=", " ", 
   RowBox[{"Grid", "[", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"displaySlicePlot", "[", 
        RowBox[{"cube", ",", " ", "args"}], "]"}], "}"}], ",", " ", 
      RowBox[{"{", 
       RowBox[{"displaySlicePlot", "[", 
        RowBox[{
         RowBox[{"to3Colouring", "[", "cube", "]"}], ",", " ", "args"}], 
        "]"}], "}"}], ",", " ", 
      RowBox[{"{", 
       RowBox[{"displayHeightPlot", "[", 
        RowBox[{"sliceGrid", "[", 
         RowBox[{"cube", ",", " ", "args"}], "]"}], "]"}], "}"}]}], "}"}], 
    "]"}]}], "\n", "\n", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
    "Allows", " ", "to", " ", "move", " ", "between", " ", "colour", " ", 
     "plots"}], " ", "+", " ", 
    RowBox[{
    "height", " ", "plots", " ", "of", " ", "different", " ", "slices", " ", 
     "along", " ", "a", " ", "single", " ", "axis"}]}], " ", "*)"}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"cubeSlicesSingleAxis", "[", 
    RowBox[{"cube_", ",", " ", "axis_"}], "]"}], " ", ":=", " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"args", " ", "=", " ", 
        RowBox[{"{", 
         RowBox[{"All", ",", " ", "All", ",", " ", "All"}], "}"}]}], ",", " ", 
       RowBox[{"dim", " ", "=", " ", 
        RowBox[{"Length", "[", "cube", "]"}]}]}], "}"}], ",", "\n", 
     "\t\t\t\t\t\t\t\t\t\t\t", 
     RowBox[{"Manipulate", "[", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{
          RowBox[{"args", "[", 
           RowBox[{"[", "axis", "]"}], "]"}], " ", "=", " ", 
          RowBox[{"{", "i", "}"}]}], ";", " ", 
         RowBox[{"sliceGridWithHeight", "[", 
          RowBox[{"cube", ",", " ", "args"}], "]"}]}], ")"}], ",", " ", 
       RowBox[{"{", 
        RowBox[{"i", ",", " ", "1", ",", " ", "dim", ",", " ", "1"}], "}"}]}],
       "]"}]}], "]"}]}], "\n", "\t\t\t\t\t\t\t\t\t\t\t"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"cubeSlicesAllAxesSimultaneouslyGrid", "[", 
    RowBox[{"cube_", ",", " ", "i_"}], "]"}], " ", ":=", " ", 
   RowBox[{"Grid", "[", 
    RowBox[{"{", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"sliceGridWithHeight", "[", 
        RowBox[{"cube", ",", " ", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", "i", "}"}], ",", " ", "All", ",", " ", "All"}], 
          "}"}]}], "]"}], ",", " ", 
       RowBox[{"sliceGridWithHeight", "[", 
        RowBox[{"cube", ",", " ", 
         RowBox[{"{", 
          RowBox[{"All", ",", " ", 
           RowBox[{"{", "i", "}"}], ",", " ", "All"}], "}"}]}], "]"}], ",", 
       " ", 
       RowBox[{"sliceGridWithHeight", "[", 
        RowBox[{"cube", ",", " ", 
         RowBox[{"{", 
          RowBox[{"All", ",", " ", "All", ",", " ", 
           RowBox[{"{", "i", "}"}]}], "}"}]}], "]"}]}], "}"}], "}"}], "]"}]}],
   "\t\t\t\t\t\t\t\t\t\t\t", "\n", "\n", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"View", " ", "the", " ", "colour", " ", "plots"}], " ", "+", " ", 
    
    RowBox[{
    "height", " ", "plots", " ", "of", " ", "slices", " ", "at", " ", "the", 
     " ", "same", " ", "level", " ", "along", " ", "all", " ", "axes"}]}], 
   " ", "*)"}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"cubeSlicesAllAxesSimultaneously", "[", "cube_", "]"}], " ", ":=", 
   " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"dim", " ", "=", " ", 
       RowBox[{"Length", "[", "cube", "]"}]}], "}"}], ",", " ", 
     RowBox[{"Manipulate", "[", 
      RowBox[{
       RowBox[{"cubeSlicesAllAxesSimultaneouslyGrid", "[", 
        RowBox[{"cube", ",", " ", "i"}], "]"}], ",", " ", 
       RowBox[{"{", 
        RowBox[{"i", ",", " ", "1", ",", " ", "dim", ",", " ", "1"}], "}"}]}],
       "]"}]}], "]"}]}], "\n", "\n", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
    "Allows", " ", "to", " ", "move", " ", "between", " ", "colour", " ", 
     "plots"}], " ", "+", " ", 
    RowBox[{
    "height", " ", "plots", " ", "of", " ", "different", " ", "slices", " ", 
     "along", " ", "all", " ", "axes"}]}], " ", "*)"}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"cubeSlicesAllAxesSeparately", "[", "cube_", "]"}], " ", ":=", " ", 
   RowBox[{"Grid", "[", 
    RowBox[{"{", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"cubeSlicesSingleAxis", "[", 
        RowBox[{"cube", ",", " ", "1"}], "]"}], ",", " ", 
       RowBox[{"cubeSlicesSingleAxis", "[", 
        RowBox[{"cube", ",", " ", "2"}], "]"}], ",", " ", 
       RowBox[{"cubeSlicesSingleAxis", "[", 
        RowBox[{"cube", ",", " ", "3"}], "]"}]}], "}"}], "}"}], "]"}]}], 
  "\n"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"cubesSlicesSeparately", "[", 
    RowBox[{"cube1_", ",", " ", "cube2_"}], "]"}], " ", ":=", " ", 
   RowBox[{"Grid", "[", 
    RowBox[{"{", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"cubeSlicesAllAxesSimultaneously", "[", "cube1", "]"}], ",", 
       " ", 
       RowBox[{"cubeSlicesAllAxesSimultaneously", "[", "cube2", "]"}]}], 
      "}"}], "}"}], "]"}]}], "\n"}], "\n", 
 RowBox[{
  RowBox[{"cubesSlicesSimultaneously", "[", 
   RowBox[{"cube1_", ",", " ", "cube2_"}], "]"}], " ", ":=", " ", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"dim", " ", "=", " ", 
      RowBox[{"Length", "[", "cube", "]"}]}], "}"}], ",", " ", 
    RowBox[{"Manipulate", "[", 
     RowBox[{
      RowBox[{"Grid", "[", 
       RowBox[{"{", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"cubeSlicesAllAxesSimultaneouslyGrid", "[", 
           RowBox[{"cube1", ",", " ", "i"}], "]"}], ",", " ", 
          RowBox[{"cubeSlicesAllAxesSimultaneouslyGrid", "[", 
           RowBox[{"cube2", ",", " ", "i"}], "]"}]}], "}"}], "}"}], "]"}], 
      ",", " ", 
      RowBox[{"{", 
       RowBox[{"i", ",", " ", "1", ",", " ", "dim", ",", " ", "1"}], "}"}]}], 
     "]"}]}], "]"}]}]}], "Code",
 CellChangeTimes->{{3.912264406032669*^9, 3.912264407411809*^9}, {
   3.912266616300103*^9, 3.912266636080381*^9}, {3.912266783498019*^9, 
   3.9122668318250113`*^9}, {3.912267031331131*^9, 3.9122670330469217`*^9}, {
   3.9122673628898687`*^9, 3.912267395223302*^9}, 3.9122674254591417`*^9, {
   3.912267489260343*^9, 3.9122675033739357`*^9}, {3.912267533446159*^9, 
   3.912267553784122*^9}, {3.91226759392774*^9, 3.912267610948339*^9}, {
   3.912267954925317*^9, 3.9122679807820597`*^9}, {3.9122680344937572`*^9, 
   3.912268084845128*^9}, {3.912268284517149*^9, 3.91226833228021*^9}, {
   3.91226836499653*^9, 3.9122684599894753`*^9}, {3.912268505569618*^9, 
   3.9122685120518208`*^9}, {3.912268552753704*^9, 3.912268583420809*^9}, {
   3.9122686193107967`*^9, 3.9122686712850103`*^9}, {3.912269479663116*^9, 
   3.912269519288001*^9}, {3.91226960563202*^9, 3.912269647276249*^9}, {
   3.9122697907911673`*^9, 3.912269851937456*^9}, {3.912269978887829*^9, 
   3.912270022212962*^9}, {3.912270052870801*^9, 3.912270089606448*^9}, {
   3.912270131594943*^9, 3.912270159581514*^9}, {3.9122702372248087`*^9, 
   3.9122702931336193`*^9}, {3.912270332214175*^9, 3.91227045240093*^9}, {
   3.9122705625160007`*^9, 3.912270621791396*^9}, {3.9122707574806643`*^9, 
   3.912270862778894*^9}, {3.912270942473834*^9, 3.91227098524856*^9}, {
   3.9123128383139467`*^9, 3.912312878915883*^9}, {3.912313022608423*^9, 
   3.9123130611073503`*^9}, {3.9123131179412746`*^9, 3.912313169989504*^9}, {
   3.912313433965732*^9, 3.912313448461694*^9}, {3.912313498071694*^9, 
   3.912313499807131*^9}, 3.9123135697889214`*^9, {3.9123136877244463`*^9, 
   3.912313713464583*^9}, {3.9123144303868637`*^9, 3.912314458008833*^9}, {
   3.912314573514515*^9, 3.9123146467024508`*^9}, {3.912314677108584*^9, 
   3.912314686346047*^9}, {3.9123147195335407`*^9, 3.912314778497026*^9}, {
   3.91231484830643*^9, 3.912314904667511*^9}, {3.912318437387354*^9, 
   3.9123184392785053`*^9}, {3.912318471354505*^9, 3.912318472048452*^9}, 
   3.912408888251107*^9, {3.912409022900834*^9, 3.912409033762897*^9}, {
   3.912409445276288*^9, 3.9124095181272297`*^9}, {3.9124110203524427`*^9, 
   3.912411020790317*^9}, {3.912413199845172*^9, 3.912413210239479*^9}, {
   3.912415080632885*^9, 3.912415362226597*^9}, {3.912417311389412*^9, 
   3.9124173408818083`*^9}, {3.91241737900045*^9, 3.9124173939527073`*^9}, {
   3.9124174288891573`*^9, 3.912417463293626*^9}, {3.912417514903767*^9, 
   3.912417547683485*^9}, {3.912417587736187*^9, 3.912417634396227*^9}, 
   3.912421732863694*^9, 3.912429929362864*^9, 3.912444930324613*^9, {
   3.912445819379607*^9, 3.912445820139661*^9}},
 CellLabel->"In[26]:=",ExpressionUUID->"1cb6fad7-3d75-46e5-bdfd-cc2c5aa8136f"],

Cell[CellGroupData[{

Cell["Example: max and min cubes of side 15", "Subsection",
 CellChangeTimes->{{3.9124451534856033`*^9, 
  3.912445186010397*^9}},ExpressionUUID->"3cf80991-5947-4fae-80f3-\
2de0a0a27c13"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"dim", " ", "=", " ", "15"}], ";"}], "\n", 
 RowBox[{
  RowBox[{"cube", " ", "=", " ", 
   RowBox[{"initialCubeBorder", "[", "15", "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"maxCube", " ", "=", " ", 
   RowBox[{"generateMaxCube", "[", "dim", "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"minCube", " ", "=", " ", 
   RowBox[{"generateMinCube", "[", "dim", "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{"MatrixForm", "[", 
       RowBox[{"maxCube", "\[LeftDoubleBracket]", 
        RowBox[{"i", ",", "All", ",", "All"}], "\[RightDoubleBracket]"}], 
       "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"i", ",", "1", ",", "dim"}], "}"}]}], "]"}], "\n", 
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{"MatrixForm", "[", 
       RowBox[{"minCube", "\[LeftDoubleBracket]", 
        RowBox[{"i", ",", "All", ",", "All"}], "\[RightDoubleBracket]"}], 
       "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"i", ",", "1", ",", "dim"}], "}"}]}], "]"}]}], 
   "*)"}]}]}], "Code",
 CellChangeTimes->{{3.8963315301595716`*^9, 3.8963315999490423`*^9}, 
   3.8963316511910553`*^9, {3.89633391267474*^9, 3.896333913798381*^9}, {
   3.896333984558095*^9, 3.8963339860371017`*^9}, {3.896334238850512*^9, 
   3.8963342404267263`*^9}, {3.9124104286872063`*^9, 
   3.9124104560692463`*^9}, {3.91242985221181*^9, 3.912429857993331*^9}, {
   3.912445480937314*^9, 3.9124454888452053`*^9}},
 CellLabel->"In[40]:=",ExpressionUUID->"2148de09-ed05-4808-bed8-2a80b8dfc5bc"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"cubesLayersSimultaneously", "[", 
  RowBox[{"minCube", ",", " ", 
   RowBox[{"to3Colouring", "[", "minCube", "]"}]}], "]"}]], "Code",
 CellChangeTimes->{{3.912251791004142*^9, 3.9122518038093777`*^9}, {
   3.912317759236363*^9, 3.912317794709379*^9}, {3.912409523098621*^9, 
   3.912409523384006*^9}, {3.912410487525897*^9, 3.912410487935278*^9}, {
   3.9124161580195208`*^9, 3.9124161791368017`*^9}, {3.9124171557617702`*^9, 
   3.912417159303616*^9}, 3.912421721995995*^9, {3.91242988374607*^9, 
   3.912429936431622*^9}, {3.9124449376275883`*^9, 3.9124449391817493`*^9}},
 CellLabel->"In[44]:=",ExpressionUUID->"57af5111-0f01-4f8c-80d8-9d8ac3a7ab54"],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`i$$ = 7, Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{
      Hold[$CellContext`i$$], 1, 8, 1}}, Typeset`size$$ = {
    458., {90.1875, 95.8125}}, Typeset`update$$ = 0, Typeset`initDone$$, 
    Typeset`skipInitDone$$ = True}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, "Variables" :> {$CellContext`i$$ = 1}, 
      "ControllerVariables" :> {}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> Grid[{{
          $CellContext`displayCube[$CellContext`dim$5886, 
           Part[CompressedData["
1:eJy9l0l2wyAQRGUhJg3xGXKlHMEX8P131hCg+4NYepHo1TOW+Kruavz7ev+9
zDAMT/E3PEYzWedDnJd1+9Fq02rVatFq1ipqFbrKaWW1mrQyWo1aPbQaSKS1
kWrdJqmW1Uo1L06qOHupQmZKfFI5P0tl3SLVZFepzLRJNRpNRF56RCL1uRWE
u3aF8NiRd0Xt/4Mvar8mwuRfLGpfd34j8/nzfpnPHW+z8FlFUPHCX1YdPSKR
XO8L4aFDJjx3GxPhxZIIxfVfHauud5L4wlkRmc/LHde88Bf1zD5i1dEjEonv
x0x46rR36RWcjHnNVdX5DmKHDV74i3pG/zIZ2EesOnpEonK/7A56D515rS87
avHCX9Qz+hd5xaxjMrCPWHX0iERVln75eXfPx/tGfeGKVbhHf1p8+XmuSm9m
HZOBfdSouubz8X7hBryCk/AZVQDPOGE5j5jezLpmMrR4Wx6B6Dav0PtIBuQG
uo5nBk5YzqOb9G7wNvoIVQePQHQ/j5DtSH7kJk9BPDPcTtiat846kIATVQeP
QNQ5b2B2Y/LxXNc5BVW81TxCeqMWUanoI1QdPAJR7zyJs0v3pEpenhkwYTGP
kCbIGiQD+ghVB49A1P29gLM3NPjhN+ob/dyfR9BIBvQRqg4egQi/Hz4slXZo

            "], 
            Span[$CellContext`i$$, -$CellContext`i$$], 
            Span[$CellContext`i$$, -$CellContext`i$$], 
            Span[$CellContext`i$$, -$CellContext`i$$]], "DeepSeaColors"], 
          $CellContext`displayCube[$CellContext`dim$5886, 
           Part[CompressedData["
1:eJzFltFxwzAMQ2l2gM7QlTpCFsj+f805pgQ8yupXr3dJHMSIRAigrK/H8/vx
ERGf8o4j9bVF4Si3KBzlFoWj3KJwlFvU9DkORXEo/XUrFSn5HPhQNMlVsqIi
V1lvsuhTdJJFQ1AfMDyiIruvC1KqLnRpLqTks4pBrlljokGuki9Vh5LFElPQ
9MJfpo4eUdFNSgvXjddlkN8/a9T810keJWnUkM+uF/4u+FovU0ePqMjyXArP
Dy3HnIOvQh4jLPrP/DR/kedF/+rOwD5i6ugRFVmexwJr76EzlTz+D73wF3lG
/8JD1zct9fmx3sgX+gn7h4/f9s8/nu9ufqw38oUrWBiDM/zrfIHVwFphJVd9
tEjdcn6sL9yAV3ASPiMF8AyJbc8jSzt6AZ2y6iOkDh5B0ewXdLcWOmUfaUNo
pEUV9LUnrBR+hUOsV2bTu+gjpA4eQREqra8S0VGfKlz9T/xrZ4bbJ2zXC3+R
595HSB08giJ1RlG28xU8dH3DgpkvDR70wl/kGf1r2Wz7ZUsdPIKiVBU4faUr
/O3cagp5ZvA883mUirlfcmdAHyF18AiKoAkI/m0x/Ga+HafjY4tXO8Mtbh7t
8A99/w8M
            "], 
            Span[$CellContext`i$$, -$CellContext`i$$], 
            Span[$CellContext`i$$, -$CellContext`i$$], 
            Span[$CellContext`i$$, -$CellContext`i$$]], "DeepSeaColors"]}}], 
      "Specifications" :> {{$CellContext`i$$, 1, 8, 1}}, "Options" :> {}, 
      "DefaultOptions" :> {}],
     ImageSizeCache->{504., {135.1875, 140.8125}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{{3.912421723350317*^9, 3.912421736275527*^9}, 
   3.912429861544059*^9, {3.912429912039249*^9, 3.912429936855916*^9}, 
   3.9124301569180937`*^9, {3.912444939780517*^9, 3.912444945292884*^9}, {
   3.912446600279335*^9, 3.912446625004259*^9}, 3.912446729272571*^9, 
   3.912446859074316*^9},
 CellLabel->"Out[44]=",ExpressionUUID->"38a9cb05-6124-4f8a-a75b-b65257f8754f"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"cubeSlicesAllAxesSimultaneously", "[", "minCube", "]"}], "\n", 
 RowBox[{"cubeSlicesAllAxesSeparately", "[", "minCube", "]"}]}], "Code",
 CellChangeTimes->{{3.912254090814623*^9, 3.91225409850528*^9}, {
   3.9122626197887173`*^9, 3.912262635065693*^9}, 3.912266838845381*^9, {
   3.91226743894987*^9, 3.912267451869739*^9}, {3.912267618897295*^9, 
   3.91226761911683*^9}, {3.912268468866748*^9, 3.9122684720184383`*^9}, {
   3.912268678959939*^9, 3.912268689916807*^9}, {3.91227002852654*^9, 
   3.912270033277396*^9}, 3.91227109937913*^9, {3.912410406453114*^9, 
   3.9124104096680193`*^9}, {3.912410491664907*^9, 3.9124104952239122`*^9}, {
   3.912417164300827*^9, 3.9124171672657537`*^9}},
 CellLabel->"In[45]:=",ExpressionUUID->"1c71fc96-a296-4b0b-ab7f-73c9848f5424"],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`i$$ = 1, Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{
      Hold[$CellContext`i$$], 1, 15, 1}}, Typeset`size$$ = {
    551., {267.6875, 273.3125}}, Typeset`update$$ = 0, Typeset`initDone$$, 
    Typeset`skipInitDone$$ = True}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, "Variables" :> {$CellContext`i$$ = 1}, 
      "ControllerVariables" :> {}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, 
      "Body" :> \
$CellContext`cubeSlicesAllAxesSimultaneouslyGrid[CompressedData["
1:eJy9l0l2wyAQRGUhJg3xGXKlHMEX8P131hCg+4NYepHo1TOW+Kruavz7ev+9
zDAMT/E3PEYzWedDnJd1+9Fq02rVatFq1ipqFbrKaWW1mrQyWo1aPbQaSKS1
kWrdJqmW1Uo1L06qOHupQmZKfFI5P0tl3SLVZFepzLRJNRpNRF56RCL1uRWE
u3aF8NiRd0Xt/4Mvar8mwuRfLGpfd34j8/nzfpnPHW+z8FlFUPHCX1YdPSKR
XO8L4aFDJjx3GxPhxZIIxfVfHauud5L4wlkRmc/LHde88Bf1zD5i1dEjEonv
x0x46rR36RWcjHnNVdX5DmKHDV74i3pG/zIZ2EesOnpEonK/7A56D515rS87
avHCX9Qz+hd5xaxjMrCPWHX0iERVln75eXfPx/tGfeGKVbhHf1p8+XmuSm9m
HZOBfdSouubz8X7hBryCk/AZVQDPOGE5j5jezLpmMrR4Wx6B6Dav0PtIBuQG
uo5nBk5YzqOb9G7wNvoIVQePQHQ/j5DtSH7kJk9BPDPcTtiat846kIATVQeP
QNQ5b2B2Y/LxXNc5BVW81TxCeqMWUanoI1QdPAJR7zyJs0v3pEpenhkwYTGP
kCbIGiQD+ghVB49A1P29gLM3NPjhN+ob/dyfR9BIBvQRqg4egQi/Hz4slXZo

        "], $CellContext`i$$], 
      "Specifications" :> {{$CellContext`i$$, 1, 15, 1}}, "Options" :> {}, 
      "DefaultOptions" :> {}],
     ImageSizeCache->{597., {312.6875, 318.3125}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{
  3.912254098961012*^9, 3.912261732964941*^9, {3.912261845109248*^9, 
   3.9122618673733587`*^9}, 3.912261906632366*^9, 3.9122623704304457`*^9, 
   3.9122624080775127`*^9, {3.912262607107293*^9, 3.912262642199815*^9}, 
   3.912266839283944*^9, 3.91226703766444*^9, {3.912267431943881*^9, 
   3.912267452347896*^9}, 3.9122675229003057`*^9, 3.912267556992798*^9, {
   3.91226759769552*^9, 3.9122676195664177`*^9}, 3.912268091243443*^9, 
   3.912268472371093*^9, 3.912268515066235*^9, 3.912268690382292*^9, 
   3.9122697360651503`*^9, 3.912270033905272*^9, 3.9122701114791193`*^9, 
   3.912270164057863*^9, 3.9122743433164177`*^9, 3.91231016958733*^9, 
   3.912312895668007*^9, 3.912314851576214*^9, 3.9123148823273363`*^9, 
   3.912399690371847*^9, 3.912399822882844*^9, 3.91241041079039*^9, 
   3.912410495555201*^9, {3.912413223498426*^9, 3.912413236181161*^9}, 
   3.912421755662983*^9, {3.912430119366959*^9, 3.912430148765983*^9}, 
   3.912442987188569*^9, 3.912446632176406*^9, 3.91244673886714*^9, 
   3.9124468624530687`*^9},
 CellLabel->"Out[45]=",ExpressionUUID->"21c41a23-b8bc-427e-ba15-990a3449b637"],

Cell[BoxData[
 TagBox[GridBox[{
    {
     TagBox[
      StyleBox[
       DynamicModuleBox[{$CellContext`i$$ = 1, Typeset`show$$ = True, 
        Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
        Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
        "\"untitled\"", Typeset`specs$$ = {{
          Hold[$CellContext`i$$], 1, 15, 1}}, Typeset`size$$ = {
        180., {267.3875, 273.0125}}, Typeset`update$$ = 0, Typeset`initDone$$,
         Typeset`skipInitDone$$ = True}, 
        DynamicBox[Manipulate`ManipulateBoxes[
         1, StandardForm, "Variables" :> {$CellContext`i$$ = 1}, 
          "ControllerVariables" :> {}, 
          "OtherVariables" :> {
           Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
            Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
            Typeset`specs$$, Typeset`size$$, Typeset`update$$, 
            Typeset`initDone$$, Typeset`skipInitDone$$}, 
          "Body" :> (
           Part[$CellContext`args$7384, 
              1] = {$CellContext`i$$}; \
$CellContext`sliceGridWithHeight[CompressedData["
1:eJy9l0l2wyAQRGUhJg3xGXKlHMEX8P131hCg+4NYepHo1TOW+Kruavz7ev+9
zDAMT/E3PEYzWedDnJd1+9Fq02rVatFq1ipqFbrKaWW1mrQyWo1aPbQaSKS1
kWrdJqmW1Uo1L06qOHupQmZKfFI5P0tl3SLVZFepzLRJNRpNRF56RCL1uRWE
u3aF8NiRd0Xt/4Mvar8mwuRfLGpfd34j8/nzfpnPHW+z8FlFUPHCX1YdPSKR
XO8L4aFDJjx3GxPhxZIIxfVfHauud5L4wlkRmc/LHde88Bf1zD5i1dEjEonv
x0x46rR36RWcjHnNVdX5DmKHDV74i3pG/zIZ2EesOnpEonK/7A56D515rS87
avHCX9Qz+hd5xaxjMrCPWHX0iERVln75eXfPx/tGfeGKVbhHf1p8+XmuSm9m
HZOBfdSouubz8X7hBryCk/AZVQDPOGE5j5jezLpmMrR4Wx6B6Dav0PtIBuQG
uo5nBk5YzqOb9G7wNvoIVQePQHQ/j5DtSH7kJk9BPDPcTtiat846kIATVQeP
QNQ5b2B2Y/LxXNc5BVW81TxCeqMWUanoI1QdPAJR7zyJs0v3pEpenhkwYTGP
kCbIGiQD+ghVB49A1P29gLM3NPjhN+ob/dyfR9BIBvQRqg4egQi/Hz4slXZo

             "], $CellContext`args$7384]), 
          "Specifications" :> {{$CellContext`i$$, 1, 15, 1}}, "Options" :> {},
           "DefaultOptions" :> {}],
         ImageSizeCache->{243., {312.6875, 318.3125}},
         SingleEvaluation->True],
        Deinitialization:>None,
        DynamicModuleValues:>{},
        SynchronousInitialization->True,
        UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
        UnsavedVariables:>{Typeset`initDone$$},
        UntrackedVariables:>{Typeset`size$$}], "Manipulate",
       Deployed->True,
       StripOnInput->False],
      Manipulate`InterpretManipulate[1]], 
     TagBox[
      StyleBox[
       DynamicModuleBox[{$CellContext`i$$ = 1, Typeset`show$$ = True, 
        Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
        Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
        "\"untitled\"", Typeset`specs$$ = {{
          Hold[$CellContext`i$$], 1, 15, 1}}, Typeset`size$$ = {
        180., {267.3875, 273.0125}}, Typeset`update$$ = 0, Typeset`initDone$$,
         Typeset`skipInitDone$$ = True}, 
        DynamicBox[Manipulate`ManipulateBoxes[
         1, StandardForm, "Variables" :> {$CellContext`i$$ = 1}, 
          "ControllerVariables" :> {}, 
          "OtherVariables" :> {
           Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
            Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
            Typeset`specs$$, Typeset`size$$, Typeset`update$$, 
            Typeset`initDone$$, Typeset`skipInitDone$$}, 
          "Body" :> (
           Part[$CellContext`args$7385, 
              2] = {$CellContext`i$$}; \
$CellContext`sliceGridWithHeight[CompressedData["
1:eJy9l0l2wyAQRGUhJg3xGXKlHMEX8P131hCg+4NYepHo1TOW+Kruavz7ev+9
zDAMT/E3PEYzWedDnJd1+9Fq02rVatFq1ipqFbrKaWW1mrQyWo1aPbQaSKS1
kWrdJqmW1Uo1L06qOHupQmZKfFI5P0tl3SLVZFepzLRJNRpNRF56RCL1uRWE
u3aF8NiRd0Xt/4Mvar8mwuRfLGpfd34j8/nzfpnPHW+z8FlFUPHCX1YdPSKR
XO8L4aFDJjx3GxPhxZIIxfVfHauud5L4wlkRmc/LHde88Bf1zD5i1dEjEonv
x0x46rR36RWcjHnNVdX5DmKHDV74i3pG/zIZ2EesOnpEonK/7A56D515rS87
avHCX9Qz+hd5xaxjMrCPWHX0iERVln75eXfPx/tGfeGKVbhHf1p8+XmuSm9m
HZOBfdSouubz8X7hBryCk/AZVQDPOGE5j5jezLpmMrR4Wx6B6Dav0PtIBuQG
uo5nBk5YzqOb9G7wNvoIVQePQHQ/j5DtSH7kJk9BPDPcTtiat846kIATVQeP
QNQ5b2B2Y/LxXNc5BVW81TxCeqMWUanoI1QdPAJR7zyJs0v3pEpenhkwYTGP
kCbIGiQD+ghVB49A1P29gLM3NPjhN+ob/dyfR9BIBvQRqg4egQi/Hz4slXZo

             "], $CellContext`args$7385]), 
          "Specifications" :> {{$CellContext`i$$, 1, 15, 1}}, "Options" :> {},
           "DefaultOptions" :> {}],
         ImageSizeCache->{243., {312.6875, 318.3125}},
         SingleEvaluation->True],
        Deinitialization:>None,
        DynamicModuleValues:>{},
        SynchronousInitialization->True,
        UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
        UnsavedVariables:>{Typeset`initDone$$},
        UntrackedVariables:>{Typeset`size$$}], "Manipulate",
       Deployed->True,
       StripOnInput->False],
      Manipulate`InterpretManipulate[1]], 
     TagBox[
      StyleBox[
       DynamicModuleBox[{$CellContext`i$$ = 1, Typeset`show$$ = True, 
        Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
        Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
        "\"untitled\"", Typeset`specs$$ = {{
          Hold[$CellContext`i$$], 1, 15, 1}}, Typeset`size$$ = {
        180., {267.3875, 273.0125}}, Typeset`update$$ = 0, Typeset`initDone$$,
         Typeset`skipInitDone$$ = True}, 
        DynamicBox[Manipulate`ManipulateBoxes[
         1, StandardForm, "Variables" :> {$CellContext`i$$ = 1}, 
          "ControllerVariables" :> {}, 
          "OtherVariables" :> {
           Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
            Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
            Typeset`specs$$, Typeset`size$$, Typeset`update$$, 
            Typeset`initDone$$, Typeset`skipInitDone$$}, 
          "Body" :> (
           Part[$CellContext`args$7386, 
              3] = {$CellContext`i$$}; \
$CellContext`sliceGridWithHeight[CompressedData["
1:eJy9l0l2wyAQRGUhJg3xGXKlHMEX8P131hCg+4NYepHo1TOW+Kruavz7ev+9
zDAMT/E3PEYzWedDnJd1+9Fq02rVatFq1ipqFbrKaWW1mrQyWo1aPbQaSKS1
kWrdJqmW1Uo1L06qOHupQmZKfFI5P0tl3SLVZFepzLRJNRpNRF56RCL1uRWE
u3aF8NiRd0Xt/4Mvar8mwuRfLGpfd34j8/nzfpnPHW+z8FlFUPHCX1YdPSKR
XO8L4aFDJjx3GxPhxZIIxfVfHauud5L4wlkRmc/LHde88Bf1zD5i1dEjEonv
x0x46rR36RWcjHnNVdX5DmKHDV74i3pG/zIZ2EesOnpEonK/7A56D515rS87
avHCX9Qz+hd5xaxjMrCPWHX0iERVln75eXfPx/tGfeGKVbhHf1p8+XmuSm9m
HZOBfdSouubz8X7hBryCk/AZVQDPOGE5j5jezLpmMrR4Wx6B6Dav0PtIBuQG
uo5nBk5YzqOb9G7wNvoIVQePQHQ/j5DtSH7kJk9BPDPcTtiat846kIATVQeP
QNQ5b2B2Y/LxXNc5BVW81TxCeqMWUanoI1QdPAJR7zyJs0v3pEpenhkwYTGP
kCbIGiQD+ghVB49A1P29gLM3NPjhN+ob/dyfR9BIBvQRqg4egQi/Hz4slXZo

             "], $CellContext`args$7386]), 
          "Specifications" :> {{$CellContext`i$$, 1, 15, 1}}, "Options" :> {},
           "DefaultOptions" :> {}],
         ImageSizeCache->{243., {312.6875, 318.3125}},
         SingleEvaluation->True],
        Deinitialization:>None,
        DynamicModuleValues:>{},
        SynchronousInitialization->True,
        UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
        UnsavedVariables:>{Typeset`initDone$$},
        UntrackedVariables:>{Typeset`size$$}], "Manipulate",
       Deployed->True,
       StripOnInput->False],
      Manipulate`InterpretManipulate[1]]}
   },
   AutoDelete->False,
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Grid"]], "Output",
 CellChangeTimes->{
  3.912254098961012*^9, 3.912261732964941*^9, {3.912261845109248*^9, 
   3.9122618673733587`*^9}, 3.912261906632366*^9, 3.9122623704304457`*^9, 
   3.9122624080775127`*^9, {3.912262607107293*^9, 3.912262642199815*^9}, 
   3.912266839283944*^9, 3.91226703766444*^9, {3.912267431943881*^9, 
   3.912267452347896*^9}, 3.9122675229003057`*^9, 3.912267556992798*^9, {
   3.91226759769552*^9, 3.9122676195664177`*^9}, 3.912268091243443*^9, 
   3.912268472371093*^9, 3.912268515066235*^9, 3.912268690382292*^9, 
   3.9122697360651503`*^9, 3.912270033905272*^9, 3.9122701114791193`*^9, 
   3.912270164057863*^9, 3.9122743433164177`*^9, 3.91231016958733*^9, 
   3.912312895668007*^9, 3.912314851576214*^9, 3.9123148823273363`*^9, 
   3.912399690371847*^9, 3.912399822882844*^9, 3.91241041079039*^9, 
   3.912410495555201*^9, {3.912413223498426*^9, 3.912413236181161*^9}, 
   3.912421755662983*^9, {3.912430119366959*^9, 3.912430148765983*^9}, 
   3.912442987188569*^9, 3.912446632176406*^9, 3.91244673886714*^9, 
   3.912446862673547*^9},
 CellLabel->"Out[46]=",ExpressionUUID->"d29d781f-eaaa-4852-8428-56c80285011b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"cubesSlicesSeparately", "[", 
  RowBox[{"maxCube", ",", " ", "minCube"}], "]"}], "\n", 
 RowBox[{"cubesSlicesSimultaneously", "[", 
  RowBox[{"maxCube", ",", " ", "minCube"}], "]"}]}], "Code",
 CellChangeTimes->{{3.912314463602271*^9, 3.912314466831243*^9}, {
  3.912314540429406*^9, 3.912314547984791*^9}, {3.912314786181971*^9, 
  3.91231479931944*^9}, {3.912410539943325*^9, 3.912410542472999*^9}, {
  3.912417171258238*^9, 3.9124171737988577`*^9}},
 CellLabel->"In[47]:=",ExpressionUUID->"af9d4561-7cad-4ed1-ba9c-ad923ed74cc4"],

Cell[BoxData[
 TagBox[GridBox[{
    {
     TagBox[
      StyleBox[
       DynamicModuleBox[{$CellContext`i$$ = 1, Typeset`show$$ = True, 
        Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
        Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
        "\"untitled\"", Typeset`specs$$ = {{
          Hold[$CellContext`i$$], 1, 15, 1}}, Typeset`size$$ = {
        551., {267.6875, 273.3125}}, Typeset`update$$ = 0, Typeset`initDone$$,
         Typeset`skipInitDone$$ = True}, 
        DynamicBox[Manipulate`ManipulateBoxes[
         1, StandardForm, "Variables" :> {$CellContext`i$$ = 1}, 
          "ControllerVariables" :> {}, 
          "OtherVariables" :> {
           Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
            Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
            Typeset`specs$$, Typeset`size$$, Typeset`update$$, 
            Typeset`initDone$$, Typeset`skipInitDone$$}, 
          "Body" :> \
$CellContext`cubeSlicesAllAxesSimultaneouslyGrid[CompressedData["
1:eJy91zt2wkAQRFGBEEI/BNhegLfkJbAB7z/z5zhwXTQTEih4YU11Vbfe758f
97ZpmvXf1+z27aE79qdhnOblnLQkzUlT0pg0JJ2qdEzqkg5JbdI+aZfU1BSt
56QlaU6aksakoUp90jGpSzoktUnqrXiEost6TlqS5qQpaazSKalPOiZ1SerF
3/LU4RGKrt+ctCTNSVOVhqRTUp+kXvxlnos5YurwCEW3H05akuYqjUlDknrx
l3kmv6VmIEdMHR6h6OWXk5YqTUnqxV/mmfzSV4WuowtIDnOGK2h4/eMaqRd/
mWfyS1/Rz8/W9/ZshZv7CPeZDSaHuWLqVFBgXoe342V5d1zBs60NS35JN9mn
GcyRnhSY/JJusk8z0BukbuNmoIHpZ9rbrrMZnLICFxXdNvYR3U7z05uPVxA7
lA3rPrK97TpzU+CiRyq6Pt4b7G423+xdxxXkzeCGdR/Z3jZBgYtTp0cqujzc
k9wuXqprTe/GzeCGdR/ZbQUu5sip0yMVrf4vpL4GRj9+M9/kub6PYJqBHDF1
eIQi/h++ABMgm4o=
            "], $CellContext`i$$], 
          "Specifications" :> {{$CellContext`i$$, 1, 15, 1}}, "Options" :> {},
           "DefaultOptions" :> {}],
         ImageSizeCache->{597., {312.6875, 318.3125}},
         SingleEvaluation->True],
        Deinitialization:>None,
        DynamicModuleValues:>{},
        SynchronousInitialization->True,
        UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
        UnsavedVariables:>{Typeset`initDone$$},
        UntrackedVariables:>{Typeset`size$$}], "Manipulate",
       Deployed->True,
       StripOnInput->False],
      Manipulate`InterpretManipulate[1]], 
     TagBox[
      StyleBox[
       DynamicModuleBox[{$CellContext`i$$ = 1, Typeset`show$$ = True, 
        Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
        Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
        "\"untitled\"", Typeset`specs$$ = {{
          Hold[$CellContext`i$$], 1, 15, 1}}, Typeset`size$$ = {
        551., {267.6875, 273.3125}}, Typeset`update$$ = 0, Typeset`initDone$$,
         Typeset`skipInitDone$$ = True}, 
        DynamicBox[Manipulate`ManipulateBoxes[
         1, StandardForm, "Variables" :> {$CellContext`i$$ = 1}, 
          "ControllerVariables" :> {}, 
          "OtherVariables" :> {
           Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
            Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
            Typeset`specs$$, Typeset`size$$, Typeset`update$$, 
            Typeset`initDone$$, Typeset`skipInitDone$$}, 
          "Body" :> \
$CellContext`cubeSlicesAllAxesSimultaneouslyGrid[CompressedData["
1:eJy9l0l2wyAQRGUhJg3xGXKlHMEX8P131hCg+4NYepHo1TOW+Kruavz7ev+9
zDAMT/E3PEYzWedDnJd1+9Fq02rVatFq1ipqFbrKaWW1mrQyWo1aPbQaSKS1
kWrdJqmW1Uo1L06qOHupQmZKfFI5P0tl3SLVZFepzLRJNRpNRF56RCL1uRWE
u3aF8NiRd0Xt/4Mvar8mwuRfLGpfd34j8/nzfpnPHW+z8FlFUPHCX1YdPSKR
XO8L4aFDJjx3GxPhxZIIxfVfHauud5L4wlkRmc/LHde88Bf1zD5i1dEjEonv
x0x46rR36RWcjHnNVdX5DmKHDV74i3pG/zIZ2EesOnpEonK/7A56D515rS87
avHCX9Qz+hd5xaxjMrCPWHX0iERVln75eXfPx/tGfeGKVbhHf1p8+XmuSm9m
HZOBfdSouubz8X7hBryCk/AZVQDPOGE5j5jezLpmMrR4Wx6B6Dav0PtIBuQG
uo5nBk5YzqOb9G7wNvoIVQePQHQ/j5DtSH7kJk9BPDPcTtiat846kIATVQeP
QNQ5b2B2Y/LxXNc5BVW81TxCeqMWUanoI1QdPAJR7zyJs0v3pEpenhkwYTGP
kCbIGiQD+ghVB49A1P29gLM3NPjhN+ob/dyfR9BIBvQRqg4egQi/Hz4slXZo

            "], $CellContext`i$$], 
          "Specifications" :> {{$CellContext`i$$, 1, 15, 1}}, "Options" :> {},
           "DefaultOptions" :> {}],
         ImageSizeCache->{597., {312.6875, 318.3125}},
         SingleEvaluation->True],
        Deinitialization:>None,
        DynamicModuleValues:>{},
        SynchronousInitialization->True,
        UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
        UnsavedVariables:>{Typeset`initDone$$},
        UntrackedVariables:>{Typeset`size$$}], "Manipulate",
       Deployed->True,
       StripOnInput->False],
      Manipulate`InterpretManipulate[1]]}
   },
   AutoDelete->False,
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Grid"]], "Output",
 CellChangeTimes->{
  3.9123145483787947`*^9, {3.912314787836027*^9, 3.912314800148036*^9}, 
   3.91239982854112*^9, 3.9124105428419743`*^9, 3.9124132416768713`*^9, 
   3.912414582626873*^9, 3.912421773283187*^9, 3.9124301387267838`*^9, 
   3.912443010767949*^9, 3.912446748427058*^9, 3.9124468661192427`*^9},
 CellLabel->"Out[47]=",ExpressionUUID->"aa23d139-1e6b-4d44-ba60-d4be1104e941"],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`i$$ = 1, Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{
      Hold[$CellContext`i$$], 1, 15, 1}}, Typeset`size$$ = {
    1108., {267.6875, 273.3125}}, Typeset`update$$ = 0, Typeset`initDone$$, 
    Typeset`skipInitDone$$ = True}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, "Variables" :> {$CellContext`i$$ = 1}, 
      "ControllerVariables" :> {}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> Grid[{{
          $CellContext`cubeSlicesAllAxesSimultaneouslyGrid[CompressedData["
1:eJy91zt2wkAQRFGBEEI/BNhegLfkJbAB7z/z5zhwXTQTEih4YU11Vbfe758f
97ZpmvXf1+z27aE79qdhnOblnLQkzUlT0pg0JJ2qdEzqkg5JbdI+aZfU1BSt
56QlaU6aksakoUp90jGpSzoktUnqrXiEost6TlqS5qQpaazSKalPOiZ1SerF
3/LU4RGKrt+ctCTNSVOVhqRTUp+kXvxlnos5YurwCEW3H05akuYqjUlDknrx
l3kmv6VmIEdMHR6h6OWXk5YqTUnqxV/mmfzSV4WuowtIDnOGK2h4/eMaqRd/
mWfyS1/Rz8/W9/ZshZv7CPeZDSaHuWLqVFBgXoe342V5d1zBs60NS35JN9mn
GcyRnhSY/JJusk8z0BukbuNmoIHpZ9rbrrMZnLICFxXdNvYR3U7z05uPVxA7
lA3rPrK97TpzU+CiRyq6Pt4b7G423+xdxxXkzeCGdR/Z3jZBgYtTp0cqujzc
k9wuXqprTe/GzeCGdR/ZbQUu5sip0yMVrf4vpL4GRj9+M9/kub6PYJqBHDF1
eIQi/h++ABMgm4o=
           "], $CellContext`i$$], 
          $CellContext`cubeSlicesAllAxesSimultaneouslyGrid[CompressedData["
1:eJy9l0l2wyAQRGUhJg3xGXKlHMEX8P131hCg+4NYepHo1TOW+Kruavz7ev+9
zDAMT/E3PEYzWedDnJd1+9Fq02rVatFq1ipqFbrKaWW1mrQyWo1aPbQaSKS1
kWrdJqmW1Uo1L06qOHupQmZKfFI5P0tl3SLVZFepzLRJNRpNRF56RCL1uRWE
u3aF8NiRd0Xt/4Mvar8mwuRfLGpfd34j8/nzfpnPHW+z8FlFUPHCX1YdPSKR
XO8L4aFDJjx3GxPhxZIIxfVfHauud5L4wlkRmc/LHde88Bf1zD5i1dEjEonv
x0x46rR36RWcjHnNVdX5DmKHDV74i3pG/zIZ2EesOnpEonK/7A56D515rS87
avHCX9Qz+hd5xaxjMrCPWHX0iERVln75eXfPx/tGfeGKVbhHf1p8+XmuSm9m
HZOBfdSouubz8X7hBryCk/AZVQDPOGE5j5jezLpmMrR4Wx6B6Dav0PtIBuQG
uo5nBk5YzqOb9G7wNvoIVQePQHQ/j5DtSH7kJk9BPDPcTtiat846kIATVQeP
QNQ5b2B2Y/LxXNc5BVW81TxCeqMWUanoI1QdPAJR7zyJs0v3pEpenhkwYTGP
kCbIGiQD+ghVB49A1P29gLM3NPjhN+ob/dyfR9BIBvQRqg4egQi/Hz4slXZo

           "], $CellContext`i$$]}}], 
      "Specifications" :> {{$CellContext`i$$, 1, 15, 1}}, "Options" :> {}, 
      "DefaultOptions" :> {}],
     ImageSizeCache->{1154., {312.6875, 318.3125}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{
  3.9123145483787947`*^9, {3.912314787836027*^9, 3.912314800148036*^9}, 
   3.91239982854112*^9, 3.9124105428419743`*^9, 3.9124132416768713`*^9, 
   3.912414582626873*^9, 3.912421773283187*^9, 3.9124301387267838`*^9, 
   3.912443010767949*^9, 3.912446748427058*^9, 3.912446866524477*^9},
 CellLabel->"Out[48]=",ExpressionUUID->"4cae0807-1121-4891-89d8-6885cea0d29a"]
}, Open  ]],

Cell[TextData[{
 StyleBox["Don\[CloseCurlyQuote]t run", "Section"],
 " the following codeblock! The cubesSlices function has since been commented \
out and so does not work anymore. I\[CloseCurlyQuote]ve kept the following \
visuals because they\[CloseCurlyQuote]re pretty and I like playing with them \
when my code breaks and everything else stops working. They remind me there \
is still some good left in this world."
}], "Text",
 CellChangeTimes->{{3.9124452555080767`*^9, 3.9124453582446117`*^9}, {
  3.912445393927196*^9, 3.912445401968899*^9}, {3.912446562355707*^9, 
  3.912446578275989*^9}},ExpressionUUID->"00cba1b4-7863-4035-b775-\
b728565720c5"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"cubesSlices", "[", 
  RowBox[{"7", ",", " ", "maxCube", ",", " ", "maxCube"}], "]"}]], "Code",
 CellChangeTimes->{{3.912252444092494*^9, 3.9122524530987253`*^9}, {
  3.9122534318234177`*^9, 3.912253432661413*^9}, {3.912253532371214*^9, 
  3.912253535336838*^9}, {3.9122536324392633`*^9, 3.9122536384850597`*^9}},
 CellLabel->
  "In[565]:=",ExpressionUUID->"8a6f1077-1d8d-412d-b17e-7e387e7a6104"],

Cell[BoxData[
 TagBox[GridBox[{
    {
     TagBox[
      StyleBox[
       DynamicModuleBox[{$CellContext`i$$ = 1, Typeset`show$$ = True, 
        Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
        Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
        "\"untitled\"", Typeset`specs$$ = {{
          Hold[$CellContext`i$$], 1, 7, 1}}, Typeset`size$$ = {
        1091., {177.1875, 182.8125}}, Typeset`update$$ = 0, 
        Typeset`initDone$$, Typeset`skipInitDone$$ = True}, 
        DynamicBox[Manipulate`ManipulateBoxes[
         1, StandardForm, "Variables" :> {$CellContext`i$$ = 1}, 
          "ControllerVariables" :> {}, 
          "OtherVariables" :> {
           Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
            Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
            Typeset`specs$$, Typeset`size$$, Typeset`update$$, 
            Typeset`initDone$$, Typeset`skipInitDone$$}, "Body" :> Grid[{{
              Image3DSlices[
               Image3D[(CompressedData["
1:eJx1kLsRwCAMQw3mlzGyUkZggezfhTs/cnZBwVMj2TL3fJ+pItLdk5S11Gas
xhKYjcko3tmbsQaqcefcTDxjqefOse/kv06Jvyfbh8uhTGP2vqj7XAnKfbTn
djT2RHHyPx+xdAgK
                  "] + 1)/(Max[CompressedData["
1:eJx1kLsRwCAMQw3mlzGyUkZggezfhTs/cnZBwVMj2TL3fJ+pItLdk5S11Gas
xhKYjcko3tmbsQaqcefcTDxjqefOse/kv06Jvyfbh8uhTGP2vqj7XAnKfbTn
djT2RHHyPx+xdAgK
                  "]] + 1), Magnification -> Automatic, 
                ImageSize -> Medium], $CellContext`i$$, 1], 
              Image3DSlices[
               Image3D[(CompressedData["
1:eJx1kLsRwCAMQw3mlzGyUkZggezfhTs/cnZBwVMj2TL3fJ+pItLdk5S11Gas
xhKYjcko3tmbsQaqcefcTDxjqefOse/kv06Jvyfbh8uhTGP2vqj7XAnKfbTn
djT2RHHyPx+xdAgK
                  "] + 1)/(Max[CompressedData["
1:eJx1kLsRwCAMQw3mlzGyUkZggezfhTs/cnZBwVMj2TL3fJ+pItLdk5S11Gas
xhKYjcko3tmbsQaqcefcTDxjqefOse/kv06Jvyfbh8uhTGP2vqj7XAnKfbTn
djT2RHHyPx+xdAgK
                  "]] + 1), Magnification -> Automatic, 
                ImageSize -> Medium], $CellContext`i$$, 2], 
              Image3DSlices[
               Image3D[(CompressedData["
1:eJx1kLsRwCAMQw3mlzGyUkZggezfhTs/cnZBwVMj2TL3fJ+pItLdk5S11Gas
xhKYjcko3tmbsQaqcefcTDxjqefOse/kv06Jvyfbh8uhTGP2vqj7XAnKfbTn
djT2RHHyPx+xdAgK
                  "] + 1)/(Max[CompressedData["
1:eJx1kLsRwCAMQw3mlzGyUkZggezfhTs/cnZBwVMj2TL3fJ+pItLdk5S11Gas
xhKYjcko3tmbsQaqcefcTDxjqefOse/kv06Jvyfbh8uhTGP2vqj7XAnKfbTn
djT2RHHyPx+xdAgK
                  "]] + 1), Magnification -> Automatic, 
                ImageSize -> Medium], $CellContext`i$$, 3]}}], 
          "Specifications" :> {{$CellContext`i$$, 1, 7, 1}}, "Options" :> {}, 
          "DefaultOptions" :> {}],
         ImageSizeCache->{1137., {222.1875, 227.8125}},
         SingleEvaluation->True],
        Deinitialization:>None,
        DynamicModuleValues:>{},
        SynchronousInitialization->True,
        UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
        UnsavedVariables:>{Typeset`initDone$$},
        UntrackedVariables:>{Typeset`size$$}], "Manipulate",
       Deployed->True,
       StripOnInput->False],
      Manipulate`InterpretManipulate[1]]},
    {
     TagBox[
      StyleBox[
       DynamicModuleBox[{$CellContext`i$$ = 7, Typeset`show$$ = True, 
        Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
        Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
        "\"untitled\"", Typeset`specs$$ = {{
          Hold[$CellContext`i$$], 1, 7, 1}}, Typeset`size$$ = {
        1091., {177.1875, 182.8125}}, Typeset`update$$ = 0, 
        Typeset`initDone$$, Typeset`skipInitDone$$ = True}, 
        DynamicBox[Manipulate`ManipulateBoxes[
         1, StandardForm, "Variables" :> {$CellContext`i$$ = 1}, 
          "ControllerVariables" :> {}, 
          "OtherVariables" :> {
           Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
            Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
            Typeset`specs$$, Typeset`size$$, Typeset`update$$, 
            Typeset`initDone$$, Typeset`skipInitDone$$}, "Body" :> Grid[{{
              Image3DSlices[
               Image3D[(CompressedData["
1:eJx1kLsRwCAMQw3mlzGyUkZggezfhTs/cnZBwVMj2TL3fJ+pItLdk5S11Gas
xhKYjcko3tmbsQaqcefcTDxjqefOse/kv06Jvyfbh8uhTGP2vqj7XAnKfbTn
djT2RHHyPx+xdAgK
                  "] + 1)/(Max[CompressedData["
1:eJx1kLsRwCAMQw3mlzGyUkZggezfhTs/cnZBwVMj2TL3fJ+pItLdk5S11Gas
xhKYjcko3tmbsQaqcefcTDxjqefOse/kv06Jvyfbh8uhTGP2vqj7XAnKfbTn
djT2RHHyPx+xdAgK
                  "]] + 1), Magnification -> Automatic, 
                ImageSize -> Medium], $CellContext`i$$, 1], 
              Image3DSlices[
               Image3D[(CompressedData["
1:eJx1kLsRwCAMQw3mlzGyUkZggezfhTs/cnZBwVMj2TL3fJ+pItLdk5S11Gas
xhKYjcko3tmbsQaqcefcTDxjqefOse/kv06Jvyfbh8uhTGP2vqj7XAnKfbTn
djT2RHHyPx+xdAgK
                  "] + 1)/(Max[CompressedData["
1:eJx1kLsRwCAMQw3mlzGyUkZggezfhTs/cnZBwVMj2TL3fJ+pItLdk5S11Gas
xhKYjcko3tmbsQaqcefcTDxjqefOse/kv06Jvyfbh8uhTGP2vqj7XAnKfbTn
djT2RHHyPx+xdAgK
                  "]] + 1), Magnification -> Automatic, 
                ImageSize -> Medium], $CellContext`i$$, 2], 
              Image3DSlices[
               Image3D[(CompressedData["
1:eJx1kLsRwCAMQw3mlzGyUkZggezfhTs/cnZBwVMj2TL3fJ+pItLdk5S11Gas
xhKYjcko3tmbsQaqcefcTDxjqefOse/kv06Jvyfbh8uhTGP2vqj7XAnKfbTn
djT2RHHyPx+xdAgK
                  "] + 1)/(Max[CompressedData["
1:eJx1kLsRwCAMQw3mlzGyUkZggezfhTs/cnZBwVMj2TL3fJ+pItLdk5S11Gas
xhKYjcko3tmbsQaqcefcTDxjqefOse/kv06Jvyfbh8uhTGP2vqj7XAnKfbTn
djT2RHHyPx+xdAgK
                  "]] + 1), Magnification -> Automatic, 
                ImageSize -> Medium], $CellContext`i$$, 3]}}], 
          "Specifications" :> {{$CellContext`i$$, 1, 7, 1}}, "Options" :> {}, 
          "DefaultOptions" :> {}],
         ImageSizeCache->{1137., {222.1875, 227.8125}},
         SingleEvaluation->True],
        Deinitialization:>None,
        DynamicModuleValues:>{},
        SynchronousInitialization->True,
        UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
        UnsavedVariables:>{Typeset`initDone$$},
        UntrackedVariables:>{Typeset`size$$}], "Manipulate",
       Deployed->True,
       StripOnInput->False],
      Manipulate`InterpretManipulate[1]]}
   },
   AutoDelete->False,
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Grid"]], "Output",
 CellChangeTimes->{
  3.912252454018835*^9, {3.912252653140688*^9, 3.912252680770763*^9}, 
   3.912253117257453*^9, 3.9122531526212883`*^9, {3.912253237361538*^9, 
   3.912253264268676*^9}, {3.9122534174316597`*^9, 3.912253447631917*^9}, 
   3.912253545564445*^9, 3.91225363904545*^9},
 CellLabel->
  "Out[565]=",ExpressionUUID->"20f7c4cb-b0db-4a16-82ed-b1c3b2f82431"],

Cell[BoxData[
 Graphics3DBox[{GeometricTransformation3DBox[{
     {RGBColor[0.405188, 0.204349, 0.343389], Opacity[1], EdgeForm[None], 
      GeometricTransformation3DBox[{{}, 
        {EdgeForm[None], CuboidBox[{0, 0, 0}]}}, {{{0, -7, -7}}, {{
       6, -1, -7}}, {{6, -7, -1}}, {{0, -1, -1}}}]}, 
     {RGBColor[
      0.6333770000000001, 0.23392566666666667`, 0.37273666666666666`], 
      Opacity[1], EdgeForm[None], GeometricTransformation3DBox[{{}, 
        {EdgeForm[None], CuboidBox[{0, 0, 0}]}}, {{{1, -7, -7}}, {{
       0, -6, -7}}, {{6, -2, -7}}, {{5, -1, -7}}, {{0, -7, -6}}, {{
       1, -6, -6}}, {{5, -2, -6}}, {{6, -1, -6}}, {{6, -7, -2}}, {{
       5, -6, -2}}, {{1, -2, -2}}, {{0, -1, -2}}, {{5, -7, -1}}, {{
       6, -6, -1}}, {{0, -2, -1}}, {{1, -1, -1}}}]}, 
     {RGBColor[0.7996756666666667, 0.3505163333333333, 0.48605733333333334`], 
      Opacity[1], EdgeForm[None], GeometricTransformation3DBox[{{}, 
        {EdgeForm[None], CuboidBox[{0, 0, 0}]}}, CompressedData["
1:eJxNzsENwjAMRuGkpN2jN+ZhBAaA+bHlGFt6h/9g9VOVvPh+f1+fxxjjWTNr
2kfNLzN7+p/h4nB8lQOf5Y1XOeVuf427hg/xpGl0Ai+axltbzqQ0u++yp9N3
vGi67Ok0U9yd4IzhRSdoBp50gh1S7nZnc9fwJT5pbjqBB83NW1vOpDS7n7Jn
0nc8aKbsmTRh/gEOKUA5
       "]]}, 
     {RGBColor[0.831283, 0.533131, 0.662656], Opacity[1], EdgeForm[None], 
      GeometricTransformation3DBox[{{}, 
        {EdgeForm[None], CuboidBox[{0, 0, 0}]}}, CompressedData["
1:eJxNk2sOwjAMg7t12z04Dn85AgeA89NHTCPZmpEqPnWu40Tt4/19fWop5bnW
tlbl+gHItS9u5PzeyQvLIF/G5+JJPhYHOT1hnvnfuN/Ihf6NGvFG/0Z/8cFa
jRmmeYZpYD5Zt7NWI+/G6rHTp5tmkA/jyrrdepcmyJfxyTzKkHkGNeKNeQb1
Ys1k0F9cmUeaaZppnmGe4sI8ygDTZJ5Jn0a+jDWfSb1Ys9JZ8cY8OisuzKOz
YXqYT+YJuzNhcwhmE+vOhN2ZYK1J3o11Z7QP28+6sDnA+gXutwDcbwHWL6wv
4H4L+fsDFoxG/g==
       "]]}, 
     {RGBColor[0.742797, 0.6702466666666667, 0.8056613333333333], Opacity[1], 
      EdgeForm[None], GeometricTransformation3DBox[{{}, 
        {EdgeForm[None], CuboidBox[{0, 0, 0}]}}, CompressedData["
1:eJxNktFtwzAQQ+XE8R5dqQPkowO089eSjrEAEn4fgp+FI48+39fP3/fvs7X2
vs52ncX7df4lrbPeT/Pj4m4+wEs3zC/whW2ad/DyLHgK9+t5uv40P93rtH+4
uddpnwFt+ABvzhDPCW3hXrhfebp9wplJd55wc7buDOHMJ9oBbfjhPOk1oS1o
C72EXkL9yjnsH27OOdwrvIMP8Ob8A/OPZ4fPgM+AdkI7oZ3IU/Ap+BTyFDwF
H8FnfeO0Nrz5Wyb+18QOT+xw6gfqwy9w9jm9JuoL9YVeQi+hfuUs/IvCzAsz
L917nvrwDj7AmXlh5qkv1AieK48wK+neZ+neZ2FWwnyke4ele4fjWfAx6gNC
ie4s
       "]]}, 
     {RGBColor[0.680889, 0.7972306666666666, 0.8930633333333333], Opacity[1], 
      EdgeForm[None], GeometricTransformation3DBox[{{}, 
        {EdgeForm[None], CuboidBox[{0, 0, 0}]}}, CompressedData["
1:eJxNk9ttxDAMBHW+k/u4lq6EFJDUHz3IiMAuMgYEz8eIXCzs99fP5/vZWvuc
8zinuJ/zm5l1XoeH+AaXN8UdfB1euGuu2Rt3zQdb4G7AT8yp91AGc1eeIWfC
MT+VYWjXFl/gh/baSTiJObV3aq/Z/Uz0Y2eKmzLYMbsTOyG+wO5hKkPCqQwL
/Sw5Q9yUYaGTpZlL3MHux/7GzBC7E+9NzKwMG11tzRziC/xQHjtLfIO7Mmzt
CjiBXQk/MbMyBLoK7R1i92PH7G8mtHeLb3BXBjsJJ7Gr9iZ6SPSQ6CHz/5+y
s8QvsP+dRD92QnyD3Uk9f6gQjqQ=
       "]]}, 
     {RGBColor[0.659388, 0.872053, 0.882048], Opacity[1], EdgeForm[None], 
      GeometricTransformation3DBox[{{}, 
        {EdgeForm[None], CuboidBox[{0, 0, 0}]}}, CompressedData["
1:eJxNkMERwyAMBIWJ6cMpySW4gKT+IOAizeyDh4Z9LHeC6/nen2pm75gSk9xi
fpJyzuAOv4IdTm/AR/CEM2PBgaYtJ8/MamR2nAUX/E5X+o7vsNHl9Aqu+ANn
wG3jij+4m/7Ed7iRP9lBcMFf+B1u7L94ozYnfXG3wwdd2v5QdE34JFPkg/oD
/50QdQ==
       "]]}, 
     {RGBColor[0, 0, 0], Opacity[0], EdgeForm[None]}}, {{{1, 0, 0}, {0, -1, 
     0}, {0, 0, -1}}, {0, 0, 0}}], 
   GeometricTransformation3DBox[GeometricTransformation3DBox[
     {EdgeForm[GrayLevel[0.2]], FaceForm[None, None], 
      CuboidBox[{0, 0, 0}]}, CompressedData["
1:eJxdl0uO3DAQQ223W/eYK2WTfQ6QnD/WhxkBetDrNGYQwqBoVRVZPfn69efH
79dxHD/P4/j+OSaen79J5m/5xhGe/87PsZ7Pzyn+fP6IPxZ+Swf9Z519Fn4v
/qP3PnrvWJxn4XPxh+4Dh3uWxefOQ3fm/pfuf+r+k19VS1ct1HWrrlN1Harr
Ej6XJvX2he//ah/iRJpTv+qedenXhe+lWXXPqn6Cp05XP/s6Wxe+lk5Xn7v6
zFnmcmsuRfi9NJlX17yY3SXMXNBkjtyTmVbNtGumzPfSfF+aL7NgXsx36jTN
GsyMmDVzf2nu+OdZz5k1/sED4HPpM18ws8MDXZpDnEgHP+A3/ACmxrp0qjhN
nmni2D9dHHtpiBPdYd6nyWMt26tNc2zqScv2Xlt3aOJ0cbo0hzTB+JM7RBw8
j1d7tle7+oO3nYWms2D8zFkw3ubsED/SITt4Bs+Tl3J8ZqdlZwqM/8lRl6bz
FT0nU/QhqjfZWUh2FqJ6o7qSnQU0yRp1kRHvUjB1kTUwdZG7Ls0hzeg5GaQu
suN9C6ZGsukMgoswtaPZdXboefScbBZhekJ2wOwKsgamP5xtOgtm7ryr6+zQ
2aF3Re+K+GT2LcxuIY/gW7gIs3PIcpVmlU6TTtPZrrNdZ7vuM6QzpDN0nyHN
SCfS8U4As6/INRgPszeq+E188FsYP/Mu740hvvdG9K6Iz95gFuwHdsVLGJ/D
B9/CRZies2e6+EOcSJN9Qq+S7edk+znqVdSfZHs42R5Gc0gnOsuewYfsFjB9
YLeA6QNnwXiPs2D8xtkhfqTD/inCZJzdUsUB4xn2kncLmCzDiTiRDnvmLUx/
2A/eP+wZfAIHTE/gsEMuYfrAnok47JBbGJ+QQXZCEcYnZLaJ38X3rvBOiN4b
aZLxlzD7jdyByRQcslyOz4w710OcoXdF/EjTWQazf8hvFccZd5bJaTk+8zvE
iTjRu/x/OvJ7CdOHZGcKDvm9hclO1B84ZLkI0xOek2uyQ77IL7WTR3JKRshs
pONs+u9zMoWHyam/u50RsoDH8Ly/K/FqEcYD+NPe83eKvZRsH+INZsQcmS89
hMNM8RLz8hw9O8/LM2Iu/wB0HKvr
     "]], {{{1, 0, 0}, {0, -1, 0}, {0, 0, -1}}, {
     0, 0, 0}}]},
  AxesLabel->{None, None, None},
  DisplayFunction->Identity,
  ImageSize->{373.21008279350485`, 382.3144326412599},
  ImageSizeRaw->Automatic,
  Lighting->"Neutral",
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultColorFunction" -> 
    "M10DefaultGradient", 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultPlotStyle" -> 
    Automatic, "RelieveDPZFighting" -> False},
  PlotRange->{{0, 7}, {0, 7}, {0, 7}},
  PlotRangePadding->Scaled[0.02],
  Ticks->{{{-0.5, 
      FormBox[
       TagBox["0", HoldForm], TraditionalForm]}, {0.5, 
      FormBox[
       TagBox["1", HoldForm], TraditionalForm]}, {1.5, 
      FormBox[
       TagBox["2", HoldForm], TraditionalForm]}, {2.5, 
      FormBox[
       TagBox["3", HoldForm], TraditionalForm]}, {3.5, 
      FormBox[
       TagBox["4", HoldForm], TraditionalForm]}, {4.5, 
      FormBox[
       TagBox["5", HoldForm], TraditionalForm]}, {5.5, 
      FormBox[
       TagBox["6", HoldForm], TraditionalForm]}, {6.5, 
      FormBox[
       TagBox["7", HoldForm], TraditionalForm]}}, {{7.5, 
      FormBox[
       TagBox["0", HoldForm], TraditionalForm]}, {6.5, 
      FormBox[
       TagBox["1", HoldForm], TraditionalForm]}, {5.5, 
      FormBox[
       TagBox["2", HoldForm], TraditionalForm]}, {4.5, 
      FormBox[
       TagBox["3", HoldForm], TraditionalForm]}, {3.5, 
      FormBox[
       TagBox["4", HoldForm], TraditionalForm]}, {2.5, 
      FormBox[
       TagBox["5", HoldForm], TraditionalForm]}, {1.5, 
      FormBox[
       TagBox["6", HoldForm], TraditionalForm]}, {0.5, 
      FormBox[
       TagBox["7", HoldForm], TraditionalForm]}}, {{7.5, 
      FormBox[
       TagBox["0", HoldForm], TraditionalForm]}, {6.5, 
      FormBox[
       TagBox["1", HoldForm], TraditionalForm]}, {5.5, 
      FormBox[
       TagBox["2", HoldForm], TraditionalForm]}, {4.5, 
      FormBox[
       TagBox["3", HoldForm], TraditionalForm]}, {3.5, 
      FormBox[
       TagBox["4", HoldForm], TraditionalForm]}, {2.5, 
      FormBox[
       TagBox["5", HoldForm], TraditionalForm]}, {1.5, 
      FormBox[
       TagBox["6", HoldForm], TraditionalForm]}, {0.5, 
      FormBox[
       TagBox["7", HoldForm], TraditionalForm]}}},
  ViewPoint->{1.7481426133883677`, -1.7572041543802106`, -2.303525767836044},
  ViewVertical->{0.8491251814858376, -0.5033349856079511, 
   0.16012594552316414`}]], "Output",
 GeneratedCell->False,
 CellAutoOverwrite->False,
 CellChangeTimes->{{3.896330176088093*^9, 3.896330192665531*^9}, {
   3.8963303631655607`*^9, 3.89633038976855*^9}, {3.896330423233328*^9, 
   3.89633043410995*^9}, {3.896330509216579*^9, 3.896330517282062*^9}, {
   3.896330627519936*^9, 3.896330636247086*^9}, 3.89633073077172*^9, 
   3.896330781069508*^9, 3.8963314621825953`*^9, 3.896332227841249*^9, 
   3.8963381893310957`*^9, {3.8963729778830233`*^9, 3.896372986594284*^9}, 
   3.896373047968767*^9, 3.896373149514886*^9, 3.8963732109932213`*^9, {
   3.896406898297853*^9, 3.89640691466749*^9}, 3.896408665498767*^9, 
   3.896415387910993*^9, 
   3.8964154184164343`*^9},ExpressionUUID->"0cf7af11-1c17-42bb-9958-\
8cd8ecfaa108"]
}, Open  ]],

Cell[TextData[{
 "The images that the following codeblock produces can be ",
 StyleBox["manipulated", "Section"],
 "--click on a cube and play around with the tabs that appear. You can even \
clip along a custom normal vector!"
}], "Text",
 CellChangeTimes->{{3.9124455171566877`*^9, 3.912445547501302*^9}, {
  3.912445609614478*^9, 3.912445620988151*^9}, {3.912447048377124*^9, 
  3.912447097979877*^9}},ExpressionUUID->"d7acfd83-2905-4c91-8de5-\
560bb0ab3d78"],

Cell[BoxData[{
 RowBox[{"Image3D", "[", 
  RowBox[{
   RowBox[{"(", 
    RowBox[{"maxCube", " ", "+", " ", "1"}], ")"}], " ", "/", " ", 
   RowBox[{"Max", "[", "maxCube", "]"}]}], "]"}], "\n", 
 RowBox[{"Image3D", "[", 
  RowBox[{
   RowBox[{"(", 
    RowBox[{"minCube", " ", "+", " ", "1"}], ")"}], " ", "/", " ", 
   RowBox[{"Max", "[", "minCube", "]"}]}], "]"}], "\n", 
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{"minCube", " ", "+", " ", "1"}], ")"}], " ", "/", " ", 
    RowBox[{"(", 
     RowBox[{"Max", "[", "minCube", "]"}], ")"}]}], "*)"}]}]}], "Code",
 CellChangeTimes->{{3.8963316730691643`*^9, 3.896331746094306*^9}, {
   3.896334624808174*^9, 3.8963346560064697`*^9}, {3.8963348102956*^9, 
   3.896334818678288*^9}, {3.896334880560091*^9, 3.896334900623008*^9}, 
   3.896415066154051*^9, {3.89641525094273*^9, 3.896415289726448*^9}, {
   3.912445463231304*^9, 3.912445464626943*^9}, 3.91244723400909*^9},
 CellLabel->"In[52]:=",ExpressionUUID->"4a151634-84be-4917-bc9d-83c658b41256"],

Cell[BoxData[
 Graphics3DBox[
  TagBox[Raster3DBox[CompressedData["
1:eJztmzFOAkEUhjeaEAsSEyoqEwsau9XESnZjrKhMsLSCRG1AEygMVlYegAN4
ADgAB+AAHoAL2OsBnJfNKggx8n/MEBIKZXeZLxln5t/33j/jYfOhfrsTRVF3
z/2qNx7PO51G76pgNzeN1slxa9dd7k/9xMWLalwcVyu1UuKuk+pbN6nU+slw
MHD342TUnrhnH0mzXEhdm/S9d5AOB0fp/eQ0VTn7VDm7Vzl7rnLZ9xpn7VTO
2q+Ds/6qnI2TymXzo3G2LlTO1qPKmQ5UjuhP1ZFrn39KnN2rXDY+KldKVc7a
qVw+j6E566/KZetN5fqJytm6UDlbjypH9RsyHhEdfZ5dfvMqZ89VLvt7Nc7a
qVw+j6E566/K2TipnM2Pytm6UDmqXxJ/Q+V1JB4RHY3a1zO8ytn3KmftVO4n
Dw7LWX9VzsZJ5Wx+VI7ql8Rfkj+HqI9IXkfiEdHR0+vdHK9y1k7l8vEKzVl/
Vc7GSeWofkn8Jfkzq3/9+gykPiJ5HYlHREduTBfyKpf3OzRn/VU5ql8Sf0n+
TOpf4l/59OuIX0DqHJKfkbhC9BBFz3/yoTmqXxJ/Sf5M6l/iXxH/eau/zdZf
s/yy1eGG69DH/hGJ+yTfIHkOya9IXkd14JMn7x3yviPvWfJ+J3GFxLNV78OS
+pfU3aTeJz4DrY9oPPHJk/qX1N2k3ic+A/E3SF3H/JzV7cMS/5n43tSvoz4D
zct88iF0tIgnvjfx24nPz/YXVnMuaBn9/d4PXc4/7q90/4j63tSvo/WNTz5E
PKI6ms+f9X1nst8dg30+VX+VqfM5y+ovnjoXtKz+qH5J/CX5sy+fwCcfIq+j
8YjqaDb+6ue+KuC8i6q//Jyqoj+qXxJ/Sf7sY//oP7xPv476DLQ+onkdjUdU
R1P5s3zuU9Wfu64SnuifxG+Sf5P6eV37R4QnPgOpj0heR+IR0VEM/v/hC5iJ
2c8=
    "], {{0, 15, 15}, {15, 0, 0}}, {0., 1.},
    ColorFunction->(Blend[{{0., 
        RGBColor[0.16791, 0., 0.301671, 0.0441387557208916]}, {0.1, 
        RGBColor[
        0.22307159999999998`, 0.02430488, 0.42178180000000004`, 
         0.13972488014880244`]}, {0.3, 
        RGBColor[
        0.2917374, 0.11413975999999999`, 0.6482166, 0.3308971290046241]}, {
       0.66, 
        RGBColor[0.26544316, 0.54154952, 0.92275724, 0.6750071769451031]}, {
       1., 
        RGBColor[0.772061, 0.92462, 0.998703, 1.]}}, #]& ),
    Method->{"FastRendering" -> True}],
   BoxForm`ImageTag["Real32", ColorFunction -> (Blend[{{0., 
        RGBColor[0.16791, 0., 0.301671, 0.0441387557208916]}, {0.1, 
        RGBColor[
        0.22307159999999998`, 0.02430488, 0.42178180000000004`, 
         0.13972488014880244`]}, {0.3, 
        RGBColor[
        0.2917374, 0.11413975999999999`, 0.6482166, 0.3308971290046241]}, {
       0.66, 
        RGBColor[0.26544316, 0.54154952, 0.92275724, 0.6750071769451031]}, {
       1., 
        RGBColor[0.772061, 0.92462, 0.998703, 1.]}}, #]& ), ColorSpace -> 
    Automatic, Interleaving -> None],
   Selectable->False],
  AxesStyle->{},
  Background->None,
  BoxRatios->Automatic,
  Boxed->False,
  DefaultBaseStyle->"Image3DGraphics3D",
  ImageSize->{345.0679272319402, 350.48585202455183`},
  ImageSizeRaw->15,
  PlotRange->{{0, 15}, {0, 15}, {0, 15}},
  ViewPoint->{-3.0982914759604685`, -0.4162944988414748, -1.2951018570850048`},
  ViewVertical->{-0.7988218327442976, -0.3595197905321676, 
   0.48231649333891535`}]], "Input",
 CellChangeTimes->{{3.9124469007662783`*^9, 
  3.912446900770895*^9}},ImageCache->GraphicsData["CompressedBitmap", "\<\
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
bF5R0KImTiBMRPDuaUKoK10gIcTwJo6q94KYrCngXUlySDB+GFBPZc+gsINO
klj0hFwY5UwsaOqE5CWQzWT9mWw4Y3Fh7am1anxjw2HUPrIwY+2ImpMwg37W
0Mwftxzi/c4Gs1v3fccunVScsOR4gPHK0pin5pbGPPEUdAivlsc88V94B/uk
PObJZfBrq+A5XV0eS2BugLUJ3u1a4PlmMJsQzMXYTDYtwf3KJvGaxPcrp7yg
LtcRmbVEZoNOrP+Fw+Yij0UrSh1Wl7TymGU4j4/DmW6MKMjTnTJTza1kqjNC
Y+RuJjJa4mIZUDBv5NK5eDGfiy9mOLpzXiRnG86IbrLj1SH20uVCd/SpmDS7
VIqnJTBK5b+9IC50SXrUPC10oaGOOs4XpJGJO06OKWxIWg/j3tKxMV9a3MNk
8iiT7GM84m8h/RLpDfG3CKUL8Sjbzl7sisj+wHpIVwgukvjRqbF0dUQUp1Bm
gtapcY6uIrSOKsxYCRPcE8Nzxxw0LPNHsvta0HXv0zz68WkA2ckwzl5XHvn4
gtLIJ5bCeq006sl3YND9FNrzr+DXV5XHPPU9PIvrAMAN8MbG0I0D6MYDcE2L
2+ER1hLmLstPPL53yqNimjkcJ9ytaF7unVBKmmFUshPSArplqJvuUOM+NDXp
2ZuZdB+uyd8pn6h+lDJE6wi4yBWXzSNdF0OdpHcroQjC96bo6F3PDMOe5NIn
saEFSLtQ3ILgMicFZiPquXwRoRGCTSXxaFESrWkvPvFRYuEbqXoWev6zkrj9
VDNqEucqhFmbQNlyckCox+mggRnDi19V8Sn50qdE3m7lFaX0s4xqRqkPvV31
oTWdKIHGbuUWVyqJUnVbi0aOLt7hrkqXWYZU2wjmLQiDIAC4EarehyPyx98y
LPsndB55uzF8e9LHHv5Mb+ZukwYu/Hlp8KI/wxN1U3noYw+Uhj36bGn4Y6+X
Rzz+LgD5WXnU48tLox7/pjz6ye/hSV0HIG6ACrgJFgD4VCustvL4p9oBRoQQ
K9/4JThbSwInmQTaV+qC1K1LIzdNJ4l6dEw6KyPT3FVQeUqAPLpUoIizPEmp
Comscc+Qjsm2NS5dxK7+fiKaAi/QCVcE/B1hGoR/v5FNn+qLIDFhSGNilsPT
ztEKl6LhiWiUiaF2T0pxMPkOpS15+3qdyZ4Wt3i+ItCz/RAZS+QyTfiSDI9o
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
PH0T1ruwPoGF1K6A9Q0spHYtLEVtGantbVJ7l0HtXEHtPKa233w8JtV/vjh8
UZVeMcHiJpKM4TTL6mgrmzoN4KyZSi1Sc2M6Ws+VmMuRm3V2lUVi5U7uYQnT
gozF9aRwiDIW9C6vbIUjhhfvxdLKE4aW3AZ5Ca28eVsLF2i0FPm3pm3Bk+F9
ZgUOtGshq8g9UJy1LTOt4tSeLT0JtQKTW2F+G2lIqbu2bk/hergRjCtDcSPF
bSDsXzH5elbrhrIcs4nXT6T9SwtOPJW0alrAqoj2fEmt8uuJ3L5U9Vdk+k1E
5AmNsS7fXpCmZdfR1V5gBuJ6Luke24bCtgk9Lvu2qdsl949vvKDP6IZZNryY
Vk1TK0ypx0JLLKfW++FxMXz9Eqy34Ov3oCX+FNaX8P2V8Mjw9hLw9kZ45wC8
cxje3gjvHIZ3h78qeCsueH2svLTvZtVf2SNTzj5Su5fYGpZld3jc2SCCNwM3
uhmpanDPremqhjp1aJ62lhJulH+bQbiK2hRHSihVDbas1qFqODMeaU05KPJI
bMlIlXeUXVfVlXtR2FpPqupJudBqkxvkG0iKGkwhqtxElIZrhswblpSITyLb
2nb2z9CuEl4PwuN6JZHfJ5OrJ/wwSYosufhebdv7uPIOeUSWBDPPusbhyAxU
v6yzirJp4PqGmEipwdxiokysX86a/XILtMgfj+968Z/HdTkXd5o8G9raA3vM
HQKz689LPW9X8ytA+RDASltN0DP/C/rl9+HrT+HXlkEvjdB+W+p9+/elXnPW
wZ/ZACBvhEcAdk4rrzv0VhNBe286tBFC64uBwppoZVLKwIVKAlEeGZdAyIzc
KJ5tTdHWod4yFi6jSZ3itVbWWhlbZLqM7ABrT1lHdAi9YrbZZtZXXqP3E3qV
essEga1pUq+SMXLGzEo7RVXanFOxgr+nzMfhtWWlRkKK7w26Fe4qT1VISGXt
1CIjr8OQ+Uht/uITq0Wanq/0KvLiDJ3WU3w+zRm4kc7AnRCvrRnZHsctm8a2
cKBFmntSPTXZ5H44MvthvlbR526vEGuJA9Oi6fnC18cmI5Xi53JBZDhZXkGJ
ne8V66AHfg4635HQ+Y6zONyyaYubx0LhPLTS83acVa8Gpu4G1hYCf0+Xet32
arnnbf8GDj8ADj8DDr+Cz7+Gz7+Fz5nDXsThJuCyBT7XHOI+Umc4zFLxrIu3
v9z3kidCh4XFYuY9nYMbpsohhCenYwFLLVdJl4DlN84IeV+p/Qz9StaulydY
O0heoIjzZWieSqVewfeeqLiTWisynnCLi25Fcys2cVP0KzjfFmP69u7SHEa2
MMtmVC0X3tYZhZbOCA/KHvSqTDsIFW+RPJWw/wvK1Bc4Qqh9AjBw2B06aROT
x9A4lFqsB7yY4MgcSum+TiiG9XYxRG55Z5cAVEHUYSyImqhL72UJQmpeL1/R
1P3Sm8Y1ntcwofECm78dJm17G06dh1d6zT4b+Lmu3Ou2v5Z63rqotPVtz5Z6
3vJaqedt/wEGPwTuPgfukL9V8PgdMLoG6mGSv15z2uBr3sftDH81xF8Ns4el
D08QSf/RsEfjUfGx/GnmLm+3qiZv2ujAWSbpOodMmo3FlyYHN4Zuk0Pe8oxp
DZJk0eDRcylZIj7KZ/v9xDHYvKsQUvOKX5f41+CfC9x6gZkT74W2z0HJWPBk
uyljOcOQsWA9xK2f40xDkjMj3kbWqUkKtU+TQSX7CvatFD5NoOrmlYcNRabs
ZHnPj3sb23YrSyRDGvG9nfhDhD9UnMvnuTQsyo3EXiSisoui0uOUePgRF+l7
HbqRQgeUvkLzio0Ttrj8v+O7XfKrMV3OGc887sAn2KPf403V294+FQbKPwF7
55Z73Xpjaetb7wUmHy1ufctzwOQ/4PO3YX0Ev/4/qJHL4dFkcj3Uzo1QHw0m
b2/D1QkmA9oMwo8LeDt3F7wJAD8WuCoqoYNB6PB4hKbYwTNi4utcbarYAHom
1b3icjnk5OUW/PnRHgdKIoriGoffJzUOumB6kWFK+kgqpr1UkUNeBsfLPGq7
SW0QTWrFUN/ihDjZFq1wPPzkWDy8Lpu+ZNKSrHxmMBnyX/X4D3TSLd7hlWF9
QzIQ3siDj+SubbJ19cXZInVbJhunhWmlVviR6KYvVJdBxaTUrzCtbMY3hKiP
kpG3aanwWrypxEh4cq/P3S4xkl/VhZTKpu5V+YpLO6zVMDEubOp64Y7jG2Z5
FpHb1u3X/dZBpW1m/xSq4LHlrW+9oLjVLTcXt755Xmnrmx+Dx+dhvVHsecs7
QObHQOUXsFbA+gYq6Wr4M2uBUIPI2UDk7UykqpJ/cRA510ckQ8QxJ/ijY1W7
P2DfWz3IiIZPpE0HOmna6lZJWGWgmLSXaXFDqJKnFXkq0/Z1RV5WBhwkbUdi
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
T9WXxdR96QHGSJL6ppzVhdhrHZJ5SuRJ5mm7zyTzDc0yX+qtsAZvVAhtVBHM
BJubQdqbuSqGN1VRplevFNbkfSTgdcFmknlqXSxkvpmUeT2RrxDWVMo8GN38
x0rhLQZUDm/zS5WI70eDxeNiIztMhpSDzZ3A5i7zwVzIe+clcVFdloHZK/Ee
Mt91HZhNMk9lvZR5kch3343yfR8k/WBC3r6ZSfkGHEvK+xOx+TRn82CweQjY
PITYfEWwmeT9urvAMMHq4bS9Z5Z5xmil8Oi7YPI9aPo9JOtg8/gH0HSweZKd
UdlJVH4E/j4Wg2g9mR5p1lP3FPpEDVy4wlO2Xgp0LjsHig46vzrfTGlrYzWi
NZd3S3c1Ju8O2TJe2r9bOW40bmGNHsKlsFf7Q7q9G+yuZ2G4UUfK5qfWPD7C
N4/n0BX9EyW9jXYteiOmTqeksvMn0B3SD9q305q1GZPdKvKUtv9y5d96o/lm
vX9bh7AACXw0ew0xUVrvfmoUDyKL99CTNNIn9j+1YHJaWjCxbB4sj5GbeqZM
Xm/i4PRtsmYouNMq2k7O7Gzo9WVUYAm0cSeYXYTfejdv3JFe+27cPVcxvMHL
0NI3y4e0gEY3JWZT83Fq3JJcKby5At2lbmtSr+uB1aTXn6P8Nul1M6bXlbhe
t0P53bVyeMteVcJb/4QEfWhsVPsxVSI7jEfpnQJWT0P5PRMaPRssnhcb3WkB
GLwYWk3Mlnq9Fj8jvUYC32VzPNPr7n8iUd+dkKf33oQ8/Q4iUeeszj/wBJJ1
sHrw2eT8Q84jWb8IVl9yCWYnG1ptYrZJrwuNvAVG3/EUGXtHLfr7XbD5HrT5
Pkpw0ucHrPxmtHZIWj8iNtsNYuczE9vYq6M0nW67lZ5tJfZrCwKRmw68BW/Q
FGo0aLK2Rg3kIRnm08olhFXlDEtGGxdiL/efMbvGsltE/OkP375MlAH7ajrx
nJLSJnovF5s9WFOHMEl5SuhF77VQw002NOeuqaGWOr7O8CusOeoT+jqEEvWd
gvr0kLzY1rP5NnPx29XvfMqWk/F7sDZNjffrMm5q08SbrAX3hzY98eTr9u6j
5DZG+MequmGjx70uPCFhvWB7Mb5N77spJ2/dUZs1ML1JKWTexHbqUk79W6gn
KvVTjCvvbEpajuy8OZXqNSqGNatVPrQpaTn1WSQtp27mpOViU65Jy8phLTpU
jmjdvUr4931iI9sNrBLVYRhK8dEoxceC1WB7p0lg9RRo+AxcZ8VGd56LQVpO
2Tlp+XJ8vxIZOWXnpOUbielg+faqMb12Qbv3JuTtdwBMP4yS/GhS/p/B9EFm
ppOGE9spK78EtoPxQ6+atBxs5+U6MvCbSuExt5QiY29Dt+8gAwfTJ0im39dM
+s0ycRLxEpMf+4l4lMF1esrmhelZ3pdmcvFmPEc+/vI8npO/Np/25l5fQHfr
3ljIy/M3mYibEvRF9Dy8VHK6N1fZRG+f5ormjg7h5hydd3aoaeF3iG43s81o
svgkMWf7cbuMdorNDzF/WGcwTjvNublo6xBucDraKuMBeiqqROYRV1mzcmun
lmB9HZic2xip2f060aSJmdDklvW6edeeFNzsA+sw+8Da/pOiO3Vj6GhJbOYO
zds6cGvuULMZdA4tWwI0X7uN5LwxPT3XjJO6pCHhtAcHQrfJG2trWqiyrQkR
+tnK4c1frBzWuEyVsKbUQ5Ek/L3yId/K5DwBMk4S7kFiTr0VScKpuzlJOO3B
SQlvUjGsZWsk3p0g1T+AyP0g1T/HRXUcggFCdxoVG9np19jojr9DsieAsJPj
dAnvzCQcxKXk3Czha0BqkLnHFpB5W2JMbyLznkQicz4zmX8+hbJaEHrQORAZ
pP5FJuaBJPxvEPkGiHwTcn0LpTTIPA5kHn9XIzIXt5D5AZhKfH5INTUvr4nT
dguZn50KEs8AiWdleUulZnmJxGXmcMGm4loXbR8yv2Eis4PJdhiX7XJLjRNt
RlcWW9CeDZzOoZzO1fz6JoaZXaMC5uThloapTJ7pEbAmeouWoBbPgRhtl4xm
PR14Yh5l6ZAaoNquOegS63BssXW1BerWEriJokPciKOzLLK5Q5hB6DBuFfl/
a9ASYmm8xKyfWXc5S/elkP/UzyGYXpObmbbxqKpseE5NWC/Z/Cx7rQmJ/pfY
LJLxFvnL25oXKRfVrESFiBbUVo0k+pUKod+izKYWa83LQ2pJoqlDalJ5ZxNK
yHWJBpNpA+2TSqHNvqoU3rpZ5cg238dGtOsSF9m+J1jbJza6Qz+wdWBcVIfB
SL6RiHccERfZiST6t7jojiTRlJBPFRKdCiabJXp5XK5ua+Jz99hYNabnlqp5
eoPJfXYm5ulLTN4PFhOTjyTnH4gk/OfjkOaTSfkHE5vPBJJoF5doKrWvuguP
vK4UGXMDcvyPp8hvN9Wi426DxZLJd8FgsHmiicmTHIY0R8kknEtzSVyfm/bY
+8JMM42zvJzGRNuyc+kheJ3O8/iWOc/DWdsGsoV809xRUdwlK28iM+ukphPa
GYzPobIHC+2TV9cL60B9G8LMrZeCNFXjjU/3mTuzSP/2nFovsSJbT7Z5B7Vc
ssruIewnerCNND+drj7oMrsJ9r7J3bWO1d01p04tIabuS7KDg7X7kuy8JC0f
LX6vJ4N1Zwmu0Wx+vt5r6rrE7pSHy2ZL/0tvVL6H9tCjbRpLz8Y05xx+nt8V
k2k2bZexDXChysUrRTQhVX6pUlizspVCGyPNbvwWUuxy5UKamVT5O7llRqoM
RW7xGQrlRlUi235XJaJDW/CxI0bX2MgOPcDTXuBrX3B1AL4bhPT6F6jy8CqR
HaUqjwOnJ4K/UOXO0+Noyyy6M22ZLUTBvLxq7h/WJMT8uBHc3ZKYp882cBf8
7ZeRmLf/vsR8P0GNBxxKyjcwE/w9KjhMKbZJlYcIVR7MOVxw6GV3oZFXlSKj
r3uK/Po3Uul/oMLE31vgLjg84Y6Jv3YisM0hKfyACTGrpaMfMgoXF6PkFE7h
F2c+9r6UaqIwRllGY8ZiO5GYUVnQ2FpOcyqHGUdSK5gaMnBDKO4ASIubaOTW
gbTZYdwHc1oblwfmcoTeg8W/jRrb4KGU+luzdavoxGDtsJRpqLPeDJW0TOTW
eY0tMs5ZDZmuN3jXFbMrM+Msfpl6fIPMslFmZ5x1sgPnTICHsBFlbrBE3Zzc
lgZLIYHsmrkfBhdlh1mU+XFaVjnbibwOa6sVp95UKcK3PZqlwYq5PZq++53t
qfbHVWhuosejc/Ul9uqRW9ukt9S6lD/BGtn4mXcjWBvT0uXDmr9aLrQ56S1t
gFWA5pLe0gYY6W01lLn1YiO+/zI2qn1jcK4ZeNkSuvo9eNcBXITWduweF9nh
R3ASetupP76n7Jn0lrLnkbGRHcfg5yJ75htg0Nk54OciZMfLE2J6gaO9NoCb
WxLz9gVH++2Evu5OzDuA8zRvf8bTRMZTXW8pe/bV2wvg51/g52Wl8Ogr4Oc1
cJM4esNTbBw4Ol7nqMo5arPfY77o901aa7MTVTlLI/AKdj4z9ZH2wozHGmPn
rMfeUrMNdpaBwBJHGT+djJ8x5qxZ8tMwgiFNpT2sKit9OiOtNqjp1JsihDA2
Og2z9OB9UKKkqAr6sRsnzEE5UB+UnNubOSX5jNZm9NBJd2GjwGtY0fnI0unE
aHPGz3Q6c2hGGurX9UjcdrZbux7Irkd0S0kyMMS35UmXAC1PApW6TqPpUfND
1o4nLA/mT5rK1gdGkzPhhWe0KtSP6Bh71Y9BxS0edWNEpUqpgoWl2auLFJPa
DFINS1lvPlwLV4hqRIpJG1OkmHJjivqGy40pV2x4m5qoRz+Kj+70OdjTAArX
CIrYFKz7Doxqjcy2XXxUx05gWzcwDfVrh95QRWS9HX7Cd7pi4u+PjuUbU1DL
LtPic3efEx/Tc2HV3L3AwN6rUZ9uAOvAwP5bMbYn5On/Z2K+AbuS8vYnJu5N
yjtgPz4fDJz1MsU86y449DzYdxHsu6QU+RUMHEsMvK5yBv5DDPRwBtqJgnbG
wVzEQYxJxEBzxsvqVxSoIN/0R9pLsx5BFh+zQXbHRD+HzrwQYp6diGeLMGTx
7cXC4ZzoFqApic1hTmltObcnsYUYBziNOtVkqcRcjqNlUxIi4Be7jP4EPiaJ
QSyNA/Ujccpbw0YHcBvzW8kvHVBpV1i0H3KIWzuUeVb39S4P3q7Ab+OJVFAb
Yu4+xBqQyTPdpu6htOH11F1IhB7K/mOi8xCzOg7SfohtHZvbD/FGBhHB5JEW
5q5aY3NTTdtg+46TsCx7TTY9u9Ei6g1buzwJttYF42wtaDPpmVguh7SZRHJI
pWdclfA2SnxUpxogTu3YiE4fVonu+ClIBSns+DVI+S0krznI1gqffeSw049x
XA6Rtlo2k8bERXedWDVX92mQvjmQvYWJeXovS8jbdw1kb11S3n4bQb7NIGIa
iJeO9yAhk0Mi4h6zHLK0lW8kHU8uMOiku+CwM+6CI0HAUf4ELKYT8CYk8BZr
EHKb9RmQUmiSwwhDDkumPEBe+hAEfKi9NPORVir1EcjHCfiYtM9JCkgslMNB
bGTFpi2c6+Bbi7LZppBwGDcRUbaDe3oi0q4IJamyttT3iniXoEBtBsLlbZ5P
ZJuBDHGMyrA0lLzk+amvSDpF2xC9zmyrdwTjqLdZPUxzyzqT7AZZZzD5DFWY
XxeRp+oKxveO2N8nStqtXQWipP1434s6JaOeRh2dloZgORmQG42BIi0dAHVB
3JqNZTgF1j2vKBsF6V41lE/u3sr9Hihfq5LlIpqR8kH1WperGtmpSlxE+wQQ
xl0lqoM3PrJzLeSMdaFwH6P2+wIkaoiB/LMDKV8LfNcGStgeKtcZw0f5OhHh
hsVHdx8bn+uHiSDatKoxvWYn5OkLsvVdCjKtQJ4Jxeu3NjFPf1K9P0AqUj4i
HOWfOxLz9SfCUf7JlC+JK18mVO5YcsGhJ92Fhp9xFx55zl149AWl8K9Etssg
2lXkmqR2f4NsBuEM0unKZ4sSnJvEt3lKptwHzx54X5xBPHuolZr1SCs9+xEk
zsQ1h5lrPOsk/tEtF2M4GPUiuQa+uTBbe3dJtlZ+WbZ0G1OpHnwSBWUa6pDd
emQjPoNvXPfCcurr8amlU4/dYiTq356Ls45+1kzs8hg7PTZ9q4fA2llv6uEM
wL5oyT4jQ7VFBHAEz7ElF5WJY7gIVuN9PaWFoOzPxV1FJQcjJAd7GrKYW24Y
59CXk8k9/92/PUD/vdHdw+bT3kM29qH7q5bGPuHGnu1DrMYktWaarQWn4OtW
3WNPNyXYmsntmufjw9u9HB/d4Y24qHbvQc8qVY3oHB8f3dEFnVJjue7VqRLR
gXTvs/ioDvVBTbPutcZnsV3TgXSPtmv6oLT7GaXdiPjcP4wF7SYisZyeGNMn
NTFvn7mJnIKLoXPQvP4rQT3SvfWg2aaEvP2k7hEFhe4NoOSTdG8/kszDyQV+
OeouOPwEkszToB6jH8q8v5QiYyX9rjEKFtMpeAO0C6B7UVL37qnPTL6nPT/t
vvbijAdezr2HWulUwb85PvybLTnImMfVjo4dvCweQyaxe2dxtvbeUs66CtLj
TzLPZNQb6mu9LwnokN3USPpkMzxW8/v5/oX7tNdwiua3ejsd9sA8PzkTwLB7
f6A2WTYndwProHfWMJpq+JAtwpyBCrLJbU69M04ODbPoPbly26l4fGL/nBDB
MhW5ruyfk9e3fw5Fhs6cabqDn9Ps4Jej0oUGaJ9l1525BdWyPXW3/Y0p15Ra
WyXV3mSvNYhq8n5llGJrVyAhV1uklx2eSwjvVDo2V+fXKke3eycusn2F2Ih2
sbG5OiZWie5AKWY1UIcU74O46A6fgFKkeF/FRnYy77iQ4lGK2S0+umuf+Nw9
BiXE/DgiIU+v30At0Kzv5MQ8faYlxvSdCRrNAe3m47tFSC2F4vVbncgVDylm
X7PibU/K0x+KNyAjKd/P+5PzDznkKjDMTLOzULcLCqfZJQ+n2hWV0W2cL92k
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
C5sXzEkc8jnPfd/4P4RPzuM=\
\>", "ImageResolution" -> \
96.],ExpressionUUID->"cabde1b3-64e9-4f2a-bb8d-089c9750c524"],

Cell[BoxData[
 StyleBox[
  Graphics3DBox[
   TagBox[Raster3DBox[CompressedData["
1:eJztm7FOwzAQhiOQEBsSb4DUvgBIbDRi7FpGpiLB1BapDIiNlTUP0z5MX4ZY
xarl2vH5PjcI0QFaJ/mb1Pbn/+6SXj29Tl5Oqqp6O2//Tabv98vl9OPhzDSe
p7Ob69lp+/bC+RuOm7vh+HK0nj+O2vejxWbVvt+M2l11u70eN4N6sbmtm8G4
bo+pN6t5XVWfbfur1urMq1Zn2lqd2a7VbffrdOY4rc4c/xs6c71aneknrW47
PjqdmRdanZmPWp3hQKsj/O040vLbZOvsq/0eOTrb3o2zXGe3237M0dn9dhxy
dPa4FE8p/nJ19jrd65fqbP+4/SbV2XFxxytnXptXd57k8dCoOaL8Uj+iHGnO
7/d7Sufq/fFO6dy2P89SOne7P79TOnd/isOU/8U47OLPtEPfQ8KfaYf6T8Kf
ae+vmzL+tv6r4YDzS/yXxnXUjyhHivhZzKGvj823kM4/f2yeh3Rd21M68rn+
dcXWkxR/ZnsojpDwt/XfvHlcil/ivyR+pvkRjeuoH1GOcr5/at65vrOv757v
uX5FfDKkC11PLK6W9UNO/leOX+K/JH5m+S+rM9D8iMZ11I8oR/L4Oe07JN8j
eWa8/2TzqDS/xH9J/Ezy3xxuNPNHkr+XHn+yfpP4i+RPGo5K1EuP4/d3x+/Q
40/WbxJ/kf3kukh/0HE4jt//Gz/rv9p1g6xXZJ0snR+VjOsOMf5k/SW+QfyK
+CTxZxIXED/T8mfz0Nxx9/NfKX+xvDvFXyrfj/FH6gyl+S3tR4SjPupX0vOF
9NLrDOlJfYPkdVr+bD02lz+/DizlL1Z/TvFH6t4l+S2ZH5G4jvgR4aiv+0ek
3k7q/Oz+AnsuKJc//36olD9yH7YUv6XqdYQTwieJ64gfEY76fH6D3O8m9/m0
/K1/ns/J5W+Nngvi/BL/JfFzl99I40USp5L8iMR1xI8IR+uen5/UnM/V9/2c
KuWX+C+Jn0n+25V3STgk9RpSZyD5EYnriB8xjvr//QJ53pvoCf/Ev0n8TfJn
Uv/S1tuontQZSH5E4jriR4Qj8vuHbxZmmyQ=
     "], {{0, 15, 15}, {15, 0, 0}}, {0., 
     1.},
     ColorFunction->(Blend[{{0., 
         RGBColor[0.16791, 0., 0.301671, 0.0441387557208916]}, {0.1, 
         RGBColor[
         0.22307159999999998`, 0.02430488, 0.42178180000000004`, 
          0.13972488014880244`]}, {0.3140914351851852, 
         RGBColor[
         0.2877702100694444, 0.12918308854166666`, 0.6612564195601852, 
          0.34900868055555556`]}, {0.66, 
         RGBColor[0.26544316, 0.54154952, 0.92275724, 0.6750071769451031]}, {
        1., 
         RGBColor[0.772061, 0.92462, 0.998703, 1.]}}, #]& ),
     Method->{"FastRendering" -> True}],
    BoxForm`ImageTag["Real32", ColorFunction -> (Blend[{{0., 
         RGBColor[0.16791, 0., 0.301671, 0.0441387557208916]}, {0.1, 
         RGBColor[
         0.22307159999999998`, 0.02430488, 0.42178180000000004`, 
          0.13972488014880244`]}, {0.3140914351851852, 
         RGBColor[
         0.2877702100694444, 0.12918308854166666`, 0.6612564195601852, 
          0.34900868055555556`]}, {0.66, 
         RGBColor[0.26544316, 0.54154952, 0.92275724, 0.6750071769451031]}, {
        1., 
         RGBColor[0.772061, 0.92462, 0.998703, 1.]}}, #]& ), ColorSpace -> 
     Automatic, Interleaving -> None],
    Selectable->False],
   AxesStyle->{},
   Background->None,
   BoxRatios->Automatic,
   Boxed->False,
   ClipPlanes->{{0, 1, 1, -6.}, {0, -1, -1, 20.}, {1, 0, 1, 0}, {-1, 0, -1, 
     30}, {1, 1, 0, 0}, {-1, -1, 0, 30}},
   ClipPlanesStyle->{None, None, None, None, None, None},
   DefaultBaseStyle->"Image3DGraphics3D",
   ImageSize->{345.0679272319402, 350.48585202455183`},
   ImageSizeRaw->15,
   PlotRange->{{0, 15}, {0, 15}, {0, 15}},
   ViewPoint->{0.8704498806289765, -1.3042941981913656`, 1.2414240411226716`},
   
   ViewVertical->{-0.7382344562036677, 0.13614025765204243`, 
    0.6606630895699491}],
  Raster3DBoxOptions->{PlotRange->{{0, 15}, {0, 15}, {0, 15}},
  PlotRangeClipPlanesStyle->{None, None, None, None, None, None}}]], "Input",
 CellChangeTimes->{{3.912446965137061*^9, 
  3.912446965141261*^9}},ImageCache->GraphicsData["CompressedBitmap", "\<\
eJzsfWV4FVfU7vkCFC9QKJSibSmUtkBbijvJmZmT4FLc3QoUihQLLsHdg7sG
gmtwd3eNu8s5c9faMrNnzoT2Ps997q/vx0mCJDmz9vsuX2s37ja8b69B3Yb3
69GttPxXtyF9+/UYVloa/Bf8VZb/sdn+5wa87pe2ZYWvVZvN7cNNm+1/v/7f
r/9/f32RfMySpfUONU/rJWH6v2ej/x5EPubIPmih+nvb5eGt2q6KGdVuVdSy
tiujRrRYFFXba8rH/PV9X5FvyUq/5ST5mM/D11f9eub5RM8FQcnD5p5LmtFr
Y4x/+5WRh+BbL8HrQbsVUQ/arIg63XpZ1Pqm88KG2acGN5Qmh3whz42lb8GD
/ryj5OOXWU+raoW5F1PbzTuXNGbOueS1c4OSD8wNSroEP/v+zNPJT/85EP+6
7+aY4K7rYiLar4qObbciOrztiqg3bZZH3Wu5JPJk49nh/p5TQkd5TQmRvaZ+
LCz5htDfY7MdJB+Le6iqWvhCiFr3QrQ6+GKYuvR8uDPgXLh6asfj9GvLriQ/
nncu+Q38ylD4ldHwOW7WmaSEqccTk0YHJKQM2Bab2mtTbGoX/+hE/PXwa8P+
WBb1psXCiDvefmEnPaeEbPCaEjzOc3Kwo+HUYPz1Tvrb95GP3+IDVrwcpba6
EKaOPh+hrrwQrh65EKFeuRDuenw+3PXuQoQr9GyoK+LoO2fstodp8WtupiYt
vZKSOu98chq8m/TZZ5MyZp5KzJhyPNE5OiDe+ef2uIz+W2PTe2+KSenmH5MI
wohpvTQqrPnC8FeOWaF3vSYHnwZhbPaaHOILXzfynBxSrOGUd+n0Xe0iH3/I
fytarX0+TO0C72gavLZeCHeSd3UxQn0Cn/FdhcG7i4GvE+DvkuFdpwSFqWmn
Q1zph986M3Y8TnOuu53qhHfrhHfrguNzwTt1zTyd5IJ36hp9IME1eGecc5Dw
bruujUn8Y1lkTPOFEaHwTl+D3O7BOz1rnxK81T41ZJJ9cnAzz8kfS3rN+JhK
3+1W8rFSVt/Tatk551LqzD2f3PvgG+dseDc7L0Sqp+Dd3YZ3+RT+/A7eZfj5
cJW8Y/i7ZPicCq90eJIM+OwEeTvh311BoS7XqWCX6/Abp2vn43TXpntp6vrb
qerqGykqoEEFmasgb3XKsUTXPwcTXEN2xYlPktZrY2xK59XRiS0WhscoM0JD
4QnegJwfwNMEeU0N3g5fT7NP/tjCy/djsYZDn9iS6aNsJB8L5vY7qv7sdzre
e87ZxD/nnEuaA4LznxeUfHDBheSrm+6lPjn02vn+5AcUPnuUCDVJfJTzES4n
fHbC49qyuuBvbaXUc2EuFSCknvroVA+/yVC3P0pTt9xPU8mj3cFHS1WXXk5R
55xNUicfS1QBRq6hu+PZo8XCo8Vm9NsSm9ZzfUxKu2URCY38wmLgscLgkd7C
6yG8zgOcdtgnfpzsNfp1M2nIk1Lew17+j01VbQn08dZSOoN68M3XekUUapW2
k44mjZ4TlDwfeLVpTlDS4bnnks8B127Dn5/CI79ffDE5YvX11NitD9OTAl5m
pACu0k5+dGUEhbnIacHDwQO6bB74mB4q/JWtjAp/gV+p59kLnz2IPLtLDXwN
z/4wTd36QHh+drTwy8ixwrOrf+2O057/zx2xzoHbYjP6bIpJ67I6KqXZ/LBE
ZXpILBxjOLzekqOd+DHIa/y7rfYRLybZ/3zaUh78FJ8/S+vWO+Lo468kH4tm
673ieum2/tF1/1ge3bLdypjB7VdGTweNuKarf0zg33vjLoD0b8O7eAYgewOi
CAFRRMIrFsieuOhiSgpQKR3ebcaWB2nOfc/TnQdeZQBQM1wnPrhcZ0NVIgMP
lEE2lcgEUGL7Rjv/k3D+ga+oDLaZ5ABkVVdeS1EBb+q4QwnqsN1xTA5xRA6A
AWe/zTEZ3dZGp7VcFJHSaA7KIZTgAIj5xmvih/v2ce/O2oe/2Gr/88l06c8n
f3j9+bis54BHKAdbDBXEMvKxxE/tVkba262K7NR2ZfQ/bVdFzQIhrG23InJH
u1XRR0FjnQdTcaf7+pgXoF/fjwpICPc9nBA95URiPOiPJDABKfBKAwGlAy2c
iy4mO5ddTXGBrnHBY7n2PstQ9z5LVwNeZKiHAO7H3jvVMyEuW3ZdJtkMMjnw
inACJAffbitG5LIZ5LLhbqoKP1RdcilZBaVFsEHksiuOY8PVb0uMs/u66IzW
SyLTmi+ISGlM5BISA7gI9fL98Npr7Lt79mEvzgAuttv/fDYTPrezD3paThn8
+LPWvg9sUVQuS8nHb+o0nRs2pem8iHWtFkfsbrsi+ki7lVEXQBa32lHT+Ry+
fgd2JgzsTUyvTTHxf+6ISxq5PyFl3KHEtIlHEtMBQGANkpzAJdf880muhReS
XYsvUc215mYKebRdT9LVPU/TiYz2g4yQFmBd1NPBLiYcTU7faXI68QHk9DJD
3fEo3YifBxQ//reoDpl+MlGFw9JkNRTltDPOBarR1X19tPOPpZEZLRdHUFnN
Dk10TAuOsfu+D7WPefPa66/n90A+QdKfT3fBaw7gqAvg6Cd5wIPsjkHPbBFU
VkvIxzJZ6/uqQ5vOD9/TZG7YlcZzw++D3XjWaknEW8BPMLzCAFtR8Dmuw6qo
pE5ro1K6r4tJAzuTDm8nYxRYyjEH4p1jAxNc8HbRJqkzgP5go1TAlAqYApml
qGvh+FFdgiUgctstyO3gKyo30EkorKy62D4jYgPMEbEdeetUA1B0j9MpwopT
hDHWLb+aos46nUQQ5nskQQWPBpmnDgZ09d+GUotxtl0e5QSEUcnND09p7BeS
4Jj6MRqkFmr/6/lrkNQDeJ23D36yBz7PkwY/7SENflzeq9ON7A7HoTBRcMUb
NJkTvrjJvLDzjeeGvQAeBzeaHRYBvhga3rhWSyITwIlJBsCltl8dnd5xdXRG
57XRgPEYZ59NseQsR+6Pd406QN8pCFCdAOeNdgPPHs3jYuALPhU+HeDFA6Vn
y6HJbw/Ib9/zDAInlA3K6Fy4K4suv+812IE/QSiK/w//P54Dhx5SFM0X/io8
Nzw/8MvUiUco/AB66gACuxgXuJxO8MuoEBdFpLWYF57SZGZwgrfvu2j7Xy9C
7YOfvgHoPYTPF0F4e6VBT+bY+z3oLHe8WcG7w/Uc9buetoVQKS4mH0sW9JwW
N6LJvIh9TeaG3wMJBvv4hcV6+4Um+viFJsOfU5rMC08DiaaDRDNAos4Oq6Jd
HddEu4C6ru4bYlx9tsSqYF3VEfviVZCoCpB0kyhQGTQylSY+KpHmDiJNDZFP
dIkGMImCDAVplkXpaobwDJGoiyAXEYwnYiVNhCSR6AlKaHx7A7fHqqDsXMAq
Fz5SG5To4oiMVgvD01rMCU1pOuVdgjLqVbR98LMwkOZbkOZDgOMFacCjXVLv
+7OkDje6S22v/SZ3vJ6rcePrH0WBFvRuuiBseeM54RcBlq98ZodGec8KS/Se
GZrqmBmaji8QcAbw3Nl0XrgLBOsCwZJ3AkJVQahqj/UxKrgpKqhmUOUgVltO
S8GC56aCD09gCubflgXFChIFuRKp7nySrulItCHH3+sSzZKJRNG9QDvDJUqk
CfBfcZW6VbPP6BJFok8AEwsGXwV95AI9hfgEiUY62yyNdP6xKDyj5bzQtKYz
glOkf94k2P9+GWMf8jTMPujJG/ugx/el/o+CpJ73d8jtb86W213vIbW/WVlq
fyNvkybn31OJLiIfC38FEhzXbF74QYDo/UZzwkNAqnHes0JTUJrgmzqVGSFO
+NoF3rbLZ3aYC6SrgiJQmy8IV1sviVDB4qhd1oJkN4Bkt8YSRv29N54KNxcR
7mgm3HEgXCQe6gBELPqU6FtsJ4gF+X6myXcXQyzyGbifTZSr5rIh/1GuwVSu
aKPw+zhCwV8kKPVjcsVfi4TBtwLumtppjYZSV5tlINPFEc6W88PSm8wMSZPG
vU22U7kCUp+G2gc8fm3v9/Ce1P3uGZDjTqnd9bnwua/c9np1rzZErm8Ncm3e
dG7oqsbzwtHqvG6ESPUjSE1TZoZmULmGumR4wZ9VkK8KMlcBvSo4ByDfcBVi
AxUMoQqWSe22LloF46gO2xPnYSXcMQcZao9T68QV62ZRuNk0waJxQn8GlCaI
HP3/POAVqihe9tIFfIYL+B1VrqhY4cd7oHTBDeLyRSWEWmA8YBYRgDzrtDqK
yTfSBUhxtlwQ7mwyKyTd7vshzWssyHf06wT7cJDvoCch9r4PXoJs70rtr58D
vO4F+S6E1wC57Y1a9g7X8tfvesv2mgp4IfWTv/WZHjqpyZzQw6AKHgJwQxv5
hcaDXtWBOx0EPD3EJU0PVaVpISp8rQKY3YTdbH642mpRhNp2WaTaZU0UqIcY
dfieOHX43ngbkbbtCzf9i97vpKO6ilh1PYV4NxvvphFXAD0gUdpIeZBiDlHh
ukmZKVz8/3h4yBCEMFENZ3UIo/0fDmoB1RgR8xoK4dZLI10AGmdjv9AMadLH
dK8JIOYxb5Lto0DMfz2LApUQLHW7+xJEfA9Ee15qe30fwHcJfD1EbnetttL8
cgGf2gdfilLO1Q5Ugz9I6Tr4AG9AytEgtSSQng5jkDJIOAuK2ANlDLEk/L0m
ZbByKjisagtQF21AXXRaFan22RgDVi0O4YxSRhmrf4OEuZRHc10BEgZnnkgY
HS2MPdDZIlJ+SB0uNG0Q5RAnHh34nJYiZl4CehF4FMgL/IHzzycbtASKd+LR
BPJG0I6hiHuCXuu8mol3UYQLuOy0T/qYYZ/4Id1r/PtU+xhA8shX8aAloqSe
94IBva/kdjfuw+eL8Hm/3PbaAqnV1X6ST1Btxet0AR+fc8+piBdQEZdW5gVP
A1frGLwegbjCwEGId/iFpYDGTddFHEJEDIZImhpC8Ix/ohLPTSQOygUwHao2
AUw3BwUN6kztsCISjTF5EIjOkJoM0wV0aQdQs4eaGaWNbi1KHOJIdQVIfA1o
6Q2gUtEBQLOFTsThNzRcymUlbRoyuciR4DHhkaGNgziDgBklPQMkjQTCNzB4
Rxx5c0i8nhuiASJRrpZU0i6vyR+d9okgbV+Q9jiQ9j8A6OEv4kEXR0mdboUA
eF+DpO8DkM9Lf1zdI7W4NE92BPVXPE/Vc9hPFWpc//RTg7S7QCSwEWzdTQD1
OwAzAjrZQfRyGNo6rjI8iHyzEmnb2Qu+pn9dyqBMfADmEKaozQDm4OWo7ZZH
ql3BIvYCmPcFwQ/crlnFTIXO4wki+MtU8KuZ4EGDE6Gj1wbyheMW3TYtb+Mi
p4IGFL8JtREXOhE4KGgU+Cj45eD86ELfHKP2AIS0ByUNIgGBB7u8JqHQP2TY
x4PQx75LtY94mWwf+DgeFHSU3BGE3vbaK7nN1XtS66tBcrOLOxXlzDzZ6/RA
eDV0NDxZxNPzxGMq9PlU6D86ZkfOAqGfBGP4DDRJOOA0AeANbluIbgwZxD1Q
1oBzIJkK70K1Twm2aWIH3EPkrDpmMO0CeEft0hLEjvq7M7h54MqrPVH0m2PV
AdtiiaZB0RvEjrobxQ4KAEW/UBQ9SG0N0zKov5mzLIr9B+LbkZRRMBU7/kcM
1vCbiOjh/PAHz2Rix1+OGBiykwRtxP/ouylG7QYGBzDjgsdDrIPoPzgB6xn2
se/SQXGnSkOeJtl7P4iXut2JkjreDJb/uPpCannlttzkwhlFOrtT8Ty9CMQ+
VPE6JaHom3iewDLSA4P4ezSbH7m10dwwwHz4e/DhYrwp5pl2MWKeiv8zFLsK
QbdqH/dOtY9/R45CmvyRnkRBjQCa1kEdD6fQBk8BwN/VP4aeBKjPPnAS6L7g
SaBl5aeAggFswumCIgbNTU7igpEEKEzMH6DaNoG/vNspoNndIiRm8JvRF5oP
ppSfwl804UBO4k8gwADQOr3WR6vtlkUgk10ynsQkOAlfOIlx7zLso96kg2ed
KvV5kGTvdS8OTiISTOhHueWV53AKt2X5zFnZ89QeOInF8PoLNI8ie5742m4/
5mGz+dru0aOYR4+iss/s8HkQ9Z0BFjyHoyBMABccA5gMs7KnR1GCMmECHMXY
tyooQBUienIsEhwPHAnRUQaFxK3AAnoe4OiSM8EAqNs6diab9DNB24v2Fp1j
1BXgeRjPhLEDTSbmQRHk6KWgOQXdQ62ALZ/mQ1odC88DIUnwaNAooIVB5Qd4
gN8HBwMO5dBdOkF6b4xWO66MJB6adjQTP7i8xr1z2ke/ybAPfZ5m7/8oRer7
MMneE46my+1I0E0f5CYXn8Ox3JY9TwfBay+8lsleJ4cDQeze1Y4WlSvvJkdz
x3A0/ZrMC90JML4DDuVHOBoM1HWWzCDHYmJJSdUO4tdYgscy6jW8Xqng26oQ
l6kQR6gSHJ006YMqTw2myosdUWN+RMuj1I6ro92OCSOq3puoEkOVjbTBIwKP
xYOcUR7iwKAOW8jMB7IGvSQMgVAlHXqtpTbxZAT/8yf9lLipfpTulrHDn4O+
Lf4eDDBQj4oEGgRvrc8m4uqrYLLJSTWaFeJSpoIVGf/eCWh12v96nmHv/zgN
THYKIVH3u3FSxxsRUsvL7xXl7HMgzB14nQcVtldueHKRo87xwXLlA5Lj573F
HRV3e/jaVNstelJz6UlVbTQ3ApNTZ0GfvQSPKRKkmeigWQALpxRPKhs1JajH
kESj8aReAejAtNm+UsF/U6VR7MTg3yX4fzKcGDwGO60wpuAi4LQgJoPTsjox
NDuo7NCwoqgwJwK+JT2tvEQNzWcWB09ryeVkYm1YDsyQaD1FEq3mhHS47l2R
QgWEdTRd+L2WqEdyIrkWs4Q0EnvkPnps5MjgvfUFo98ZLc+SSHps8yCu94NY
dMpHFzmyYS+c0sDHcGyP0ux94dh63U+Uut6JBV82XGl0/oPsdQqP7bbS8NRZ
ud6JXXKtI/MdlQ8M9q64X1Yq7SvZ+KcDJKF/gx7bHPIxN9Z6BoMY9zeZI2bD
RFOkRWw2gWXZgWXBRgWILIMzw9OD/zP8ha2oKv39UpW0c3ytyvB/5QnvVAXO
0TEtmBkpiKsx1APGtV8V7XaOXf2p+9ALIN2f5TIwtp52ghsqdpAC7Xgic+0t
mgXGrMX+5zTzi8oPM5NouD4zp355ZQH/I3pt4CrzszQkzEFJzmCZC4yuuSeh
n2M0yRNgLgbdoOZ4ljNDXA7fdy56jk+c0oDHGVI/OMs+D1KkHncT5Q43YuVm
l8IVR9B7iEmeKQ1O3pLrHT+l1DyyzfHbgXmOivuHKhX2ecOrtPLL3myVK6+w
XRPPMlc98OSWN50Xfg4o+AqUJSbixLjQ6EbnNrjRGhPHvCV6kp2kaocTxLOE
Ex32AkyBNPyFcKqvVJmdqgKn6j35g9poerDaFHRoSwh02q1kJ2pxqtzk9d1C
zR0G8egNYB4YnUDd3OUxnChKH2lJ8tFP9Xw0Kks0faBUs1keKvzbUZYuASVM
D7WsIZ+PlpTH85hqxHwCkvTPHfRQMaGGlpscLDxeSzATzeeEuJpM++DyHv3K
ZR/0hBBU6v84HaxfGli/FAiHEuSWl2PAKYGDPfsOnJGncp1jN5QaR44rvx7c
rlTYv0CpGDDcUXFfY0fFA9/6VNidrXfl61fouc6mHMWCCWasMR34wGd2KKYD
SVYFzjYDeMrSVm4czeXupHCO0lPFM4XXc/jvfz0HQUvwR+2A4fBlOGAFDtgB
BtPb953aaMoHtemsEBpQrYzywNMFV0g7X42xMSQJQrVuHGEHChOTJLRek0TK
DfNNbOVnK+Zx9z5PJ9nxQGY0T1OjaRPS5JXcE7osRY4/QCs6sJoxnjKmFmaa
ThpNA0bkSF00/vpJh6ut5oeqzWd+dHmPf4v0pSeN9O37KF3qdS9V7nw7WWp9
JQHoGyP7nA+T5bNvlfonHis1Dl9z/BpwAk53h3el/YtBDY9wVNjfzFFh77c+
ZTcTCl8SjzoXzVDOCbsEKvkNHHc0qORkOGbMozsd7JhlRuEs5JRzgq/zgfk6
ltzFE7bRI86n2oc+U6W/ntMXO24Z/p888qWqjH6lOsa8Vn3Gv1UbT36vNpvx
UW01L0xtDWKA47bR8y5o4HIXpp17g3YeyCwsaudxpvISipyftWBebbTGlD3T
Gh0cp3jWvxjSRzwPepwlmvGbtz5M05L4eNZzTMlmVDJjD9KEKL75tiuiiPtA
zhvUdasFYWozP4ihJr53eY16Tc8b1XW/RxlSrwfpUudbqXLrq8lSi0sJctOL
0bLPuTDZfvqNXOvoQ8evB67B+Z5SKu7bBWe+CM75L+WHXQ6p1PrvHCXWZXeU
WXiBHrcfZXbR3hsTJ3RcFXm8zZKIJy0XRoSD0U+A40+FGDoDjp0k+WWIq2WS
V9KYnfO/MJueeRY8clsZVeIHP4y+ZDx4AIky6qXq+OeV6jPujdpk4ju16bSP
arM5ocStQlekzXJdiWuHvtZ46JhAGW0q1qCcUd4of3Lo17RKGC2o4rl/5lZb
xDYHOHOhZvOLsbaAWUN25Kjz8ci3iMctZA6R4ugloN5BRd4HlHh7sEltOb3x
uEGV4eM6wHZ5jX3r8hoJR/7Xczjyx06p9/0MCF/SpT+upsqtruCRx4Mij5Yd
Z0PlBideO34PfKRU3H/dUTHgJBz1NsdPe+coZXcMlEut97YX9y8jF9+Ys0bx
uecMR94ZtOLWXhtj7nRaFfUBjj0WzEgKsD69kV+YEwMqPHJFPHKw1MRCk9j/
gx7VmJk+TGC6B546fBgCH+DkbaW1s5eHP1eVv1+oDiA8WC3VZ+xrtZEvEH7q
B7UxZm7mgVXjZw9C4i4ZP3c03Hjug7ZnXgHFs5/B6klIdogtPfQS6GdaFp5k
4p/TiOg0M9xZuE4PNx44Gnf8fwgUzKXxw9Yy8Syfhvp8zMF48v4Qox1XU36j
LseKAiYEHVM/ql7j37m8xrADH/rcKfV/5JS63s6Q2lxLk1rDgbe8nCQ1gwNv
dC4K3LEQR/Ujr4HfD+Ggryg/7T2qlN+1Sfl+20y55IZBUnH/xlJJ//JepVbl
bF18h+0sPfFZ5GOeb7uvjZkOIjvXa0PsK7CNUe2WRSZh5bX5vPCMJnPCXGDK
8dRJHAouGj30XPTQ3WiOB26guem8wVO1D3mqSkOeUcoT2lPqy3D8CnyTYwS8
4Ad5g673nvBW9QGzTvKl4Lc1geNvBo4N+m9/sOPXjp5R/s8dcYbSgGUBHEsE
EE6hnseIKIuplsiT1nikoMY/+9TRc/WO34dqBH0HfvSc51jnGsfqXOisof/R
cVWUduyYkFQg4vACBnmNg6P/B0z5CHDa/nzqhEgqQ257PUNufSVNanUlVW5+
KUlpfCFOkc9GKrWPBStVAl8qvwTcV37acwmO/ZBcZus6peT6WXDkQ+SS/s2k
Ev4/OkquzS0V2WA7bTj6bn22xO0Cst/vuSE2BJgTD28pFTtpmi8IdzalR696
z6RZIu3o89DYSsxgjLb02/Dk4eDF08+qSn8+UcENVaVB8HnIU8r/b1QZQCBz
/gMAlFHU2DvA2KPy49U3rA1hSIZZAwxDUYCoNLnOR6eOAMBUHxplqiej4qX1
5BQSNtGw2BoEGJLBYWfPDAS81omOAeapME6fa6rC4e9D8GH9iiRyCQhAd8F7
b7VYAAAEOl7AKAKC0W+ofe/3yCl3upUh/3E1XW51NU1qeTkFFH2iogTFKvWO
RyjVj3xUfj/4wlFp/13lh53nlTJbD8gl16+XS6ybI5fwHwafW8rF11XwKu4P
IPBjPdW2meTjV2V7rY+b3XNTzIWeG2PfAC6jAQjJXfxj0tsuj3QCNl1NITpE
seMROGbQZLo8jRWUUAGIcZmbAnhuVgD5AQJPKQT6PVQhElFBt9E/IzRAIYhY
kMEWyCOpn6/AL1IwnQzaCBQQgtMMBzQJyCuEAibzIXajtauCxmqhWAAHdYBt
FJgHwyQIam/0ypknoCEBT5eUU8JdthwGKAgFWTQDqAvQpcekGkKB23wCg5MU
BljCxHKKBgUsp6yIVJuBflNArl4gV6ILxgMUxjBdMOiJy97trlPueBN0AUCh
xeU0qenFZNkRlKA0OBGj1D4arlQ/9F6pfOC5UmHPbfn7rWcBBgfl4v4bpeLr
5iol1g2Viq1t5FlkWVnPQnMIFI6LUCjSt9emmL2gDx722BATBuo0oeu6mDQI
mTI6rY1xtV4age0xRA2j6DWTgDAA4y/B25VQIXzK3cMazdDnxM1Hv48iIgtV
BoiCvg/Qqeh9H6O9Pg8oQgboyCBmQkAFCe8x8YaoAK8EfBGeKaXICFObY6l+
cQQr9USR1CNmRv9TqR5OjCTcrtHyDkIDvbkdj42dPBgJgBeY0yoQOKulS2lS
Gy0Opkex+RORMeuMXqJH5UBqDGK1Zy14hEsjCPMIKiZ+5AoCxewCAbrsve67
wBN0yh0AGa2upIPjnyp7n0uWG55MgHA+Rq55JFypFvhO+XXfU/nHnTfl0huC
QDEgMtZJJdbOsH+9sp/XV4uV+l/OKu9VcObnji8W0jkJ2wyqIyr12ZiwHGzr
xR4bYt91Xx8dAzoipcvamPROa2Kc2BMD8Zer5eJI4p5xXUG8xOlUR5B8NmZJ
ERzu8Z9ZR/yu2kUd0RuQ0OueKvWAV0949bovoOORjg6MHXjyB34RQcaUj1qd
g/cY+Jh6DNDRxppBT9DHWN4Zvic+0x6DsUKPAc+eY3IA7Qg6+QgPDg1M5hyj
TV65RGhoveNY63hLC4GYgl3PocF65rXOjT1C+QmgMWBrrNp7Q7TaGesc8AzI
Pl1hvFO9RmOQAHaj70OXvec9p9z1jlNufyNDbnEpDWCRonieSlLqHo+Xax+N
lmseCpOrHHgrV9zzRCmz5YZcct0ZqfjafVLxVavsX6+Y6PnVwt4NCs3yaVDI
7+f6BfzyeRWYcViERpEhvTfF7u+1KfZx9w0x4aAzErv6R2s6A/sSO6yheSks
WyAhNd0xNViVsUAI71gCJ0LC8kemISLFxbeipqA4QDx0v6tK3e7Qzxwjve9T
2yLiA7QGxwb5rai1eJfP9BBDRwQptACYWy8Kxzo3oSGmd9G34C1VYMoyq80v
1NL1KSQUwGNdx+DBoQG2QqhM/moogaGhwTaVzaZxCtQa6FMSG7Inzq2wgqX5
rpilX0TKX6R+RFwKtCPIPXQn+j9y2Xs/cNl7ADS63M6Q21xLlxufT5M9T6WA
O5Gk1DkWL9c6EgUaI0T+Zd9rpdy2h/I3G6+CxjhhL7Zql1fRZUu9Ci+cUL+Q
Xx/PQn6NwJYgNPLXzz/PFkixMZ18/Lpmt42RK3pvjrvSc0PMe1AbsV3XRVO1
sZaqDcQGNquhG996Ca3aaa4GREEKOJnyOKo2MJ0rGV0LCwezMD1tPPW+ouZg
COmKr9sCWu7qaBFtDUajoKIILlF1TQ2mvm9Jt5awRrNZOwHAG/U0toNhFELa
Z3bEfbqL41SSoRSHtkZEC3oRaF9OfhSRktcdKazXVhy6wJ+BPxMzmtTWYbG0
jFbD7r+Feh1tljKtPYtSktgW9OZQxAMeofNJ0dKdeR4tL6fL8tk0uf6JFLne
sUSl1pE4pXpgpPzrvo9K+Z0v5TKb78ul11+WSqw5Yi+6bItXkfmLGn7p59uw
kF+/hgVnNWlQaGalBoXn5K1VaMT/AEYCRMAUGQ7OxxFQJk/Bf4sAG8OUCQVL
RxNgMDWGPh/GhI0gSPEGVY95fnnsG+IYEKrjIYrKhEAlC4FKDt3A9LFQJl1v
g1/S5TZ6Ioga/CuOFtEzGfyU5qSRXBgS8X6fksQxkgW10oiX2OczkwPPgXFg
L9Z4Ivb8mBtPUKeYC7eIluVX9J6fnbTxhCDFVjXTyrq51V1rP2EN2ugADRNU
y2BmcTBawTYlWvwLJ9kYBUvZGPsjJ0GYRLUQq8McEgxbG51LB9WSChYnGSxO
glL9cAy4qOHKjzs/yGW3vpDKbLorlfa/YC+2ItCryILNYGmWNPjSb1IDChhH
vQJTv6/7+dh8lQuMRMDQ+UbbNJquath3S8wa8FqvgyBBw8TEAWBQw2QAYEwa
hieIPyeJA2KNZoWQ5ALWDhQEDVggWQCNpGsYHTU5wTURFQxDjahgADQAnc63
PET8dGf44b4L2rBBzC6h1cMgClNoHD8F3fvFGHawuINhIzjnWuNSH9a4hOzm
6U7eLjNLa5fJ5Vb45+0yW1m7zCk6c0I8WawjZ44hVkSuqE81MROFv2IimzcZ
xjwXLKEhhrCkhtE66vqWEEtgz2GTmSSbTV1CxBCI1t7vIVE6EiqdDjedcrNL
GbICSqch4Kj20SSlxuF4uXJAtPzz7jCl3Pb3Utmtz6TvNt62l1oT5Fl00YGG
hWYjjhbVLzhzbP2CM7rWzz+pYd08o8rVyjsCPBjEkbpHxFGuUb23xJwAQaLi
iey2Ljqpi7XioRDKq7YD/dNuJRgtrJ76hZD0pA/AyAEwwjoF1iuIK8pgBAbF
Jlip3Kp98FOT+mH+ra5+ED0IIwRTJwQTfPkt/cuugrPDHR38YZhVQyqi/saK
KWv0IU6OqQ2uMZhZpDHGRngkYi2bN2DxVjhElNB8hYkTDVBC/9UypozQBGHi
WxvCCaNdzJkACvPkOzRAVTJ2Jdyi6RRMn6AexKAdQUUABe+uF7xTnCbg1WzM
l7eYC3p22kfVe+xrYsxFxQQSc0kdAVAtrzjlRuepJWtwMkWpeThJ+f1AHMTN
UUr5HaFyua1vpe83P7V/63/Tq/iy055fzt3XoOCsdQ0Kzpxd/4upw+vm821b
J88/DWvmGfVDjbyjC9TON4q0B9E5Z9tUiioJHIEN4B/fAmQFdyPaKSa1sz9o
p7UG7ZSFoCofQRRatVYQSbWYHaI2m/ZBbez7VvUe90Z1AKoUQBWGvgKqiALR
Q2nQTpqDLGin7kbtRLFUDmGlgjToq9NN+ufOtxjGBDep1z1daaH2Q8WI2R6M
QbGhDCM8dOdFi8eDLAFjVt1KfVi3EqqJUaxbSeub4Cgz9yphlg2jJlJaf01H
ac6EuLIbSuvhevDN07Nav0QlQ78EeunoiyHKJjGUDWeJOrTO2CkgltaxCNfC
L1htPOkd9ZNA5kRt9QWVhaav822X1PoqqK2L1PxJZ9JkMH9KlYOJSsU9sWD6
IuXyO0Kkslve2L9b/9BectUVzyILTzQoNHtX/S+mr6xXYMrUevl8BwHC2tXO
/bdnndwjfqyTZ/QXNT4fSlC2g6JsCvmYA6d/J/TcGHsaUPYSRBoFhiGpy7ro
dGYDPRBmtuKa34Qvrr/QFLZkZYcm0z+SJ2o0/o3q/c8r1THqJSnFyO5oQ6wR
FWYfYA7R71LEdL3joRtCCqxONzH92/Gm7TsLsDGgEV+ceVeDqB9Ockm8yQrc
OwljRrCUlkBbQksC/9ZohdE9NsYg0LKIDTpC2EYqgrdTtXmMANZpdUzrtDKM
tH5m6GPXSvzPWC/HL0StceccccxHYDjo0F4iCRBwSJY2QhmwNVNr2OFAiIcJ
dlRtKCeS/Lnjktpcc8otLjvlpgA676B02QtsZc3DyUqlfQnKT7tiQa1FgFr7
CHbyhb3k6rteXy266Fl4/pEGBf221isweXHd/L4TaucZBaAb2b527pFSzdx/
/1wzz/DPq9kGIei2iZjL1aT7uugtWCYEUxHSfV1MPOCNazbRXlLNVoxgDR8I
DwiTiOizNwbD32jyB1LPx1oPwRum/rH0K+ANrRrBG7IMNZC1t66ZSw+EVhZE
GnzVAT8wzFkoN+6RcQOK0GatQ9gQpjX2AeYwk0S6lzne5ut4y7QpbCNtCsOE
I54vloFmaU1hnxtc+iW8Cg344DnnvdaNYcJIcA33qStWesbKBffzRdyJ41fE
rLKxVlTCWvkZOw5Q2YFqaAE+GrZNET9/FMMecrM34K4r4K7tdZfUEnDX/JJT
bnIB/LQzGBymgjlNUirsjpfL74yWy20Lk8tsfCuVXvvEq+jSW15FFp3z/HLO
QVB2G+rl950HmAPsjRgMuEOFV7dmjmHfVM3RM28tW3ei8LZQ8E3W2xKmAPDO
wOtVd1KxiCYVC+70d3Rz+vPpHhs8VgvWdopziT6YbpgWTIIA7r2hnSWaD4sQ
xHPDIlVOWrhAjcdTCxaeP7Wtn3GVp9vXDvi6Af/c7jpEZ+SPVmZXQ+U9muPi
qGQ9TwSZmCkbQ/ObCnjOmCnxBmQ2YpNp+Ij/2tjG6mQYaE5kjU98KtgSlXdS
DcPqvLktgDW3MQss9MLUtGyMQH8QkczRqSGT9cJwdJJa+XHavogOH44ztluh
a0U0wy3m08AfK9BeHJ1oMVBJdANktgNktrriklArNrvolH1IJJomVz+Uovyy
L1H5eXccRA+R8vebg6VS/q/sRZc/8vpqyQ3PwgvPQPSwr36BKWvr5B09t1bu
kWNr5/q7d+1cw5pUzzW4crVs/UpXz9EVNWOW1rbWm0Rw5urSe0vcNpDwPbDE
oaSG4s81Y4y7ZsynaUbMnjdbwLIZcJDefmEk54/FT2XcW1IAk5n/R0ogGi5z
gal8TH0zrhmtAwldMdpKUAC2v6HKba6pcuurqvzHVRWoTP6OAjMT84y/Azkw
5CnxfXgzHsm2YAANwMRCnQOA6Q3AbAzqkoHSlnlHntCws42aZyzUYvIb/cEZ
rENrvgUo+dgk78rbzbryxMZoLNkJLTs1LLs3MFrBb0J9ue62qYND6NDCYT9k
DTIIUdmeOYcYfmA1odEs2q7KSne03IGBGTrj7a+jYwj6ElDZDPRl4/MZsnQ6
Xa59JFWpciBZBlst/7gjRi6zJVwute69/esVL+1Flz7w/GrRNc8v551sUHDG
jrqfj19eO8/I6bVyDhteI+eQTjVz/OlVJUevX3/P1gN1Zv5fbF0RlbYNFJaT
qM7Uujx6bIh+0219tFblFYJcOJMoPBt2Tl8bdCZabTR5pPzHU7SYxgfdSdK0
mEDBjltszBQ9Rgx0M82WEGxSlVnGGI7oKhM1JoGn3OqKCh4O/Uzgek2H6yeh
ympDBK4vaO8oVg8BrgrAFXsMfCa9Jw5wc/Cy0M2HR6dSKOTWT9iNdXujwUTV
9M+BBLe2Mt5PuIQHLJ9uLUPcHaW15axmnHK38oywsgK1Jx9I5e0mouYUR9ax
4Ik4RYOIeZfmC2iy1y5UjEjNluXw4FBc0h/XqOakNt0JNj1DrnsUNSfY9YAk
pdKeeOmHbVFy6fWh9mIr39m/Xv7c66uldz2LLLgAIXIghMebIGBZWCvXsAk1
cw3pXy37wFbVPuvZsGrWbr9Vztbt2yo5uheoYOtHbPs6Eae5uvfaRFpSHvTY
EBvWnZWTAKfOzmIiZnV0FqZKDOpzfjhpBiAVBFSfvAiJr8kfaT2QJ4ZRbXGI
agk9k/qkJh2wddsQxXhovqXtd0GHAihbAjibX1LlZvBqcYn+GXQruOYExBSo
nwApb4BkQJWFJmfMAWCGqcnUDyT2xMIUPng7FtGZdSoaenQ/OUq1LiiIbdGo
YjYF3T/eAIn1go130zzMSytMpe5jpNStCr1w1d1R+oF6oFjAwo4Kt4YoZtvx
rWATxADWBNHNH5sgoqgW9Qtl5W7WD8PtO4oJfaOONylKW1x2SYhQR1CG0uBE
ulzrCKA0MEWuvD9RrrArViqzKVIqvipYKrr8DXiejz0LL7gOYfapevkn7a2T
b9za2nlHzqqRc+iI6p8N7F4tW6/mVbN096yStQfY+J7Fq9l6Zq1vq+9PATqR
KlJsl1nUd2vsJdD/70ANxHbfEJMKEXcGqAZnZ2rjyUHoirQYU6RR7orUT1Ck
vFyOL19WLkdPj2ej8ckHCRlDd+fTFP5gMYyr0LbMynMVightelEFcsPXFylq
GVplEa2ooUWkUnfUgyQ0S2lgRacEnWZMUmEo12jCW7UJtmjPDCY5Xt6up41c
WACVLaswNGKMEcDKtwChzgOg2rKybi0RoZgPYmtVhJa9aoZmDN6yh54rep/o
eZK9Ccz7JO16bAgK4zZSced6FDuy4TkIOiezZgyuQ3FADBNjaOjwTDreAISC
rW960al4n3MqDU9kyHWOpss1D6fKVcHW/7YnQfpxazR4nmHS1yvfAzpfeBZZ
dK/Bl7Mv1vti6tG6+SaArR+zvFaevydXzzH4zyrZenapmq1H09+zdKv+W7au
JarYugE6fdkKPA7PweOPJBz9a0/880HbY6OAVEkg2nRc9YTrgSA4J5bMCM+v
9UwQHBPxQUUlqkGTwZO3+2BZdAwryyI8xYS2Oe9IlaiAzJwG4476UUNmcw2Z
uKqg8QVbHguUXqEoReOPShnh31MLmDx0iJZmjWQvSGYBMww+rJm80cR3amMw
+NiSgB2lGBMiPTH/mpkeHb7XvaGQt5HxrtJFrKsUgxuLPSp8QQ0gkHaRgZUX
96hwz5Rbe3Rh8Udh+xH2mSBSeTMZaSoFlPIxPa03BN5uF3DlWsFjab0hmkfK
LD3aO9SjGCd1uIkRvEv2DnIqniedSp2jGXLtw2lyjUOoR5OkCjvi5G83REol
1oR4FV32BrzRxw2/nHujXsFpQXXzTwys+/m4zbXz/LOwZq5hY6t/1q9n1Wzd
UI/WrJK1G8ZJn/0E3ugailJf8jFPZfCT/EFqt0cfSAiBt57Qf2sM7jvNwJ1a
FKkxqqBIKVBz0eQ4SyFhvi8THUrXXuSj7cmsJU3DqBa/CxjV1aeVkf/KqEJb
XmFGnqnPxvBqdF6F6JJ+bnye/n1Tk1pFbxV/Dv4S1Nt60YY3wfIuaLEJnqhU
8K0xP+EDvjbysvFcmn7iQxBt2TSwFV4z64T2ZU2wqFJXMA8VQh+b1eIfTD9B
iEQXpVCdWsW4ReItrSvjD1nLkIq51FlC67N5iB4bEHqu04boKVJFa4/1QEz5
cVvX5TaN6JtedMlep5xK3WOaPiWxU4VdCXLZzTHSN+vC7SVWffD6avGLhoXn
3q//xfQr9fJPPlU3v+/+Op+PXVMz70jQp4P6VcnWu0WVLF1r/Z6VxE056tu6
2lYbUDpy4pGEkxMOJbwGksUM3xOXPHB7XHqfzbFOCO1dWH1FeVugFN0yMcWU
iSoVBmby0tEJ9MLNMOX+qNHKI0xFiObQdakYKOm61AOxCZQgKPU+9wm0stiK
OwD4e5EqAx/j7xvyzFZea9qXedM+Wn8yq/OKpNAcmErDnBT2bM/W11ORuQ1s
xVweSeDKZzUGsoy8W78d69Idz9QrRuG8xrieraoyb01iAzrilpkqhoY7rbPq
Hi1Zr2WtD5hbmMYUKltSar1YYJ7QWeX7gUIVQ/w/n5J0PIFrj7u8BuQCx9Sp
1DtOlWotUKrVAlPlX/YkSeW2xYNzGm0v7R/qVXz5W88i859AeH+7XoHJF+oW
mHiobr7xG2vl/Qec02FDqmUf0KbKZ31qV87a/bvK2bvkrAEKdRWF6gTaoFnb
93Dcet+jiffGByaEAb0TIShNw/XB/TbHunpujHFh0Io98hjEdqRw1ZpoWotJ
eUGjKrpGFQb6Pqd9Cqzrg3illli9bVSpHKklKFLRcrtFTVyhntcVKkLVO0gF
KZpge0H3CnhKoA1TsPhrUWHwFoshT1mmrJDQWi5EV5ixwqlvNrkvLvpCT4hs
rcN54eW47CtaGy8ajkvVtM1q+QwjBlr38CXao4PRFSINHU4yH8xGi9C8u8OV
FcdPC+1d4oqStWxFCapunh81NAJup95qZ75hgbd3TWHmEOGKxbv+j6i3iudG
8qXgsTa+ANr1NNGuSu0j6RBLpcm/7k2Wy29PlL/fHCt9tyHSXnrNR6/iS182
KDwbtOuUK3XzTz4GEf+2Op+PWVAz9/BRNXIO7lo9R3/PKjn6lPkte49clW29
2aZiBtfC//geSTzjezjhDcgqdszB+BTwAzKG7Yl3DtwW58L9FZgNxFyLBtfV
FK5avXKBoFp14+9hwqrgAuAzDxUiqN4mrGJYLqbsOxAXoMMN0M2YFiX5p5YW
wZMVUJUgdF0dQbbv3EEregX4M1HP4u9FN4SX2AeyvjI+HGUCLKZYcU2BDDwU
96YZVgGyvuYOoLKwzQ8wAe9pOGl3/2Rf8yl9m5e4P43NyGhDUYBNd8yGGTFr
2N9yh+08Zrt8R7D1EkNNKyZQR7VmKyYwcmw8K0R1TPqgxf5YcCa4pWqW5gFa
XKZq1n6KqlnEbOX9qcqPO5OUctsSpLKbYuzf+Yd5lVr5puFX8x/VLzj9Wr38
U8AjmLi7dr5xy2rlGYFZqr61cg1tXD3X0Ao1PhuYu6JtuG0Fxex4qmLr+h5N
3gxe0wOgXPjYg/FJoGLTcTP+qP3xrsG74tgushhi1kTPoJ3JaW3EVKyDqVhZ
ULFZCWyL6ZOUvKSBeqzfI73q5Oa1uqdM3fRrU0v9yqCaBWELr7P4Yn9XRocv
dxO4vuUOLXcRxJZ8YZRHy2bx0hVCF7PFQgFfhy/tcSNdSYvCwTGMJL3M2NPM
JjYybbtmLZKGlWh8F52wlyuQjvP9K3Iz22LONe4othSK5wew2ReLGH8sE5Zq
YEvFjGDVZ8JbYnZYGxLVuHiEnW9RBwE1ruMsRl5U4/4ekCb/vCtF/gE07g9b
Y6UyGyNA4773/HrJswZfzr5V/4tpZwG5AXU/H7+mdt5R02rlGj6kVs7hbWrl
/Kt6rZwjCtfMM9y2XERu4QnjDyeem3A48S244XGgbVNHByTgpmrXCEAuOl7E
v9kU46Z123BtKyZWM9e2pdznQbE5hlkaLWf1b9DlBSk3tyBTbcshK5/1IF9W
Y/5CkLXqZb6CzH2FHp8YKeEVLoZdkpibGmLodDKvrWypra2M0hJbbGzgk53g
860WyzH1i0BE1QsgpevMbJ8Z+ug4eLXdIRUN2+bRY8ZyBK+ojmJrrEXs8ilk
2uAEFmROiNps6nsygU96TWhfJhUVWsw2V7GGBR7DeaeiAH4bHM9QqoHmrbAH
NO8O6uB+vylK+sY/2Kv4speeheffb1Bo9kXALzi3vhvr5P1nTu3cI0bXyj2i
G3yuWzfPyCLVcv9DN/nbxlGl22ry0aQ9vocTH8O7jhwbaFS6AF8QJmVhP9Zd
ypVvBzZc28IiU2Dt1xa3HmHHKJTZHb0+IKa1bul1K0SwuVbFfQUNvRqCiY4l
gM2K0IUjo9pX8HZF5DYTnIb2LI3wrwMvL+luIwG5vBdUNg288M50bPnASUQs
GWlzDNupof7bWu1mtvcNnd4NrG8A6wbarlUg6Ke60833SPD1VKjZ+TJ2vjoc
fYf+DMFthb0of4ABaTUvVG0KGhjL50QTsRCNiArPry2rHzS96JJ8zjll6QzN
KPxGfIdk+YdtmFGIlr5dH2ovvvKNF+a9Cs+/3qCQ3wnwe8HfHbu4dq6R4+vk
Gdm9dq5RDcCP+LpWrhHs0gXbWPIxe7be11W/SUeTLoEG/gAaOH7MAa6BE2we
CGIIqVCyqBtQT2CTGtfE7VboRTuugbUBKncNDI7DRIvFGzg1w5wIu9n3dcOw
kOlqYXYcLrg7DgTAWQiA86kgQVW2n8E/0RcC2hy6cTeC58XQVaF1i253cO1T
D6EPUAQ0mcl5RZ8Mm5un8gUUpbUJLn21KroRYXRHM65WFfqx+KiFuVWe+xBi
B4x56xqikLfKC1dbuPWdiojGusT2R6zvtILWd4pBHEaHdHt7kg7q/XSPMPIP
g/O2fPkLWekURhYcYb2dKKfhtA2QWC4cMEBRtgJAN2dFMe8gp9zweLpcFdRy
xT0pcvkdiXK5rRjEhdtLrMaSw3PPIovuNCw871yDQjP31ss/aWlt2orVs06u
Udh3Wrx+zhHsggcG6JztJh5O2Od7JP7puMD4KHAnkiHoBZ2c4Byp62Q2WpuX
eEloAFHy6NtjEI05oObz6TSgyaUgu4mNLsVkQSn/Y7FrgCtnK/eCg9pQY/jv
LgWFdWX4CJD2Oq0qDU+piucpgPhpCnUN3kHu8G4hwLuT0JwgDhLxsbOB+iAR
eUYKb+ve/Zn6CtsWfIUt9tB8YhqEZCTEvmrTGkixeX8z8zRw2btwi8ZnVgkK
cbkRLtTGXXZiyyHtrU4WbimgOOdrIdG+UIzrra7oOjedHUp28JHcGm93RRmh
3ND2tb5CChZSM6a47eA61zqcLlcOSFUq7sagL07Gwm/JtcFeRZe9sn+19CHg
/JJn4bkH6hectqpO3jETa+UZ3atOrpF2cD9K1s45kt0WYRtDlXbh4Xvi5wLO
r4Lv8RG0AyrtNIiTLZU2vtCNRnHjwjgcASQ4566z6HtkqrS1LQqC0uYYd1Pe
JgcEHQ9MUohus6XTESQobeIw4+oNmSptRLbS4KSq1D8Br5MU7V5mpJu8EjPK
O992R7p55Amfho884QCZpsi/MK0IZhs0P7WSdrNxeoBNqAjDA7k1JY7+NOty
YO2LbgMEYkN31Ux7F7Fbh++nFe8oMneKTT5GRwnQy0bdR3Z5Mf8Ew6qmc2hO
jtTlxP5FPGaMihDmtAuHeNlwUBkK+ifoZf+2L1n+eWeC/P1mrCCH2r9e8dZe
dNljr6+WXPUsMv9wg0Kz1kGUOL1u3nF96+QZJdXMPeqbujmG4wTdQhHpOTv7
Hko4CIbn+bhDTJsfBA/7gIU2z0LSRzlJ4QbHoXEsurUB4lQ74R4GD1OBo5iu
xz+16w8fnuhzc7jIcS5kjQ3O9b9kNGQWHsKhEjQTXc6QXve4qtQ5Tj/jn5EB
qOM56t0Qf4n29GiIN6H+k3NZb4hzxudlzFdM6Eux2SYT8xiDsKacZKAhokTd
Dno1i9hRbgF48wK7wFfizljxWp+qtFsik84ztqDSiHuLpWZ81w23+23ZkFZL
vuyIl094l+QImpMmCgMTS7RvF90Yl4zRZb1jGXLNQ2ly1YMp8q/7EuWfdsRK
34IbU2zle/vXy5+CK4N9uzhCs6VegSlzwJUZUudzX586n//zbe0co3Dij27z
t/1DGyWKDd0RsRi0+/XxhxOCQYgJgHvU8IbIkml4G4V+LuLNYLKkOxwG3pPw
B/dkAP5olEUNbytJztf+X7eYGncmsfGOR0ZnHbHGKydmX6aRMbC0hH8N5qGf
1pV9vRMU/rWPwesofH2MUqGeBRVIItCo+LU6YabTFebRsReU+myyQpvmmWak
AZa4mzMaWK1O5t58v636omu2nJW5OPk0F4dP9NDJMeOla3z1LuL6MHN3QOeL
7cK/W9/KxLa1YqMcnyGzunoFszvog6ETjP5OV9bk1nKReenTB7rTZTQzAig0
FKoQpJIkd8MTNE1Y41CqXCUgSfpld5xcbnOEVGLNByDDc6+vl90GX+dMwy/n
7qz/xYzF9QtMG1W/wJTW9fJNLF83z2RsDZ4vEiFnbyBBIMSmYAASY8YEYi0m
ntxjN2p/AiHC30YDkFcbvsSJcCyJtmGdz005C/B6ItbNJmu3jrDl51aLIUdY
mAG+JWgIzZzS+iIzBygWXuq2dHfcXHnqyXtSX0cy+Tp1GfxrAfxr4usI/bp2
ZlQIoh4Vp4FYLv/kYNt9fbBtKPWB+CiHxFbzY5uqvu+d1R8ZDSwHjfgUpbhB
/AhdaoXe9pygJAMNBJNAd5t6IBPA7eEOEZ9yw3uehFbkypZXDyEHsI0OHSH8
ye6tyInaBSK8OUlso6P4d9t2xRqUHuuH3eYa8fX1BqUjvNEzWa68L176aUeU
/M36YODAS3vR5ffACToPMS1O7K6q/8VM3/pfTO9Sv+DM3+sXmpmtsm0F295v
G00J8JvvkcSl8LoNliAULEHimANoCRJESyAS4GuSCyMFqy00sMVV9m3RuGHs
As+EN7v4zKIkMGxL43bAaiOu++48MjBuy68PW/ZnBSDUrYwDWl3SzAF0Wyj+
BWe/qEYALZxFAtQ7TvU+Ah4JUAMIUP0I/WwmA/5/dJ0wMMCfhTzD34m/H4nQ
/jrtS7H9/N8n7oTxEVIgGveWFImUyR9Ux/RgjQjYUyPue+Vtep3WGhf98pZn
rSmfL/k9k2RFBGNjfjbDFAmpzwcbNrH/5kYFHPhE3wi/AU0BvyJqjkVHvtin
h3daYayITjTCxLDeS2sreUIVB6HCTVoxanTeJXvyDqgjtE/v94AEucKuGKnM
5jDpm3Vv7CVWPfQquuRywyILDjYo5LeuQUG/GQ2/9OvVsJBfNfgad/3ONbDg
r0nHEk5AHECancYEJqT8c4AWiXgcAL6QyIJixAz0J4yOJToILZsW9mLpFnOV
s4RFcdMFFkz+vzIDNrp743NaB0XoCGZA5mZATLX7iBRg6r+4jn4x3K1nNgEM
+dUPq0q1w/RzpkxgySD0jpB16IyBY0acND56+mUmA373aUGB9/7zKim7j0Bm
RFB835HNNj4zgmlsQEnAene/cJ9OEdqp0V3l/X68jXoqvZeA5H2QBGwBJm37
y27o+zeTILu4rcq86Pr4B3rhMeaPVvDNh0LDPyeAuQWwF97eBU4EOg920gL4
kW9B1Yv+YpNKB1bwt5+mQUFdraUax1Ji5XLbIqQyG99Lpdc9ARJc8/pq0dGG
X87BdSCz4NW3YaHZNTy/8MPNx+xiAtsoygBsSl03UeihGuNeaxIZ8BV5FrrB
kdoBVEDIAlzqi2VgkrUX1yXOCDH2UGvxgGlfsvXq3Hxkda5mCWgNmWLNzQqc
N1OARgBZEP4QyLhHwIL/o4PfQ1WqHoLfq1Q75M4D/Baza4S/D4MRoCObzmLW
IGfmbhEhwSPSW+iBNMCBRkYEmV3hoPAN/1Pphn8ssbZbyWYoCxhnCdmoP79X
FLNCo8VRAvCOMFDgHEAjAPj/tw3AOTLb7XhSuEQNlf9K+HmYT0Xsi7jX+gn5
pja229GwqU3EPRpG3uhC2l9v4Yi/C5xb2ipQ9xj6QKlKtcAk5dd98XJ58IHK
bQ2Wcby/tP8tr+LLTzQsMncL4N0PlH7/BgVn12pQeBZu/ZxtgP0o36MJvBcr
buzB+NQxRPEnuPQEkEnxY5EKy4Joa3uwmiuqHhQ/lit4zdVtESTCfrK+DNJ6
Y/RzC8VfgKKeVaGJKkAUiaFw80yVP6tGnUEGAPiz676POf6tdRT+D2Acfisl
wCGCf/i7Kods5fBrk0UwWQNSGjhDfy9ag+aXjAM1HViAkOms4iMyVkt34Ot3
XYiXH3jj5QeT+OUHoabLD75wp8IGWsJF6JEW8P3udCBjYEH0CljW55XZKmR2
Zaaw6bSS3ghuWmcpbjpFtmHzAf5aq0ZwbFHDiMDQqjheiIZZ84GdukLUCjS/
RBsPGp5Il2uT4cRk+Tdwg37aGSP/sD1ULrvltVxm41176TWnPYsu2g4R8Ryw
AAMbFvSrX78QWWXJtt7bRpKPubDFawtI5AF4jJHgOSaDFUiHt+wcjXQIoK0b
4Aextk9mBHbTaBhDsJ4b9SaazqzbtoOw27Cx2RhMpUZA3IFpCgbMRqCAbgSw
oUgsZ2P82VaYpMmcDjZuB/6jE0TtgAQ8CFSV3wPp5yqHjIww2wUwLzKJEljm
qCmr+WrTu9dpQpeXDayGIjEjqN0K8cJ0K8RrMsiDC5Kagl1oNjvE/VYI5hyJ
oTJngzYUIXaas8W/6LFjJwNvvcHOR7d90PqdpgId8liu8RT7yLDIhgYCM6Xw
O+lexm8Mq/ZwES32YBiaICezAQFUkForGbENtNe81RVqG+QzGXL94xAUHE5R
fgvAJQe4+iVc/mEbbrR6YP/W/5xXseW7PAsvWOD55dxBDb+c7dmg4MwCtfNN
Z2vhGRtyT1x8OfkCxEwfwVwm+B5JSBt7KME55kC8C03qyP0aG0iGlLKhONmd
y+0DukSafeC956wpks9IuNkJnNPFVhVt6+dr87Jg95183+jmQdx81f0u48R1
vZ1BzJa6mwiaG/pvvhE3D5QIVQLRaPweaPOk5CDEOGRtKgwOUxCrGF8yjLbL
bcXpttvW08LClSl8KTaOYfBrM7DxsNHk92TPDrb2N18Qod+bsDLKQAw0E/z2
MsPE0H7jxNBUNjGEqVQEM+9nFzdiY3kBiYFpVKOhEDotsfZgXluKMx3oPpEN
gsBCwxbKnWwdF7zRDnyD4CK+QTBY9Zn4joxMCxsEuZ9A3CacwoRDp9sW6h5j
22n2xCk/7oyQf9jxDozFI+nbDZfsxVftt3+1bBmEDcM8C8+XGhaeVdAz7zS2
Id02gnzMIy+7krIbopzn8FajZ5xKTAGlkQHKw/XPQaDHgQQzPbitwEy1ZiuQ
GSxg6LzWvdWdzAov0DvXHFgoAiVAptjH6vuSpcwDBqOtcNvT1Zm6UIb4uYkp
hUpb2cFifE7LBiRlxN2mY5nYCwMvPJAW8KHyQXAdld8P6gbEbDxI+cEUWCM/
G7Nca7OLhql6baAOOdLtjnFGmQYT4ECWs7hbhBoPdKW8wZXCyFq8R6AFu1YC
e6/wUHhEQfix2/pqCW48yJgSeP5LWes8bz7GrgiRH/wigUz5gf/BcD+YsKmV
3wRH1tTtjTfwA31y3vsoLkTEVYI+Y15TQAwwOA50qg43PSBHtM1hR5KUX/YB
P3ZHgvn4AGH1U+m7TVflkmsPScVWrrZ/vXysV9GljRsWWVIEeMK2gTN+lJ+2
8nrqTXAnQ8H3S5x1Jil9yrFE5wTgx5hAumzKxA/yGFjNxE5DbjpINL1O6EjW
J+0M+3+b8qXR04LJqABun5GFheJ8D6d1aFGC8mOQYDvMKyA6mMIM3kNvKDMw
G4K249/9KRt1qLLqDhV5HcxKaPK1iSKCGdH8K2pGiH/Fc0/iSJQ4YdJWGIvC
xzLPnZYzXr7CRvmV0fRiPbLHB1QPv3ylMVsyha4WuXwFTgFVGLcgqLT5MJ/V
5St8Mgpv3yEt+lfpdfG4y2cLuy5+/wt9b08uc7ezYEC07Xo/aHMm+GPQhqCR
InepBdLyGwYb2FaH/OCt7aRPFAxi6wVhanO/YLJeg/gZYsd6d+BH+5t0Y4+4
4aweWecYTxaG/rgzWCm3/bmM+/NLrTsuFVu1USq2ejK82kgl1n4jldpA91vb
/qZxRvvVt1IPw4O/Wn4lJXbp5ZTUueeSM6adSHJB7OECL4tEaGB66WRZHo0h
vPCG5sMceAvmIwtbUvvHsig61zc7VG2EC1FxVximFEEPYGZFIktqX4i7jsUl
taWosiBBt2A9zPtEeRZW9LCsog6x6mauuLl7VSToprYjCyFFcVX5DWzHbwfw
T4IdEYIQCz/LEIC4zQ3q4660f0kYdx3wmE67/qDfSMOHs8ndI5QguDUamzGx
iGuewhJJgh5LdwhxzQT51BQWb8xbwm6YEJfCYyjObpawXNVsNCI2ThLjSACd
eeWNSjiijW9lECNJp9XRbjfRNZ8TShZma+uCkCh92bwrRuT6srUM2SeI3ihQ
83ACxCHRcoU9IRCVv5S/33pbLr3htFx87Xa5xFo/pcS6TnJJ/7LexdbTXcy2
4eRj0c98dzxYvOZG2i0gStjSK8lJIIj0RReTnWBPXPwdo1YxhCN76dJpfApi
RzbpdsTsZOkbMPJom64weGwGdGkMdMGVUN588xrbbEXogo4WLpcoo1eohwgr
UVlw5raMTdwmxDNXVm4XJ4xdqNDxDNWnQxCBLqUpXX4NUJVf9tPXr0idAxbu
F8vpiuEJp43V9KIYquAztBdGbnl5m9uWQkKEwgYYR7N7lrHaPdU4wNgIC32M
OlhFwgmwLmwCbOi/TIBZXqegMwftAkbxmMDi97GQTK77DA1aIG0E4aE+grCG
jSCIV7OOZ1ezYgXAwBh2rxsOgeHWBlLtHf1G79juyVYY0WVwuDwzA3wK3BSM
C84TlaqBscCaMIjeXytlt96Tv9l4Ti6xbpdcnFzp1Q2YU96r1IapImO+6rL6
evIReNhX8NBxaFYWX05xLryY7MKW9qmsKWushQeGsuWVvJ7/Ylc8kCdglUkz
FziWTdnWYJ/xb0iCUuE74AhTnlOmlDAxxSJYt17mKpgX1u6kVTeY82V2uniw
XuMImpDqh9HJypQlPrpRQYZU2qcqFffSz4QxAQJjLDwxnvflbLEaUs9s3hef
03Le97lxaHI03UJL6PKJoTMy77tYv8eIt38Ptxo6O0j5MkMcOjNxBsGOpgLr
f9jqod16hh9NszucONhbSHLHaG3KEZdMHN3xM7XG8mtuu6+LYdfcsvsQF9Ow
HuMyWgp/p087DDAsqKMLj5tcSAeFmUrurql5OE6pejBC/m3/O+WnXQ8Zb/aA
GzZXKrGuJ1gdvAaPrTG2DSMfPyvsdyF+CRjEOxCyRYCpSYawJX3RpRQPF4gF
ouiZp3QbyS0OVkbQ0mCyq68YsfgLlsZtFVh+zdJoq2zgSTGZj+uyyOZtsgn5
FcnkyH8Lm5D/ekbXGgmu2b9aGm2djR7EoMMjWhzkkOia1RNcM+uA3kYIREOV
QrqZqbSfkqfCHlX5eQ/9XHEfJZNIpKqfJBHtXSzyicHjKySiIcObqCf+0+Ax
2+SMmXbSi4btmV/o42+z2PgbXibNB4/hCNHN5sObmIeymjoGDpnv1uDDxxiG
8GXOmA9j979ndwv5TUtIsQVrB7ukRZsWYhwyt9kijfkyUkQc2h/M7/ERG1wL
rHVWkRZztgYBl4a3v0HtD18a7iB3IeAlLfFyzSNRwKMP8i97H8s/bLsgl1y/
F+zOfLm4fx+l5NpKcrGNbOEt49BXPcH4HAf+vIOYJh74kwZiIMYHRTL/fJK2
YMXXZIQM9ROWE/u08SmmrYHA0B/vD2kMTinunMMrHzD96eALnOmiXE4e4yrx
AUK4776szLhlB5SAHuQIlUaHwB6xlZD7aehfmZlj+42GL5WFFyGRYIUq7KUk
+mk3vHbB17sZoeDvfxEIhX4cstNMJkwvy+IwaSaj0Dz84QOlfBS6dyaj0IJF
AjbRqY1C+vjdDHa5Hp9PwskN0OjYH4fxKmnY3aLfdOR2U83pJKvBDXLR0VW6
QAUdMnG172n3Tfy/GNb78ub1o2wjP1+mwmfweK3evHiaD24gJGlhm+lreCYf
UBqG1X981H3AI7qKH5mFK9Hx2hoeB9U9lkAu3KsR+FH+/cBT+addl+VvN+1X
Sm9cKBX37y+V8P9NLrUWG9XpKj/bX9Q4lYB3twq8uocriHFKBeOUkgFiIcaJ
iiofkRz3R9FCoWR5f5ZlDORmmX7RLJO2p59vo8ZuRlznxDakO8QN6cOfMwul
E4yUsAf+66JK87oV9zzbvxGMB0FVdbcOQjlLbhEPL0D38IiRItyCb/txp62W
Nc1+g2/5Hb61aiD9bVZOn3lm20dYqtXMwvHj1871+sQlhZxikz5YzGyHuM1s
k9vEVhtvhEKfhE9Giff36A3yeS1nADXHjw2KkMZ4Zr2AT2JTcCW3JjBtIJAR
jZuuxZeS3a7ERlswnu2F68+3Fq7V74pEReK2AZZ3RGLRk+6DQxeQXrLiRa4v
TFTqHI2Rax4OkasefKFU3HNNKbfjkPzd5qVy6Y14E3oVpYS/h6/Nly15YyzL
ORys9Vlg2LsVV1MSQOFYmS9NbvxiTpQpyVqzgmdPoQfMZL5s4k0YfBWstiSO
79SeHkwqEg6WdSCxFLuBxY1l4kWY1vs26SpYar++0CnGSz7oTYkUayhSjKWs
Dd5foO735dJppfl+3Gztpmbrx52qUn4n0Kv8DhAZ+aNIsUrwX38VKFYtkP5G
jN8ovVjh6atPT5Fzn5An8KxGbM1T5Igi3Akw6aN+39oXqtV9a2RzPa5RWsVv
yIrRprDQYRnIGDaazR7OMswe5tXCKnG6dveTdLd2e0zmcVMmjJ5UtLxDAVst
sS0NfwhmBJFdVveN+5KLpmkyTGPYmiiiLgi7xA22Yrtlnwf0oix+g1/Ti+my
/TQNsOoei1VqHQlTqge+hKO/JZffeVz5Ycdqpey2YfJ3m2oopdZnaW3bQfd8
2YZSE1Zpzc20DStvpKIJi1p2JTVl8cVkzYSBa4V6aP65ZDJ6zxecit1CA7fT
HksxN2FtxUoYrJjhTgVhKbiD3RSJm98sd9YPtbBi5mtEzYsYRYrxDXfYeYAu
FoLV28qSmWiGbiLLTXggw+B5KMeYa1jR5Br+uIvxbIeq/LBdlcvBCz6TP4uE
qwj//xckHPyMykC4qsDdGodU8EdUGQI+UJ20+0EWtz+Vd3cZW7DtOW3ZtMv/
q5l2vrJhfiZ3ha3XLy1BLAzT5x7Z9U35DIOPlG20mc1wL4Rg04TZdptwn04F
bfrRzDi0adjqwPdAade6nzEOeg3eqTMOm5s7g+poMT+MDMB6mXfu02lfdtch
MK7TTSdos3QAS6rS4ATe0hzLrnV/I1cOuAsHf1r5ac9GOPixoFw94ZCz1q9/
mi16YnTLPmL1tdRzQLXgZVeSwZalgC1L4baM3gSZlQgtN3F2+ZV6KFhzYcnN
gPEATNtnZrXIHHv98cIkHOP4h12pSfPmOrvElfuWm3g/wa727MXTgohMNA2A
Xnc/0Y1dtBXhc92A8ZfoH/6s+YcCwXYgwYAb5bYhNxjXZPgnGf6L/PMuVa6w
W5Ur7VFlMGxy5f2qXOWAKlcPVOVaR1S57jFV5i1x0hlTeCb4jeKWKr5hTWwY
/dRU/Sh2J98kMlTJpuq/drsqTePZqqjMByu30Lsf+Z186LLNZfrZMGSsX/pI
B2iyU7qZjBy73cImXBzwk4Fm5Oqqd3S4HpcGYSKS2wK/M8arV7Q+aqTZ5hi1
h38UuXsZ/WJpsn7jNe2Xe8HXrrnsve677N3YZehNL6TBWSTL9U/EKXWOR0AI
/Q5ChwdKhX3nlJ/3bgc9O8VRMcDhqBCQs3WNHWwhlW0I+Zij2orrSVtXXkt9
BjSLBhGkLKZBGXEXF5xPMrAMNcQ4tqdzkIll1m5icd2EmdeviXuE8YWzsxNY
w8Mo49212o0BWo7Q7eoVTjLKsSyiBUP0tL9hy68vZEN3C1EqptwN8dgRkWc8
+MqC7AIpUH5xI8aShIRfu9BRJPxiRgwNUNltNgU+bkW6UbKVh9ePQLafGNnA
qMlg1OTfgGxVAlS52kEV/H5VrnPUOMhvP+PuQVoRrcNN62H+nuZh/qf6MD/2
7YI+J13tVpdfanfERX1ydJNvQOaL5FEv8wuPFli4kBYTa6YLOmzC/Qc/GrbK
o9HDRAgWg/HnLWP3H5hJZliAjN7jBn0BMr8snNy8NYYlP0g2GkjW5yG9Wr7z
7Qy51eU0kHkyeI/xcr0TUaCO3zuqBD5WKu6/5Ki4fzd8nu5dIaApvHJLFY+O
FTmWffzq66lXVl5LBjOWkriUFX8tzFgeYo5RZBMO04YovkWrpzXJRFfxP26U
p7MLmD/GQd3Rpjtk+L5uq6sPuloZs4LuxqytsDcOUYlul1YFdqtt6YmP30lW
ESxaft1VdAvJBHexvMldRHaVxddWIN33W212nXRW1u2XPZRwvwPhqqJ1g7cA
1s1tTtrOC8hBxjS+2bL957UB9MZZOiv9loyQyGDleAXZ8lLGTEZEyXZ81svH
14tPYrfhzGL3rJsIZzOPxxkYRxsxxPG4Hw0jQqc+6rvt1osb8s8nE9jyEWnz
DmeyD3dNlOHGdQxdyNiwxjh243qv+07QWBlym2vpIOgUEHwCHEK0XOf4R1DI
Tx2V9l8BPOxxVNg/C1jX0rtiwOeOMpvoEhjbYNqXVGv1rfQ9q24QqxYDj5+6
6BLGaSncqvFAjfNuFrsqxZdVIXgtDKNjCxfSg9u2Vfp1I00/vSNfH5Xz5deN
sBtx+L1NPAWSef0rc9v2jfvNIzwhYhcSInVM5TAtGcITjAdUx6eS94IDqRgp
RxiXBT5uQS9N4902o7GrsIt6lcTYUa+SpEtqHDbuKGA7mzTuib2zjHegZiyH
Ui3XFDzWsiVE6uwOXuJtYJslUI8sI9PSJPyCvy8sbR2fREJ0myeQphzXkv80
CUlpl8V8xQ+7PIUxLodh7MJiCoksnr6bSppm+Y5/NK+ktQ7HLoppQ0jYYtLV
tHu6yawQko6T+E0UA4Br/R5htOYEaWWAG5kOgk2Vm1xMUryDYmTPU8EAkqeO
XwKAawH7gGdzlAr728LnwmDd2MINRrbs09fcTL264lpqKDxwEik4X8QoLcVs
3vISTwAtM+oJNHEovaHCXj3D2l6aErFldmNKI+s9qFY3ppD9FAgAnmnUysyf
yoJ8Z23azJvJSEbknDEjgk1OljwL1HimBWmWHDM4kcSF9OCGbQt8KLOFfIVb
EEQTJ9KsIgZwe0kARxMlQuIfqSb03hrMnM85g3mDR2biKPyftyDQizT1u4ex
xx+TVA5sQ5sWTLQ/v90VogN+d5N54A9dyr6MZny0CW8o5PdpcqqhSmc0cxtv
Ml1U5M61f7mgwJ9dUIAJSQh8NK4JG4dxBQi/NZP0qM8LJW0Q2AJBdkIMfOwi
tq3PA5e9+12n3OFmutzySqrc/HKS0uRCLCi3ULnBiecAjmvgSQY4Ku6bC8Do
APatqFx+N9tqYPuThmtNV11LDVh1jXRGxUK4lgrupBOMmwvtPJhhgW5FSKQ7
hVk1lBpvsx/IO2+FLg9zT/ofVll93ZV024uWX9+Jxpa0EraJlTOzI2msmtE7
CkppCRGDQTOvubQM3D5FNuZDumVDrKK1LNygEY5xupXZjGsXymzBv7S2cD/v
1PImCqddlYN6WZt39NYxe5hs0NZHWLtAh2w/vXbhnvvaBXaFLUkFs65eBzAP
G0Abzwgmba+MdUyvFtUtHLu+FkGB6cnBO419Irzt3ZeNnfM7bPh9Cmba7eW0
49ctUc6Vd+/rfWZ9wQL21WMlGPM23KFEvwyNBbYgt2VdVrzxvcXsELXxZGbk
hjylDiUP4TreypBbX0mTWl5OBq0dByAKU+xnXoI6vAEgOQgAmQ/k6+RdKaBY
o0oH2EQ5I12uOauvp9wBBzocvMlkeOaMJZRwLjByxPdl3iTN4BYlZg59cDRz
6Bgg73i3FYqVVNisIjoxjFvwyTsWxNWyeelKQn43iNnQuZXTRCNXzN3ImbfW
m+8H0ZxKocdK6xIxJU3QmcT4jRo5jO9+3AVoEHln4UiaeAcfvqPk28zIB69y
W93dS5ZLIQUCcC+JW2s1uigSUNv+w+xeC7bvgVxwDgIq+S/3R/NBdz7knvld
p81nBRMD4XZ9pLDzpMcGjXx0ZCK/4f6oceJU7wU61YuNidjka8W9Ex+ctKv+
J8uuejZ5YnlJBFo9tK5Id771QWPfer0/uM3SCNJqhmYPbyHE0Iaumn9KXcye
mEAB9v1xNU1qdSVZbnEpHgQdrihnX8Mh3Aa1fVipeniJ8tvB7hDalYbDY2O7
tkHU5LXe9jjj8MY7qW/haeNXXk9NAwY6F19OoSbvgtHk8aYXXtT+56Den0Vq
A+YLIoSLJPFg9NvOPmXy6OUmeejin1H6TnI3zlnFb98bKee2Zt/ibhNHkLEm
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
lp4BjHShztj5mBZTMLBFBSR6rtifwN+ehZHkbBTX5eYmTjjKHZvnRCo2cqei
+eo75qtyI2m+Mikzv9XMx3am3jL3K2PMRpItCKVOK6kZckOJTSdVrei4k2Y3
dToiGbPpZMwJRNyUGRmRiqq95GokZclVtvL0z0jMb/yBlPB/v4PvKQPf+/0m
VUIridkcUj7cJZCSNeT86/YsIZvqsJiM5RtOWpsuCjZuOGEL5n7QM6rY5D6S
Ve8JKT9qo7EaMf2E2ykX4qx5BDWTm+m9BYN3xJEdmmZSTmJbgcTbKRcK9zyh
mVzP7loll5q9oaV7MJek5RoMJQ8s6ct9rIhcbwZ8xsWmyE+Rm/xqs5ms4wtj
W9QhpAN7C13L2Hl1FAkuZX6jB+3CdnmNeeuyD3/pBH2WAVBNtvd6EAx+3WGp
+50fPQc9YLTsRw1l2cAX6i4IJF8ceOWMg0BSM5TYUI4Ph975Gm4w9cwq0Rw8
BzzuXwxlFmYoUdCYP8OFGbiDvq2JnXokGWLyYEuY7nJ6Y7zLiW+b0+5wMt9l
xjxZ7bLVK+43GHzaUH5B0Yv9J/jCKAyQTfqfqwXS9kwcQsC2MSyuW7OTkfPb
zVmRm9xn/WaDxk6p9FpiJtfYCiE7kZvwWql6wYt8zVmKLAam2glTkaXwc8B8
Sj/A7/lxO+uv2a2bTjLf9Hugzct9g5cbSU9TxWQe/rNYrCJjZIAyRuuZ2WIV
gaSkmXfSR+M9bLybVJhhJ/O1EGGie6jdicyWQmRKUtOcxP9h7b0DpK6u/v/5
zezSO4qAIGKJMWrsDbvAzixFsbcY9ckTNdFEjTEWBBXpIFhpUqXYsNGX3i2x
G03sIr0jfdmdmd85595z77n3cz+zS57vH7NLE4Gd1+d97rnnvN8UIQuQ4mwM
1rK8izRD52ySim7Kif2II2ND2ND+CxU4tPiHxSLSiX82syOBOQsY1gQVwGVP
bVSrSGqtVtH5AND5l6/3Q3G3seTP/1nU8S/fRMg87DEorEEwK5VgwqFSCiaS
+Zoeb2XhxD8d/kvgv0jv6ghmUudLIZYcrYAPFgxSx/UOfLh0i9SwG6xwJmVm
bLXSRaoQ0Kqz1mKEU+Cp3YRp/+e82WofCPeCcJITR80Yz99oPI9z8CwmMuuq
Qrat1s4jtXa2kdqpyWw9Cv4tOrQemUhHKW0Lv/4o+O9YS38FWnoc/G+Oh//l
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
tPpsXMcsxcbVpH6E4ssUxbnrR27L3vTi9vIbR2/fesOL27+4fuR2Jpil+Er6
WAPjFd9YiWlQm/O7l23OV6DtAeCLRvk6Ka7YnJaFJ7aurI9wKutX/60WtjDG
CqdURn4QTa9AKyQeEQ9V2HhYvuvlaFRUKCUV/gWu1lHjOLhHftl4NYhXhD2V
z246atKpAIZamAqfe80rRULcQI2l4RP1fz4Xl9dVxRgvFQAfagHm8bNQnDG+
f073brFP4CuuCMD4hDhqUuJIaz7CCtw6pMChmloAzCPjBuAB1VFh5BcOyg0e
hbLr/AaPUlWNICPO3bnKjiD9uBprOdqOrUQ2RQqsX6O9WZwtaGtbaRui2UOQ
bEEn27EVtjxRnr7aXOLkwjT71tyFLMeMLagOy5AeRXcIovFN94DW5ceJ5qDl
Cb6ZLxuyKQcKlb1uxNb9N4zavhUQBpS3PQXfjqJc6zHA9+MlG3Pb4FW+bGMu
u2xTLmfd8fO19BQKzpxJQX7zm0De2+FGjkNZ5LyBKS+3HhVBqggzztXgTZaT
RRMOU03INFWy89RHZhzJ7dxnnSIaL//R+V6H0JS40ccJochNIops1kHwq/L7
/4bpo11BvnBeINUiNDGud7hCTFNlrc/LTlU9RlTVI/XmNJsKqeQ3NL9/LtHU
Mi1Hxg8ZLJjuX5UoK2AB6XqAdHcEu2F3/BZ9r4g+3qR+jOFuaOFWQ2lPuDPm
TVyt9n1R4hPo/Ntsz0yw7ThrJojJPY5D6NSAQ2jM+VmQbXZGqutA9nuxNPIH
z4FM+6JQDweHpnqtVX7RgmzqjA3emAOhrgSy9107YusWOD9/qqmWZ+Ur6GOd
YxZtyr8zd03lqvlrc7sXrc9VAN05RBjjazTZaKDPWh3Ir2ADb5W3igI9QXuZ
jIgKtHJGaGR02u+E3ecfkwvoM0eukm3Y0yq+ESftO2EgX49ValxP4nx/CGel
y43VAdlcVWmOpeV9aOwkOBZeyzprm2gpJx05iW8aeAa6K5lvRabEI0NmxhfM
1taEcVxtzevUzZ9FpA97Bh5dFmWusQ8aZYQWyX2kLn4rid9KEcg3aIgZZAlx
AOSqdrMLXlDLNneMKyjZ/GpXst+8QjaCauQs4ApaCGKW51hXUGFwhA9+fOPE
uZKxQwq+FbF2xObs48qZTI+j5EoHbsqBPFd0HbJ5L0C8+drh2z6BM/IgkOfi
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
tMtAA6XmufTl7+ZKur1bmb7yvQMlV7+/F96C26F4X52+6eOPQdVf7Xjbp38A
gfr/EgmP9VoPlK3OfjJvTW7r/LW58oXrstklG+zW17JCHfUGOowvalfKwy5+
cJcmn/OrsQPHfimeG7HOr26cv/8N0XN/yV6rYflO/fXAyZzFPC0z+VIyyquH
zNQU1oQEfRX1uhDxQ6zdOOPeKab7VlWCtbwHPxHeDoFY3ONeE7RPVkYCbSXt
oy3thxfW8QjtTeUlONPeW1fqivaLpI5L2us/kuRx83qmUCc594mvgb8uJW/O
LOGCcrRvsPNrop0ep+bFIcpR1ZsNht8kouTNkXB8WRVv+QJyrhhnzlsNh0eC
4tswnkTIE7+2h/IjHcxjnVAzvhPqaQfphFq6NJfusiKbuWxlZfryFQdKuq3c
A++5bemr3vsJqvj309d8MAE+31Ry2XJkXCNequT814vW5d+Y/XPlqjk/Z3cD
5hVQqOcA8zzvlXhy/mtqqPMEm9wr4YzcwIHcLIPJWzMnLCRqcGZbcC+5Lbjr
hJwHgnL9VK/GVs79nGs5ZO4U55/6xXlCgN1OZ4XoC/JCbfWCR3ADNnJtW2wB
DeeoPnoTHVWIbG161NKfYJN+KTxhHq7OhYYnEetErbCMWwmvQZfh7nRqkZxE
bfBoosg9a+uJ86Q2NWXZvoiyR/BqrNiXbeqhJ02ob0i2zZZJULFbPGdxVjp9
qnoSBrVa6LWEmQ0Sj/JMT48Vpqcyn9u3Nq7a9DSX7rA4B0fxbKbL8sp0l2Xl
8P7ane66ckv68pXfl1y2YnnmsuUjM6VLrslcukAKtqa5+5QvKj55+/uKraC6
5fPWZLML12exOM+LVW1Fc0OiuYYN6HMNzpLkW9hYReZGk+tN6DXJ9NygTDPM
OqWsYf5vAblGf9Vrh1XZQE+IxM0G+Y699ck7BLTfVvPj+dyyXOXXny+CA963
c2z6Kvz/gjWV5aEM+1954V6E9UvqbeYMsTHWw12sC4YExLTVGhuxTqJao4ZK
rOsLrOvhFbcackHhFmzzDlmD7in8z2huLRWLtAoKo+gR5LrIZ9oMtsCf95J4
pK2PaXPDs9Rn0GKrz8g0SvSIJBKdqBPPM04Msi3iUZimdvRkdLYxWu16GRfE
+sxZcd4tuTRi3X5RNpNeUgHvqf3pzst2wWtjutPyrzOdli0E3J8FLb8y02Gh
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
svpVeb/n/9/70J/9X8hyrMg=\
\>", "ImageResolution" -> \
96.],ExpressionUUID->"b2fc9085-dff3-4763-9494-f96de94b9815"],

Cell["\<\
All slices along the z-axis (I think) displayed side by side. Very satisfying.\
\>", "Text",
 CellChangeTimes->{{3.912445631267643*^9, 3.912445647997089*^9}, {
  3.912447257273122*^9, 
  3.912447259910925*^9}},ExpressionUUID->"0523a527-9135-41ff-91cc-\
a27f8aea4859"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"Image3DSlices", "[", 
  RowBox[{"Image3D", "[", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{"maxCube", " ", "+", " ", "1"}], ")"}], " ", "/", " ", 
    RowBox[{"Max", "[", "maxCube", "]"}]}], "]"}], "]"}], "\n", 
 RowBox[{"Image3DSlices", "[", 
  RowBox[{"Image3D", "[", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{"minCube", " ", "+", " ", "1"}], ")"}], " ", "/", " ", 
    RowBox[{"Max", "[", "minCube", "]"}]}], "]"}], "]"}]}], "Code",
 CellChangeTimes->{{3.8963317489102383`*^9, 3.8963317547401857`*^9}, {
  3.896333381775753*^9, 3.8963334130694427`*^9}, {3.89633467388951*^9, 
  3.896334689438015*^9}, {3.896334841120194*^9, 3.896334848670566*^9}},
 CellLabel->"In[62]:=",ExpressionUUID->"d51e056e-190d-42a3-a07a-ca0d26fe9e42"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBbCBOamKOsVEOSJIfig15nG0NeQ7b
qnoK2QHZdrbni+1UPSfZrV61Csg/bLc99zZQ7LNdkgSbPVCN/YtKOfvVq7Ts
826b2ZOrD0STqw/EJ1cfSJxcfRB58vSB1JGrD6R+IPSB3EuuPlA4kasPEj/k
6QOlC3L1gdIjufpA+YBcfaD8BwAE1lwW
      "], {{0, 15.}, {15., 0}}, {0., 1.},
      ColorFunction->GrayLevel],
     BoxForm`ImageTag["Real32", ColorSpace -> Automatic, Interleaving -> None],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{15., 15.},
    PlotRange->{{0, 15.}, {0, 15.}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBbCBOamKOsVEOSJIfig15DtuqegrZ
GfI429meL7ZT9Zxkt3rVKiD/sN323NtAsc92SRJs9kA19i8q5exXr9Kyz7tt
BqbJ0QdUD6PJ0gfik6sPJE6+PiF7cvWB1JGrD6R+IPSB3EuuPlA4ka9vkh25
+kDpglx9oPRIrj5QPkDOF6ToA+U/AOUpWSs=
      "], {{0, 15.}, {15., 0}}, {0., 1.},
      
      ColorFunction->GrayLevel],
     BoxForm`ImageTag["Real32", ColorSpace -> Automatic, Interleaving -> None],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{15., 15.},
    PlotRange->{{0, 15.}, {0, 15.}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBbCBOamKOsVEOSJIfilU9hewMeZzt
bM8X26l6TrJbvWoVkH/YbnvubaDYZ7skCTZ7oBr7F5Vy9qtXadnn3TYD0yA+
qfqA6uH6SdX3xcYfrp9cfSBxcvVB/EuePpA6cvWB1A+EPpB7ydUHCidy9YHi
h1x9oHRBrj5QesSWTonRB8oH2PIHMfpA+Q8AxFpWPA==
      "], {{0, 15.}, {15., 0}}, {
      0., 1.},
      ColorFunction->GrayLevel],
     BoxForm`ImageTag["Real32", ColorSpace -> Automatic, Interleaving -> None],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{15., 15.},
    PlotRange->{{0, 15.}, {0, 15.}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBbCBOamKOsVEOSJIfig15nO1szxfb
qXpOslu9apWdIc9hu+25t4Fin+2SJNjsVT2F7F9UytmvXqVln3fbDEyD+CBx
UvQB7UHTT7y+Lzb+KPpJ0bc9NxpFP7n6QPLk6gOpI1cfSP1A6AO5l1x9oHAi
Vx8ofsjVB0oX+NINPn2g9Ig/veLWB8kHuPMJPn2g/AcAqr5bQg==
      
      "], {{0, 15.}, {15., 0}}, {0., 1.},
      ColorFunction->GrayLevel],
     BoxForm`ImageTag["Real32", ColorSpace -> Automatic, Interleaving -> None],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{15., 15.},
    PlotRange->{{0, 15.}, {0, 15.}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBbCBOamKOsVEOSJIfim3PF9upek6y
W71qlZ0hz2G77bm37WzPf7ZLkmCzV/UUsn9RKWe/epWWfd5tMzAN4oPEIfLE
6TPkccbQT6y+Lzb+GPqJ1bc9NxpDP7H6qualY+gnVx9IHbn6YOFFb30g95Kr
DxRO5OoDxQ8x8YhNHyhdEJN+sOkDpUdi0i12fZOIyi/Y9IHyHwCDIVxK
      
      "], {{0, 15.}, {15., 0}}, {0., 1.},
      ColorFunction->GrayLevel],
     BoxForm`ImageTag["Real32", ColorSpace -> Automatic, Interleaving -> None],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{15., 15.},
    PlotRange->{{0, 15.}, {0, 15.}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBbCBOamKOsVEOSJIfilU9J9mtXrXK
zpDnsN323Nt2tuc/2yVJsNmregrZv6iUs1+9Sss+77YZmAbxQeIgeZA6YvQZ
8jhj1U+Mvi82/lj1E6Nve240Vv3E6Kual45VPzH6bM8XY9VPrj6Yu+mtD+Re
cvWBwomUcEVPV6TEJ7I+ULogJR0h6wOlR1LSL7I+UD4gJd8g6wPlPwCPoFxQ

      "], {{0, 15.}, {15., 0}}, {0., 1.},
      ColorFunction->GrayLevel],
     BoxForm`ImageTag["Real32", ColorSpace -> Automatic, Interleaving -> None],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{15., 15.},
    PlotRange->{{0, 15.}, {0, 15.}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBbCBOamKOsVEOSJIfilevWmVnyHPY
bnvubTvb85/tkiTY7FU9hexfVMrZr16lZZ932wxMg/ggcZA8SB1IPSF9hjzO
ePXj0/fFxh+vfnz6tudG49WPT1/VvHS8+vHpsz1fjFc/Pn0MDA149dNbHyX+
pCR8KYlXStITJemYkvwDyn8AEhBaVQ==
      "], {{0, 15.}, {15., 0}}, {0., 1.},
      ColorFunction->GrayLevel],
     BoxForm`ImageTag["Real32", ColorSpace -> Automatic, Interleaving -> None],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{15., 15.},
    PlotRange->{{0, 15.}, {0, 15.}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBbCBOamKOsVEOSJIfig15Dtttz71t
Z3v+s12SBJu9qqeQ/YtKOfvVq7Ts826bgWkQHyQOkgepA6knpM+Qxxmvfnz6
vtj449WPT9/23Gi8+vHpq5qXjlc/Pn2254vx6senj4GhAa9+fPqSJNoo0k+J
uykJL0riiZL0QUm6pCQ/4NMHALCnV9k=
      "], {{0, 15.}, {15., 0}}, {0., 1.},
      ColorFunction->GrayLevel],
     BoxForm`ImageTag["Real32", ColorSpace -> Automatic, Interleaving -> None],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{15., 15.},
    PlotRange->{{0, 15.}, {0, 15.}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBbCBOamKOsVEOSJIfirfn3razPf/Z
LkmCzV7VU8j+RaWc/epVWvZ5t83ANIgPEgfJg9SB1BvyHLZbvWoVTn2GPM4E
9ePS98XGn6B+XPq250YT1I9LX9W8dIL6cemzPV9MUD8ufQwMDQT147OXlvrx
hTMhf+OLX0LhjS9dEYpnfOmZUPoCpUtC+nGlK1B+IKQfV3oGABIQWlU=
      
      "], {{0, 15.}, {15., 0}}, {0., 1.},
      ColorFunction->GrayLevel],
     BoxForm`ImageTag["Real32", ColorSpace -> Automatic, Interleaving -> None],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{15., 15.},
    PlotRange->{{0, 15.}, {0, 15.}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBbCBOamKOsVEOSJIfim3Pf7ZLkmCz
V/UUsn9RKWe/epWWfd5tMzAN4oPEQfIgddtzb9sZ8hy2W71qlZ2q5ySs+gx5
nInUj6nvi40/Ufqx6dueG02Ufmz6qualE6Ufmz7b88VE6cdlLzH6cfmX1vpx
xS8x+nGlK2LCHRRPxOjH5l9Q+iBGP7ZwAqVLYvRji19QfiBGP7Z0BQCPoFxQ

      "], {{0, 15.}, {15., 0}}, {0., 1.},
      ColorFunction->GrayLevel],
     BoxForm`ImageTag["Real32", ColorSpace -> Automatic, Interleaving -> None],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{15., 15.},
    PlotRange->{{0, 15.}, {0, 15.}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBbCBOamKOsVEOSJIfipMk2OxVPYXs
X1TK2a9epWWfd9sMTIP4IHGQvO35z3bbc2/bGfIctlu9apWdquckO9vzxXbo
+gx5nInWj67vi40/0frR9W3PjSZaP7q+qnnpROvHZi+x+rH5l1j92MKZHvpB
7iZXPyi8yNUPiidi9aPbC0ofxOrHDK9JdsTqRw9nSH4gTj96/AAAgyFcSg==

      "], {{0, 15.}, {15., 0}}, {0., 1.},
      ColorFunction->GrayLevel],
     BoxForm`ImageTag["Real32", ColorSpace -> Automatic, Interleaving -> None],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{15., 15.},
    PlotRange->{{0, 15.}, {0, 15.}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBbCBOamKOsVEOSJIfilU9hexfVMrZ
r16lZZ932wxMg/gg8SQJNnvb85/ttufetjPkOWy3etUqO1XPSXa254uBfGc7
ZH1APkn6kfV9sfEnST+yvu250STpR7eXFP3o/iVFP3o4k6IfRA+EfpC7ydUP
Ci9y9YPiiVz9oPRBin5ke0HpkhT9qP51tiNFP3I4AwCqvltC
      
      "], {{0, 15.}, {15., 0}}, {0., 1.},
      ColorFunction->GrayLevel],
     BoxForm`ImageTag["Real32", ColorSpace -> Automatic, Interleaving -> None],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{15., 15.},
    PlotRange->{{0, 15.}, {0, 15.}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBbCBOamKOsVEOSJIfil9UytmvXqVl
n3fbDEyD+KqeQvZJEmz2tuc/223PvW1nyHPYbvWqVXaqnpPsbM8XA/nOQLaQ
HUwfkE+yfpi+Lzb+JOtHtpdU/cj+JV2/kD25+kF8cvWD6IHQD3I3ufpB4UW+
/kl25OoHpQ9y9YPSJan6YfaC8gOp+mH+BQDEWlY8
      "], {{0, 15.}, {15., 0}}, {0., 
      1.},
      ColorFunction->GrayLevel],
     BoxForm`ImageTag["Real32", ColorSpace -> Automatic, Interleaving -> None],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{15., 15.},
    PlotRange->{{0, 15.}, {0, 15.}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBbCBOamKOsVEOSJIfilev0rLPu21m
D6JfVMrZq3oK2SdJsNnbnv9stz33tp0hz2G71atW2al6TrKzPV8M5DsD2UIg
cVuQPiCfLP0we8nRD1JHrn6QPLn6QeLk6gfxydUPogdCP8jd5OoHhRe5+iHx
RJ5+UPogVz8kXZOnH5QfyNEPogHlKVkr
      "], {{0, 15.}, {15., 0}}, {0., 1.},
      ColorFunction->GrayLevel],
     BoxForm`ImageTag["Real32", ColorSpace -> Automatic, Interleaving -> None],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{15., 15.},
    PlotRange->{{0, 15.}, {0, 15.}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBbCBOamKOsVEOSJIfivNum9mvXqVl
/6JSzl7VU8g+SYLN3vb8Z7vtubftDHkO261etcpO1XOSne35YiDfGcgWAonb
Atm2IH3k6gepJ1c/SB25+kHy5OoHiZOrH8QnVz+IHgj9IHeTqx8UXuTqB8UT
ufoh6Ys8/aB0Sa5+UH4gVz8ABNZcFg==
      "], {{0, 15.}, {15., 0}}, {0., 1.},
      ColorFunction->GrayLevel],
     BoxForm`ImageTag["Real32", ColorSpace -> Automatic, Interleaving -> None],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{15., 15.},
    PlotRange->{{0, 15.}, {0, 15.}}]}], "}"}]], "Output",
 CellChangeTimes->{{3.896331755379592*^9, 3.896331765428173*^9}, {
   3.896333386471965*^9, 3.8963334133407717`*^9}, {3.8963346614386787`*^9, 
   3.896334690766985*^9}, 3.896334753576983*^9, 3.896334849032866*^9, {
   3.896415056361308*^9, 3.8964150704640007`*^9}, 3.912445573446383*^9, 
   3.9124467675607347`*^9},
 CellLabel->"Out[62]=",ExpressionUUID->"6089ec0f-ec43-4e5b-bd74-f70880f89d89"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBbCBOamKOsVEOSJIfilU9J9mqegrZ
bc+NtgOy7fJubwOyb9sBpeyB4vaek1Ts826b2U9S8bQHqrG/vS3XnoGhAcjv
tCdXH4gmVx+IT64+kDi5+iDy5OkDqSNXH0j9QOgDuZdcfaBwIlcfJH7I0wdK
F+TqA6VHcvWB8gG5+kD5DwDddkZu
      "], {{0, 15.}, {15., 0}}, {0., 1.},
      ColorFunction->GrayLevel],
     BoxForm`ImageTag["Real32", ColorSpace -> Automatic, Interleaving -> None],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{15., 15.},
    PlotRange->{{0, 15.}, {0, 15.}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBbCBOamKOsVEOSJIfilU9hey250bb
qXpOssu7vQ3Ivm0HFLYHitt7TlKxz7ttZj9JxdMeqMb+9rZcewaGBiC/E0xD
9JGnH6SeVH0wGqSeVH0wPkg9qfpg4iD1pOqDyYPUk6oPpg5Ek6oPWT2p+mDu
RHY/sfpg4YMcbsTqg8ULcnwRqw+WHpDTCbH6YOkQlq5J0wdJ/8j5glT9AHky
TiM=
      "], {{0, 15.}, {15., 0}}, {0., 1.},
      ColorFunction->GrayLevel],
     BoxForm`ImageTag["Real32", ColorSpace -> Automatic, Interleaving -> None],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{15., 15.},
    PlotRange->{{0, 15.}, {0, 15.}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBbCBOamKOsVEOSJIfirfnRtupek6y
y7u9zW577m07oJC9qqeQveckFfu822b2k1Q87YFq7G9vy7VnYGgA8jvBNIgP
0keqfhgNUk+OfpD9IHUw/cToQ9YPUgfTT4w+ZD5IHUw/MfqQxUHqYPqJ0Ycs
D+MTqw9dHbp5+PQhuw+bP/DpQw4XbOGHTx9yfMDSCbH6kNMBcvokRh9y+kNO
n6Tqx5Y/iNUPAOG8UKM=
      "], {{0, 15.}, {15., 0}}, {0., 1.},
      ColorFunction->GrayLevel],
     BoxForm`ImageTag["Real32", ColorSpace -> Automatic, Interleaving -> None],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{15., 15.},
    PlotRange->{{0, 15.}, {0, 15.}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBbCBOamKOsVEOSJIfilU9J9nl3d5m
tz33th2Qa6/qKWTvOUnFPu+2mf0kFU/77bnR9re35dozMDQA+Z1gGsQHiYP0
kaIfpg9C37YjRT+yOSB1pOqHuR8kj6wfnz50/SB5ZP349KHbD+Ij68enD584
IX2UmIvuLli4o/sHmz708ECOb0L60OMBPZ3h04ce/5jpjHj96OmMNP248wkh
/QACIkws
      "], {{0, 15.}, {15., 0}}, {0., 1.},
      ColorFunction->GrayLevel],
     BoxForm`ImageTag["Real32", ColorSpace -> Automatic, Interleaving -> None],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{15., 15.},
    PlotRange->{{0, 15.}, {0, 15.}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBbCBOamKOsVEOSJIfivNub7Pbnnvb
Dsi0V/UUsvecpGKfd9vMfpKKp/323Gj729ty7RkYGoD8TjAN4oPEIfK37YjV
j6ov2h6knlj9yPpAfJA6YvWjuwMkT4p+ZP+DxNH1Y9OHXb8nhn5s+vD5H1k/
Nn2Ewg/dfELuQY83XPqwhwNmesGmD1v4Y0svxOrHll6I1Y8tvRCrn5j8gks/
AGXzRrQ=
      "], {{0, 15.}, {15., 0}}, {0., 1.},
      ColorFunction->GrayLevel],
     BoxForm`ImageTag["Real32", ColorSpace -> Automatic, Interleaving -> None],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{15., 15.},
    PlotRange->{{0, 15.}, {0, 15.}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBbCBOamKOsVEOSJIfirfn3rYDUvaq
nkL2npNU7PNum9lPUvG0354bbX97W649A0MDkN8JpkF8kDhIHqQOpI8Y/ej6
QDRIPTH60fWB+CB1xOhH1wcyD8QnRj/2cPAkWj96+CG7B1k/sj5iww+mH1kf
KeGPrg93+GGPd2L8jyveidGPK96J0Y8r3onRjyveidFPSr5B1w8AvZU1Sg==

      "], {{0, 15.}, {15., 0}}, {0., 1.},
      ColorFunction->GrayLevel],
     BoxForm`ImageTag["Real32", ColorSpace -> Automatic, Interleaving -> None],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{15., 15.},
    PlotRange->{{0, 15.}, {0, 15.}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBbCBOamKOsVEOSJIfioHAXtVTyN5z
kop93m0z+0kqnvbbc6Ptb2/LtWdgaADyO8E0iA8SB8mD1IHUg/QR0o9NH7H6
sekj1n5s+oh1PzZ9xPqflHAgJvwIhT8yPRp/Qy/+QPoBbps2zg==
      
      "], {{0, 15.}, {15., 0}}, {0., 1.},
      ColorFunction->GrayLevel],
     BoxForm`ImageTag["Real32", ColorSpace -> Automatic, Interleaving -> None],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{15., 15.},
    PlotRange->{{0, 15.}, {0, 15.}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBbCBOamKOsVEOSJIfilU9hew9J6nY
5902s5+k4mm/PTfa/va2XHsGhgYgvxNMg/ggcZA8SB1IPUwfPv349GHjI+vH
pw+fOCF9lJhLiX8oCUdi4mE0/oZu/AEAI5BEQQ==
      "], {{0, 15.}, {15., 0}}, {0., 
      1.},
      ColorFunction->GrayLevel],
     BoxForm`ImageTag["Real32", ColorSpace -> Automatic, Interleaving -> None],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{15., 15.},
    PlotRange->{{0, 15.}, {0, 15.}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBbCBOamKOsVEOSJIfij0nqdjn3Taz
n6Tiab89N9r+9rZcewaGBiC/E0yD+CBxkDxIHUi9qqcQUI4BzsemH58+EI0s
jq4fnz4QH10eWT8+fSBxbObD9OPTB5LH5S9C+iDqCYcnNn2EwhOZJice8MU/
Mfpw6ydsHy79xIUndv3E+A+XfnLjAUQTE5649AMAbps2zg==
      
      "], {{0, 15.}, {15., 0}}, {0., 1.},
      ColorFunction->GrayLevel],
     BoxForm`ImageTag["Real32", ColorSpace -> Automatic, Interleaving -> None],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{15., 15.},
    PlotRange->{{0, 15.}, {0, 15.}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBbCBOamKOsVEOSJIfivNum9lPUvG0
354bbX97W649A0MDkN8JpkF8kDhIHqTOc5KKvaqnEFCOASh+2w4mjq6fkD4I
jZBH1k9IH4iPrg6mn5A+kDg29xGjD6KOuHDB1OeJUx+6fnR9+MIFXT+x+tDt
waYPkg6I9x96+iFWHzb9xNqHTT+x7sSmn1j/YddPXLhg0w8AvZU1Sg==
      
      "], {{0, 15.}, {15., 0}}, {0., 1.},
      ColorFunction->GrayLevel],
     BoxForm`ImageTag["Real32", ColorSpace -> Automatic, Interleaving -> None],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{15., 15.},
    PlotRange->{{0, 15.}, {0, 15.}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBbCBOamKOsVEOSJIfiiepeNpvz422
v70t156BocF+kkonmAbxQeIg+bzbZvaek1TsVT2FgHIMQPHbdnm3t9nB5JH1
E6fvth2yOph+YvSB+Oj2EKsPJE6a/xD6QPLY9OHSj6wPJI/NPlz6kfXh8h8u
/YT0YTMf3T2w+CDGX8jhgJwOiAlPbPpA8UOKPnT9pNiHmf6Idye6flL8h64f
AGXzRrQ=
      "], {{0, 15.}, {15., 0}}, {0., 1.},
      ColorFunction->GrayLevel],
     BoxForm`ImageTag["Real32", ColorSpace -> Automatic, Interleaving -> None],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{15., 15.},
    PlotRange->{{0, 15.}, {0, 15.}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBbCBOamKOsVEOSJIfirfnRtvf3pZr
z8DQYD9JpRNMg/gg8UkqnvZ5t83sPSep2Kt6CgHlGIDit+3ybm+zU/WcZAdT
B9NPrD4QjayeFH0gPqnuhOkDiaPrI6Qfpg8kjm4fIf0wfSBxdHWE9MP0wdQh
yxPSj0sfNnPxuQuff7Dph/FB4YQvHLHpR05H+OIPm37k9EuqPmT9pNqHrJ9U
dyLrBwACIkws
      "], {{0, 15.}, {15., 0}}, {0., 1.},
      ColorFunction->GrayLevel],
     BoxForm`ImageTag["Real32", ColorSpace -> Automatic, Interleaving -> None],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{15., 15.},
    PlotRange->{{0, 15.}, {0, 15.}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBbCBOamKOsVEOSJIfim9vy7VnYGiw
n6TSCaZB/O250UC+p33ebTN7z0kq9qqeQkA5BqD4bbu829vsVD0n2QHV2MHU
k6oPRJNjH4gG8ZH1EasfRIP4yOqJ1Q+iIXyEOmL1g2gQH1meWP0gGqYeJk6s
fnR96Obh0w+Tx+YPQvph4tjCj5B+BB8z3gjph6VDbOmFkH5Y+idHH4wmxz6Y
fgDhvFCj
      "], {{0, 15.}, {15., 0}}, {0., 1.},
      ColorFunction->GrayLevel],
     BoxForm`ImageTag["Real32", ColorSpace -> Automatic, Interleaving -> None],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{15., 15.},
    PlotRange->{{0, 15.}, {0, 15.}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBbCBOamKOsVEOSJIfihkYGuwnqXTa
g+jb23Ltt+dGA/me9nm3zew9J6nYq3oKAeUYgOK37fJub7NT9ZxkB1QDpIXs
yNUHomH6SNc/yQ6mnlT9IBqmjlT9IBomT6p+EA0TJ1U/iIbxSdWPzRxi9YNo
ZPeToh8ijwg3UvSDaNT4Il4/iEZOJ6ToB9HI6ZMU/aB8QK4+EA0AeTJOIw==

      "], {{0, 15.}, {15., 0}}, {0., 1.},
      ColorFunction->GrayLevel],
     BoxForm`ImageTag["Real32", ColorSpace -> Automatic, Interleaving -> None],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{15., 15.},
    PlotRange->{{0, 15.}, {0, 15.}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBbCBOamKOsVEOSJIfiiepdNozMDTY
396Wa789N9p+koqnfd5tM3vPSSr2qp5CQDkGoPhtu7zb2+xUPSfZAdUAaSEQ
2xakj1z9IPXk6gepI1c/SJ5c/SBxcvWD+OTqB9EDoR/kbnL1g8KLXP2geCJX
PyR9kacflC7J1Q/KD+TqBwDddkZu
      "], {{0, 15.}, {15., 0}}, {0., 1.},
      ColorFunction->GrayLevel],
     BoxForm`ImageTag["Real32", ColorSpace -> Automatic, Interleaving -> None],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{15., 15.},
    PlotRange->{{0, 15.}, {0, 15.}}]}], "}"}]], "Output",
 CellChangeTimes->{{3.896331755379592*^9, 3.896331765428173*^9}, {
   3.896333386471965*^9, 3.8963334133407717`*^9}, {3.8963346614386787`*^9, 
   3.896334690766985*^9}, 3.896334753576983*^9, 3.896334849032866*^9, {
   3.896415056361308*^9, 3.8964150704640007`*^9}, 3.912445573446383*^9, 
   3.912446767579706*^9},
 CellLabel->"Out[63]=",ExpressionUUID->"caee3b95-5e6c-4420-846b-cafa9b8d5c83"]
}, Open  ]],

Cell[TextData[{
 "This is where the actual ",
 StyleBox["Markov chain", "Section"],
 " stuff begins."
}], "Text",
 CellChangeTimes->{{3.912445654502932*^9, 
  3.912445664631343*^9}},ExpressionUUID->"49bd5e14-9583-45dc-952d-\
0822b9efa7c7"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"selectRandomSite", "[", "]"}], " ", ":=", " ", 
   RowBox[{"RandomChoice", "[", 
    RowBox[{"Tuples", "[", 
     RowBox[{
      RowBox[{"Range", "[", 
       RowBox[{"2", ",", " ", 
        RowBox[{"dim", " ", "-", " ", "1"}]}], "]"}], ",", " ", "3"}], "]"}], 
    "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"coinFlip", "[", "]"}], " ", ":=", " ", 
  RowBox[{"RandomChoice", "[", 
   RowBox[{"{", 
    RowBox[{"checkPopUp", ",", " ", "checkPopDown"}], "}"}], "]"}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"changeVal", "[", 
    RowBox[{"grid_", ",", " ", "pos_", ",", " ", "newVal_"}], "]"}], " ", ":=",
    " ", 
   RowBox[{"ReplacePart", "[", 
    RowBox[{"grid", ",", " ", 
     RowBox[{"pos", " ", "->", " ", "newVal"}]}], "]"}]}], "\n", "\n", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
    "Check", " ", "if", " ", "you", " ", "can", " ", "pop", " ", "up", " ", 
     "a", " ", "cell", " ", "at", " ", "pos", " ", "in", " ", 
     RowBox[{"grid", ".", " ", "Works"}], " ", "on", " ", "both", " ", 
     "height", " ", "values", " ", "and", " ", "3"}], "-", "colourings"}], 
   " ", "*)"}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"checkPopUp", "[", 
    RowBox[{"grid_", ",", " ", "pos_"}], "]"}], " ", ":=", " ", 
   RowBox[{"AllTrue", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"grid", "[", 
       RowBox[{"[", 
        RowBox[{
         RowBox[{
          RowBox[{"pos", "[", 
           RowBox[{"[", "1", "]"}], "]"}], " ", "+", " ", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"-", "1"}], ",", " ", "1"}], "}"}]}], ",", " ", 
         RowBox[{"pos", "[", 
          RowBox[{"[", "2", "]"}], "]"}], ",", " ", 
         RowBox[{"pos", "[", 
          RowBox[{"[", "3", "]"}], "]"}]}], "]"}], "]"}], " ", "~", " ", 
      "Join", " ", "~", " ", 
      RowBox[{"grid", "[", 
       RowBox[{"[", 
        RowBox[{
         RowBox[{"pos", "[", 
          RowBox[{"[", "1", "]"}], "]"}], ",", " ", 
         RowBox[{
          RowBox[{"pos", "[", 
           RowBox[{"[", "2", "]"}], "]"}], " ", "+", " ", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"-", "1"}], ",", " ", "1"}], "}"}]}], ",", " ", 
         RowBox[{"pos", "[", 
          RowBox[{"[", "3", "]"}], "]"}]}], "]"}], "]"}], "~", " ", "Join", 
      " ", "~", " ", 
      RowBox[{"grid", "[", 
       RowBox[{"[", 
        RowBox[{
         RowBox[{"pos", "[", 
          RowBox[{"[", "1", "]"}], "]"}], ",", " ", 
         RowBox[{"pos", "[", 
          RowBox[{"[", "2", "]"}], "]"}], ",", " ", 
         RowBox[{
          RowBox[{"pos", "[", 
           RowBox[{"[", "3", "]"}], "]"}], " ", "+", " ", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"-", "1"}], ",", " ", "1"}], "}"}]}]}], "]"}], "]"}]}], 
     ",", " ", "\n", " ", 
     RowBox[{
      RowBox[{
       RowBox[{"Mod", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"grid", "[", 
           RowBox[{"[", 
            RowBox[{"Sequence", " ", "@@", " ", "pos"}], "]"}], "]"}], " ", 
          "-", " ", "#"}], ",", " ", "3"}], "]"}], " ", "==", " ", "2"}], " ",
       "&"}]}], "]"}]}], "\n", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
    "Check", " ", "if", " ", "you", " ", "can", " ", "pop", " ", "down", " ", 
     "a", " ", "cell", " ", "at", " ", "pos", " ", "in", " ", 
     RowBox[{"grid", ".", " ", "Works"}], " ", "on", " ", "both", " ", 
     "height", " ", "values", " ", "and", " ", "3"}], "-", "colourings"}], 
   " ", "*)"}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"checkPopDown", "[", 
    RowBox[{"grid_", ",", " ", "pos_"}], "]"}], " ", ":=", " ", 
   RowBox[{"AllTrue", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"grid", "[", 
       RowBox[{"[", 
        RowBox[{
         RowBox[{
          RowBox[{"pos", "[", 
           RowBox[{"[", "1", "]"}], "]"}], " ", "+", " ", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"-", "1"}], ",", " ", "1"}], "}"}]}], ",", " ", 
         RowBox[{"pos", "[", 
          RowBox[{"[", "2", "]"}], "]"}], ",", " ", 
         RowBox[{"pos", "[", 
          RowBox[{"[", "3", "]"}], "]"}]}], "]"}], "]"}], " ", "~", " ", 
      "Join", " ", "~", " ", 
      RowBox[{"grid", "[", 
       RowBox[{"[", 
        RowBox[{
         RowBox[{"pos", "[", 
          RowBox[{"[", "1", "]"}], "]"}], ",", " ", 
         RowBox[{
          RowBox[{"pos", "[", 
           RowBox[{"[", "2", "]"}], "]"}], " ", "+", " ", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"-", "1"}], ",", " ", "1"}], "}"}]}], ",", " ", 
         RowBox[{"pos", "[", 
          RowBox[{"[", "3", "]"}], "]"}]}], "]"}], "]"}], "~", " ", "Join", 
      " ", "~", " ", 
      RowBox[{"grid", "[", 
       RowBox[{"[", 
        RowBox[{
         RowBox[{"pos", "[", 
          RowBox[{"[", "1", "]"}], "]"}], ",", " ", 
         RowBox[{"pos", "[", 
          RowBox[{"[", "2", "]"}], "]"}], ",", " ", 
         RowBox[{
          RowBox[{"pos", "[", 
           RowBox[{"[", "3", "]"}], "]"}], " ", "+", " ", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"-", "1"}], ",", " ", "1"}], "}"}]}]}], "]"}], "]"}]}], 
     ",", " ", "\n", " ", 
     RowBox[{
      RowBox[{
       RowBox[{"Mod", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"grid", "[", 
           RowBox[{"[", 
            RowBox[{"Sequence", " ", "@@", " ", "pos"}], "]"}], "]"}], " ", 
          "-", " ", "#"}], ",", " ", "3"}], "]"}], " ", "==", " ", "1"}], " ",
       "&"}]}], "]"}]}], "\n", "\n", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"If", " ", "heads"}], ",", " ", 
    RowBox[{
     RowBox[{
     "check", " ", "if", " ", "site", " ", "can", " ", "be", " ", "popped", 
      " ", "up"}], ";", " ", "otherwise"}], ",", " ", 
    RowBox[{
    "check", " ", "if", " ", "site", " ", "can", " ", "be", " ", "popped", 
     " ", 
     RowBox[{"down", "."}]}]}], " ", "*)"}]}], "\n", 
 RowBox[{
  RowBox[{"coinFunctionAssociation", " ", "=", " ", 
   RowBox[{"Association", "[", 
    RowBox[{
     RowBox[{"checkPopUp", " ", "->", " ", "True"}], ",", " ", 
     RowBox[{"checkPopDown", " ", "->", " ", "False"}]}], "]"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"coinSignAssociation", " ", "=", " ", 
    RowBox[{"Association", "[", 
     RowBox[{
      RowBox[{"checkPopUp", " ", "->", " ", "Plus"}], ",", " ", 
      RowBox[{"checkPopDown", " ", "->", " ", "Subtract"}]}], "]"}]}], ";"}], 
  "\n", "\n", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"coinTosses", ":", " ", 
     RowBox[{
     "list", " ", "of", " ", "random", " ", "coin", " ", "flips", " ", "in", 
      " ", "the", " ", "form", " ", "of", " ", "a", " ", "list", " ", 
      "checkPopUp"}]}], ",", " ", 
    RowBox[{"checkPopDown", " ", "functions"}]}], " ", "*)"}], "\n", 
  RowBox[{"(*", " ", 
   RowBox[{"sites", ":", " ", 
    RowBox[{"list", " ", "of", " ", "random", " ", "sites"}]}], " ", "*)"}], 
  "\n", 
  RowBox[{"(*", " ", 
   RowBox[{
   "generates", " ", "numSteps", " ", "new", " ", "coin", " ", "tosses", " ", 
    "and", " ", "sites", " ", "and", " ", "adds", " ", "them", " ", "to", " ",
     "the", " ", "the", " ", "beginning", " ", "of", " ", "existing", " ", 
    "lists"}], " ", "*)"}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"extendRandomLists", "[", "numSteps_", "]"}], " ", ":=", " ", 
   RowBox[{"(", "\n", "\t", 
    RowBox[{
     RowBox[{"coinTosses", " ", "=", " ", 
      RowBox[{"Join", "[", 
       RowBox[{
        RowBox[{"Table", "[", 
         RowBox[{
          RowBox[{"coinFlip", "[", "]"}], ",", " ", "numSteps"}], "]"}], ",", 
        " ", "coinTosses"}], "]"}]}], ";", "\n", "\t", 
     RowBox[{"sites", " ", "=", " ", 
      RowBox[{"Join", "[", 
       RowBox[{
        RowBox[{"Table", "[", 
         RowBox[{
          RowBox[{"selectRandomSite", "[", "]"}], ",", " ", "numSteps"}], 
         "]"}], ",", " ", "sites"}], "]"}]}], ";"}], "\n", ")"}]}], "\n", 
  "\n", 
  RowBox[{"(*", " ", 
   RowBox[{
   "Execute", " ", "one", " ", "step", " ", "of", " ", "the", " ", "Markov", 
    " ", "chain", " ", "on", " ", "grid"}], " ", "*)"}], "\n", 
  RowBox[{"(*", " ", 
   RowBox[{"OPTIMISATION", ":", " ", 
    RowBox[{
    "maybe", " ", "put", " ", "this", " ", "in", " ", "the", " ", "function", 
     " ", "that", " ", "performs", " ", "multiple", " ", "steps", " ", 
     "instead", " ", "of", " ", "calling", " ", "it", " ", "over", " ", "and",
      " ", 
     RowBox[{"over", "?"}]}]}], " ", "*)"}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"oneStep", "[", 
    RowBox[{"coin_", ",", " ", "site_"}], "]"}], " ", ":=", " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"initialCubes", " ", "=", " ", 
        RowBox[{"{", 
         RowBox[{"maxCube", ",", " ", "minCube"}], "}"}]}], ",", " ", 
       RowBox[{"outCubes", " ", "=", " ", 
        RowBox[{"{", 
         RowBox[{"maxCube", ",", " ", "minCube"}], "}"}]}]}], "}"}], ",", 
     "\n", "   ", 
     RowBox[{
      RowBox[{"Map", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"coin", "[", 
            RowBox[{
             RowBox[{"initialCubes", "[", 
              RowBox[{"[", "#", "]"}], "]"}], ",", " ", "site"}], "]"}], ",", 
           " ", "\n", "   ", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{
              RowBox[{"outCubes", "[", 
               RowBox[{"[", "#", "]"}], "]"}], " ", "=", " ", 
              RowBox[{"changeVal", "[", 
               RowBox[{
                RowBox[{"initialCubes", "[", 
                 RowBox[{"[", "#", "]"}], "]"}], ",", " ", "site", ",", " ", 
                RowBox[{
                 RowBox[{"coinSignAssociation", "[", "coin", "]"}], "[", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"initialCubes", "[", 
                    RowBox[{"[", "#", "]"}], "]"}], "[", 
                   RowBox[{"[", 
                    RowBox[{"Sequence", " ", "@@", " ", "site"}], "]"}], 
                   "]"}], ",", " ", "2"}], "]"}]}], "]"}]}], ";"}], ")"}]}], 
          "]"}], " ", "&"}], ",", " ", 
        RowBox[{"{", 
         RowBox[{"1", ",", " ", "2"}], "}"}]}], "]"}], ";", "\n", "   ", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"maxCube", ",", " ", "minCube"}], "}"}], " ", "=", " ", 
       "outCubes"}], ";"}]}], "\n", "]"}]}], "\n", "\n", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
    "Executes", " ", "the", " ", "algorithm", " ", "for", " ", "numSteps"}], 
    " ", "=", " ", 
    RowBox[{"len", 
     RowBox[{"(", "coinTosses", ")"}], " ", "steps"}]}], " ", "*)"}], "\n", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"Additionally", ":", " ", 
     RowBox[{"logs", " ", "files", " ", "every", " ", 
      RowBox[{"numSteps", "/", "100"}], " ", "or", " ", "10", " ", "million", 
      " ", "steps"}]}], ",", " ", 
    RowBox[{"whichever", " ", "is", " ", "lower"}]}], " ", "*)"}], "\n", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
    "Returns", " ", "1", " ", "if", " ", "the", " ", "grids", " ", 
     "converged"}], ",", " ", 
    RowBox[{"0", " ", "if", " ", "not"}]}], " ", "*)"}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"nStepsMarkovChain", "[", "]"}], " ", ":=", " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"numSteps", " ", "=", " ", 
        RowBox[{"Length", "[", "coinTosses", "]"}]}], ",", "\n", 
       "\t\t\t\t\t\t\t", 
       RowBox[{"logInterval", " ", "=", " ", 
        RowBox[{"Min", "[", 
         RowBox[{
          RowBox[{"10", "^", "7"}], ",", " ", 
          RowBox[{"Max", "[", 
           RowBox[{
            RowBox[{"Round", "[", 
             RowBox[{
              RowBox[{"Length", "[", "coinTosses", "]"}], " ", "/", " ", 
              "100"}], "]"}], ",", " ", "20000"}], "]"}]}], "]"}]}], ",", 
       "\n", "\t\t\t\t\t\t\t", 
       RowBox[{"outDir", " ", "=", " ", 
        RowBox[{"StringJoin", "[", 
         RowBox[{"logDir", ",", " ", "\"\<coupling_\>\"", ",", " ", 
          RowBox[{"ToString", "[", "dim", "]"}], ",", " ", "\"\</log_\>\""}], 
         "]"}]}], ",", "\n", "\t\t\t\t\t\t\t", "i", ",", " ", "tempMinCube", 
       ",", " ", "tempMaxCube", ",", " ", "tempHeightDifference", ",", " ", 
       "tempStepNumber"}], "}"}], ",", "\n", "  ", 
     RowBox[{
      RowBox[{"Print", "[", 
       RowBox[{
       "\"\<Running for \>\"", ",", " ", "numSteps", ",", " ", 
        "\"\< steps...\>\""}], "]"}], ";", "\n", "  ", 
      RowBox[{"Print", "[", 
       RowBox[{
       "\"\<Logging every \>\"", ",", " ", "logInterval", ",", " ", 
        "\"\< steps\>\""}], "]"}], ";", "\n", "  ", 
      RowBox[{"Catch", "[", 
       RowBox[{
        RowBox[{"Monitor", "[", "\n", "    ", 
         RowBox[{
          RowBox[{"For", "[", 
           RowBox[{
            RowBox[{"i", " ", "=", " ", "0"}], ",", " ", 
            RowBox[{"i", " ", "<", " ", "numSteps"}], ",", " ", 
            RowBox[{"i", "++"}], ",", " ", 
            RowBox[{"(", "\n", "      ", 
             RowBox[{
              RowBox[{"If", "[", 
               RowBox[{
                RowBox[{
                 RowBox[{"Mod", "[", 
                  RowBox[{"i", ",", " ", "logInterval"}], "]"}], " ", "==", 
                 " ", "0"}], ",", " ", "\n", "       ", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"Export", "[", 
                   RowBox[{
                    RowBox[{"StringJoin", "[", 
                    RowBox[{"outDir", ",", " ", 
                    RowBox[{"ToString", "[", "i", "]"}], ",", " ", 
                    "\"\<.mx\>\""}], "]"}], ",", " ", 
                    RowBox[{"{", 
                    RowBox[{"maxCube", ",", " ", "minCube"}], "}"}]}], "]"}], 
                  ";", "\n", "        ", 
                  RowBox[{
                   RowBox[{"{", 
                    RowBox[{"tempMinCube", ",", " ", "tempMaxCube"}], "}"}], 
                   " ", "=", " ", 
                   RowBox[{"{", 
                    RowBox[{"minCube", ",", " ", "maxCube"}], "}"}]}], ";", 
                  "\n", "        ", 
                  RowBox[{"tempHeightDifference", " ", "=", " ", 
                   RowBox[{"checkHeightDifference", "[", 
                    RowBox[{"tempMinCube", ",", " ", "tempMaxCube"}], "]"}]}],
                   ";", "\n", "        ", 
                  RowBox[{"tempStepNumber", " ", "=", " ", "i"}], ";"}], "\n",
                  "        ", 
                 RowBox[{"(*", " ", 
                  RowBox[{
                  "WHAT", " ", "IS", " ", "THIS", " ", "LINE", " ", "DOING", 
                   " ", 
                   RowBox[{"HERE", "?"}]}], " ", "*)"}], "\n", "        ", 
                 RowBox[{"(*", 
                  RowBox[{
                   RowBox[{"displayGrids", "[", 
                    RowBox[{
                    "tempMaxGrid", ",", " ", "tempMinGrid", ",", " ", 
                    "blueColourRules"}], "]"}], ";"}], "*)"}], "\n", 
                 "        ", ")"}]}], "\n", "      ", "]"}], ";", "\n", 
              "      ", 
              RowBox[{"(*", " ", 
               RowBox[{
                RowBox[{"OPTIMISATION", ":", " ", 
                 RowBox[{
                  RowBox[{"don", "'"}], "t", " ", "need", " ", "to", " ", 
                  "check", " ", "height", " ", "difference", " ", "each", " ", 
                  RowBox[{"time", ".", " ", "If"}], " ", "difference", " ", 
                  "is", " ", "1000"}]}], ",", " ", 
                RowBox[{
                "only", " ", "need", " ", "to", " ", "check", " ", "again", 
                 " ", "after", " ", "500", " ", "steps"}]}], "*)"}], "\n", 
              "      ", 
              RowBox[{"(*", " ", 
               RowBox[{
                RowBox[{"OPTIMISATION", ":", " ", 
                 RowBox[{
                 "maybe", " ", "have", " ", "a", " ", 
                  "quickCheckHeightDifference"}]}], ",", " ", 
                RowBox[{
                "that", " ", "checks", " ", "a", " ", "few", " ", "cells", 
                 " ", "randomly"}]}], " ", "*)"}], "\n", "      ", 
              RowBox[{"If", "[", 
               RowBox[{
                RowBox[{
                 RowBox[{"checkHeightDifference", "[", 
                  RowBox[{"maxCube", ",", " ", "minCube"}], "]"}], " ", "==", 
                 " ", "0"}], ",", " ", 
                RowBox[{"(", "\n", "         ", 
                 RowBox[{
                  RowBox[{"tempHeightDifference", " ", "=", " ", "0"}], ";", 
                  "     ", "\n", "         ", 
                  RowBox[{"Throw", "[", "1", "]"}]}], ")"}]}], "]"}], ";", 
              "\n", "      ", "\n", "      ", 
              RowBox[{"oneStep", "[", 
               RowBox[{
                RowBox[{"coinTosses", "[", 
                 RowBox[{"[", "i", "]"}], "]"}], ",", " ", 
                RowBox[{"sites", "[", 
                 RowBox[{"[", "i", "]"}], "]"}]}], "]"}], ";"}], ")"}]}], 
           "\n", "    ", "]"}], ",", " ", "\n", "    ", 
          RowBox[{"Grid", "[", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"StringJoin", "[", 
               RowBox[{"\"\<Current step: \>\"", ",", " ", 
                RowBox[{"ToString", "[", "tempStepNumber", "]"}]}], "]"}], 
              "}"}], ",", " ", "\n", "          ", 
             RowBox[{"{", 
              RowBox[{"StringJoin", "[", 
               RowBox[{"\"\<Height difference: \>\"", ",", " ", 
                RowBox[{"ToString", "[", "tempHeightDifference", "]"}]}], 
               "]"}], "}"}], ",", " ", "\n", "          ", 
             RowBox[{"{", 
              RowBox[{"cubesSlicesSimultaneously", "[", 
               RowBox[{"tempMaxCube", ",", " ", "tempMinCube"}], "]"}], "}"}],
              ",", "\n", "          ", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"cubeLayers", "[", "tempMaxCube", "]"}], ",", " ", 
               RowBox[{"cubeLayers", "[", "tempMinCube", "]"}]}], "}"}]}], 
            "}"}], "\n", "    ", "]"}]}], "\n", "  ", "]"}], ";"}], "]"}], 
      ";", "\n", "  ", "\n", "  ", "\n", "  ", 
      RowBox[{"Print", "[", 
       RowBox[{
       "\"\<-- The height difference after \>\"", ",", " ", "i", ",", " ", 
        "\"\< steps was \>\"", ",", " ", "tempHeightDifference", ",", " ", 
        "\"\<.\>\""}], "]"}], ";", "\n", "  ", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"tempHeightDifference", " ", "==", " ", "0"}], ",", " ", 
        RowBox[{"Return", "[", "1", "]"}]}], "]"}], ";", "\n", "  ", 
      RowBox[{"Return", "[", "0", "]"}], ";"}]}], "\n", "]"}]}], "\n", 
  "\n"}], "\n", 
 RowBox[{
  RowBox[{"startChain", "[", 
   RowBox[{"dimension_", ",", " ", "t_"}], "]"}], " ", ":=", " ", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "coins", ",", " ", "timestamp", ",", "\n", "\t\t\t\t\t\t\t\t\t", 
      RowBox[{"dirName", " ", "=", " ", 
       RowBox[{"StringJoin", "[", 
        RowBox[{"logDir", ",", " ", "\"\<coupling_\>\"", ",", " ", 
         RowBox[{"ToString", "[", "dimension", "]"}], ",", " ", 
         "\"\<_logs/\>\""}], "]"}]}], ",", " ", "\n", "\t\t\t\t\t\t\t\t\t", 
      RowBox[{"finalDirName", " ", "=", " ", 
       RowBox[{"StringJoin", "[", 
        RowBox[{"logDir", ",", " ", "\"\<coupling_\>\"", ",", " ", 
         RowBox[{"ToString", "[", "dimension", "]"}], ",", " ", 
         "\"\<_samples/\>\""}], "]"}]}], ",", "\n", "\t\t\t\t\t\t\t\t\t", 
      RowBox[{"steps", " ", "=", " ", "t"}]}], "}"}], ",", "\n", "\t", 
    RowBox[{
     RowBox[{"dim", " ", "=", " ", "dimension"}], ";", "\n", "\t", 
     RowBox[{"sites", " ", "=", " ", 
      RowBox[{"{", "}"}]}], ";", "\n", "\t", 
     RowBox[{"coinTosses", " ", "=", " ", 
      RowBox[{"{", "}"}]}], ";", "\n", "\t", 
     RowBox[{"converged", " ", "=", " ", "0"}], ";", "\t", "\n", "\t", 
     RowBox[{"While", "[", 
      RowBox[{
       RowBox[{"converged", " ", "==", " ", "0"}], ",", " ", 
       RowBox[{"(", "\n", "\t\t", 
        RowBox[{"(*", " ", 
         RowBox[{"Reset", " ", "stuff"}], " ", "*)"}], "\n", "\t\t", 
        RowBox[{
         RowBox[{
          RowBox[{"{", 
           RowBox[{"maxCube", ",", " ", "minCube"}], "}"}], " ", "=", " ", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"generateMaxCube", "[", "dim", "]"}], ",", " ", 
            RowBox[{"generateMinCube", "[", "dim", "]"}]}], "}"}]}], ";", 
         "\n", "\t\t", 
         RowBox[{"Quiet", " ", "@", " ", 
          RowBox[{"DeleteDirectory", "[", 
           RowBox[{"dirName", ",", " ", 
            RowBox[{"DeleteContents", "\[Rule]", "True"}]}], "]"}]}], ";", 
         "\n", "\t    ", 
         RowBox[{"CreateDirectory", "[", "dirName", "]"}], ";", "\n", 
         "\t    ", "\n", "\t    ", 
         RowBox[{"(*", " ", 
          RowBox[{
           RowBox[{
           "Generate", " ", "new", " ", "coin", " ", "tosses", " ", "and", 
            " ", "sites"}], ",", " ", 
           RowBox[{"and", " ", "log", " ", "them"}]}], "*)"}], "\t\t", "\n", 
         "\t\t", 
         RowBox[{"extendRandomLists", "[", "steps", "]"}], ";", "\n", "\t\t", 
         
         RowBox[{"steps", " ", "=", " ", 
          RowBox[{"Length", "[", "coinTosses", "]"}]}], ";", "\n", "\t\t", 
         RowBox[{"Export", "[", 
          RowBox[{
           RowBox[{"StringJoin", "[", 
            RowBox[{"dirName", ",", " ", "\"\<sites.csv\>\""}], "]"}], ",", 
           " ", "sites", ",", " ", "\"\<CSV\>\""}], "]"}], ";", "\n", "\t\t", 
         
         RowBox[{"Export", "[", 
          RowBox[{
           RowBox[{"StringJoin", "[", 
            RowBox[{"dirName", ",", " ", "\"\<coin_tosses.csv\>\""}], "]"}], 
           ",", " ", "coinTosses", ",", " ", "\"\<CSV\>\""}], "]"}], ";", 
         "\n", "\t\t", "\n", "\t    ", 
         RowBox[{"converged", " ", "=", " ", 
          RowBox[{"nStepsMarkovChain", "[", "]"}]}], ";", "\n", "\t    ", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"converged", " ", "==", " ", "1"}], ",", " ", "Break"}], 
          "]"}]}], "\n", "\t", ")"}]}], "]"}], ";", "\n", "\t", "\n", "\t", 
     RowBox[{"timestamp", " ", "=", " ", 
      RowBox[{"DateString", "[", "]"}]}], ";", "\n", "\t", 
     RowBox[{"Export", "[", 
      RowBox[{
       RowBox[{"StringJoin", "[", 
        RowBox[{
        "finalDirName", ",", " ", "timestamp", ",", " ", "\"\<.mx\>\""}], 
        "]"}], ",", " ", "minCube"}], "]"}], ";", "\n", 
     RowBox[{"(*", "\t", 
      RowBox[{"Export", "[", 
       RowBox[{
        RowBox[{"StringJoin", "[", 
         RowBox[{
         "finalDirName", ",", " ", "timestamp", ",", " ", 
          "\"\< colourings.pdf\>\""}], "]"}], ",", " ", 
        RowBox[{
         RowBox[{"displaySlicePlot", "[", 
          RowBox[{"to3Colouring", "[", 
           RowBox[{"minCube", ",", " ", "blueColourRules"}], "]"}], "]"}], 
         ";", "\t", "\n", "\t", 
         RowBox[{"Export", "[", 
          RowBox[{
           RowBox[{"StringJoin", "[", 
            RowBox[{
            "finalDirName", ",", " ", "timestamp", ",", " ", 
             "\"\< heights.pdf\>\""}], "]"}], ",", " ", 
           RowBox[{"displaySlicePlot", "[", "minCube", "]"}]}], "]"}], ";", 
         "\n", "\t", 
         RowBox[{"Export", "[", 
          RowBox[{
           RowBox[{"StringJoin", "[", 
            RowBox[{
            "finalDirName", ",", " ", "timestamp", ",", " ", 
             "\"\< height plots.pdf\>\""}], "]"}], ",", " ", 
           RowBox[{"displayHeightPlot", "[", "minCube", "]"}]}], "]"}], 
         ";"}]}]}], "*)"}], "\n", "\t", 
     RowBox[{"DeleteDirectory", "[", 
      RowBox[{"dirName", ",", " ", 
       RowBox[{"DeleteContents", "\[Rule]", "True"}]}], "]"}], ";", "\n", 
     "\t", 
     RowBox[{"Print", "[", 
      RowBox[{
      "\"\<The chain took \>\"", ",", " ", "steps", ",", " ", 
       "\"\< steps to converge. Here are the results:\>\""}], "]"}], ";", 
     "\n", "\t", 
     RowBox[{
      RowBox[{"cubeSlicesAllAxesSimultaneously", "[", "minCube", "]"}], "\n", 
      "\t", 
      RowBox[{"cubeLayers", "[", "minCube", "]"}]}]}]}], "\n", 
   "]"}]}]}], "Code",
 CellChangeTimes->{{3.896460344757543*^9, 3.896460344892894*^9}, {
   3.8964603775487823`*^9, 3.896460427172718*^9}, {3.896460505525404*^9, 
   3.896460507683814*^9}, 3.896460598098578*^9, 3.9121841491362123`*^9, {
   3.912185176747891*^9, 3.9121851950010757`*^9}, {3.912185273068263*^9, 
   3.9121852790699263`*^9}, {3.912185375050088*^9, 3.9121853774319563`*^9}, {
   3.912185782189267*^9, 3.9121858163212442`*^9}, {3.91218618071176*^9, 
   3.9121862071829767`*^9}, {3.912187031857287*^9, 3.912187033409878*^9}, {
   3.912413041483397*^9, 3.912413047210799*^9}, {3.9124132533760777`*^9, 
   3.9124132695067797`*^9}, {3.9124133063997383`*^9, 3.912413327221567*^9}, {
   3.912413421740149*^9, 3.912413427966223*^9}, {3.912413722012274*^9, 
   3.912413722503805*^9}, {3.912414130718193*^9, 3.9124141336035213`*^9}, {
   3.912414204746469*^9, 3.912414262804587*^9}, {3.9124143519006166`*^9, 
   3.912414421557913*^9}, {3.91241449233878*^9, 3.912414496095799*^9}, {
   3.9124146536513567`*^9, 3.9124146650573673`*^9}, {3.912414714602222*^9, 
   3.912414727267124*^9}, 3.9124148030817137`*^9, {3.9124168506681767`*^9, 
   3.912416856065777*^9}, {3.912417188142894*^9, 3.9124171944126053`*^9}, {
   3.9124172646892433`*^9, 3.912417293326352*^9}},
 CellLabel->"In[64]:=",ExpressionUUID->"6babd98d-b119-4bcd-9c2e-7c324a23bf54"],

Cell["\<\
Do not run this unless you want to start the simulation for a cube of size 15!\
\>", "Text",
 CellChangeTimes->{{3.912445692094102*^9, 3.912445717763008*^9}, {
  3.912445752519793*^9, 
  3.912445752790062*^9}},ExpressionUUID->"c6dc01b4-d9e3-41d4-a11f-\
2a7a1bfb6ae9"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"startChain", "[", 
  RowBox[{"15", ",", " ", "2000"}], "]"}]], "Code",
 CellChangeTimes->{{3.912412868042281*^9, 3.912412919960894*^9}, {
  3.912414752290742*^9, 3.9124147552345533`*^9}},
 CellLabel->
  "In[429]:=",ExpressionUUID->"079fc432-aa5d-4e3b-8dc1-2ab978cbc470"],

Cell[CellGroupData[{

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Running for \"\>", "\[InvisibleSpace]", "2000", 
   "\[InvisibleSpace]", "\<\" steps...\"\>"}],
  SequenceForm["Running for ", 2000, " steps..."],
  Editable->False]], "Print",
 CellChangeTimes->{
  3.9124129220114737`*^9, 3.912413382314457*^9, 3.912413432322916*^9, 
   3.912413726484405*^9, {3.912414112962682*^9, 3.912414135634413*^9}, {
   3.9124142719767647`*^9, 3.912414288480474*^9}, 3.912414448319663*^9, 
   3.912414501451324*^9, 3.912414667543682*^9, {3.9124147302044573`*^9, 
   3.912414756303781*^9}, {3.912414808931624*^9, 3.9124148178812113`*^9}},
 CellLabel->
  "During evaluation of \
In[429]:=",ExpressionUUID->"cb9a0ce4-ea62-4c56-b218-a6b23141e656"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Logging every \"\>", "\[InvisibleSpace]", "20000", 
   "\[InvisibleSpace]", "\<\" steps\"\>"}],
  SequenceForm["Logging every ", 20000, " steps"],
  Editable->False]], "Print",
 CellChangeTimes->{
  3.9124129220114737`*^9, 3.912413382314457*^9, 3.912413432322916*^9, 
   3.912413726484405*^9, {3.912414112962682*^9, 3.912414135634413*^9}, {
   3.9124142719767647`*^9, 3.912414288480474*^9}, 3.912414448319663*^9, 
   3.912414501451324*^9, 3.912414667543682*^9, {3.9124147302044573`*^9, 
   3.912414756303781*^9}, {3.912414808931624*^9, 3.912414817883876*^9}},
 CellLabel->
  "During evaluation of \
In[429]:=",ExpressionUUID->"88de0c62-6f08-4b1a-a6ff-af411f862be6"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"-- The height difference after \"\>", "\[InvisibleSpace]", 
   "2000", "\[InvisibleSpace]", "\<\" steps was \"\>", "\[InvisibleSpace]", 
   "9506", "\[InvisibleSpace]", "\<\".\"\>"}],
  SequenceForm[
  "-- The height difference after ", 2000, " steps was ", 9506, "."],
  Editable->False]], "Print",
 CellChangeTimes->{
  3.9124129220114737`*^9, 3.912413382314457*^9, 3.912413432322916*^9, 
   3.912413726484405*^9, {3.912414112962682*^9, 3.912414135634413*^9}, {
   3.9124142719767647`*^9, 3.912414288480474*^9}, 3.912414448319663*^9, 
   3.912414501451324*^9, 3.912414667543682*^9, {3.9124147302044573`*^9, 
   3.912414756303781*^9}, {3.912414808931624*^9, 3.912414823034919*^9}},
 CellLabel->
  "During evaluation of \
In[429]:=",ExpressionUUID->"4130b192-24fe-42cb-ab2d-893cd2637c7c"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Running for \"\>", "\[InvisibleSpace]", "4000", 
   "\[InvisibleSpace]", "\<\" steps...\"\>"}],
  SequenceForm["Running for ", 4000, " steps..."],
  Editable->False]], "Print",
 CellChangeTimes->{
  3.9124129220114737`*^9, 3.912413382314457*^9, 3.912413432322916*^9, 
   3.912413726484405*^9, {3.912414112962682*^9, 3.912414135634413*^9}, {
   3.9124142719767647`*^9, 3.912414288480474*^9}, 3.912414448319663*^9, 
   3.912414501451324*^9, 3.912414667543682*^9, {3.9124147302044573`*^9, 
   3.912414756303781*^9}, {3.912414808931624*^9, 3.912414823174*^9}},
 CellLabel->
  "During evaluation of \
In[429]:=",ExpressionUUID->"7c11b217-1799-499c-bcfd-815c18965efe"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Logging every \"\>", "\[InvisibleSpace]", "20000", 
   "\[InvisibleSpace]", "\<\" steps\"\>"}],
  SequenceForm["Logging every ", 20000, " steps"],
  Editable->False]], "Print",
 CellChangeTimes->{
  3.9124129220114737`*^9, 3.912413382314457*^9, 3.912413432322916*^9, 
   3.912413726484405*^9, {3.912414112962682*^9, 3.912414135634413*^9}, {
   3.9124142719767647`*^9, 3.912414288480474*^9}, 3.912414448319663*^9, 
   3.912414501451324*^9, 3.912414667543682*^9, {3.9124147302044573`*^9, 
   3.912414756303781*^9}, {3.912414808931624*^9, 3.9124148231767387`*^9}},
 CellLabel->
  "During evaluation of \
In[429]:=",ExpressionUUID->"cf2c6d8c-fbaa-49e5-9111-ef2382824263"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"-- The height difference after \"\>", "\[InvisibleSpace]", 
   "4000", "\[InvisibleSpace]", "\<\" steps was \"\>", "\[InvisibleSpace]", 
   "9506", "\[InvisibleSpace]", "\<\".\"\>"}],
  SequenceForm[
  "-- The height difference after ", 4000, " steps was ", 9506, "."],
  Editable->False]], "Print",
 CellChangeTimes->{
  3.9124129220114737`*^9, 3.912413382314457*^9, 3.912413432322916*^9, 
   3.912413726484405*^9, {3.912414112962682*^9, 3.912414135634413*^9}, {
   3.9124142719767647`*^9, 3.912414288480474*^9}, 3.912414448319663*^9, 
   3.912414501451324*^9, 3.912414667543682*^9, {3.9124147302044573`*^9, 
   3.912414756303781*^9}, {3.912414808931624*^9, 3.912414833858685*^9}},
 CellLabel->
  "During evaluation of \
In[429]:=",ExpressionUUID->"074e25b6-17fe-45a0-9176-4d7be8582130"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Running for \"\>", "\[InvisibleSpace]", "8000", 
   "\[InvisibleSpace]", "\<\" steps...\"\>"}],
  SequenceForm["Running for ", 8000, " steps..."],
  Editable->False]], "Print",
 CellChangeTimes->{
  3.9124129220114737`*^9, 3.912413382314457*^9, 3.912413432322916*^9, 
   3.912413726484405*^9, {3.912414112962682*^9, 3.912414135634413*^9}, {
   3.9124142719767647`*^9, 3.912414288480474*^9}, 3.912414448319663*^9, 
   3.912414501451324*^9, 3.912414667543682*^9, {3.9124147302044573`*^9, 
   3.912414756303781*^9}, {3.912414808931624*^9, 3.912414834127819*^9}},
 CellLabel->
  "During evaluation of \
In[429]:=",ExpressionUUID->"7d77fe8b-ab57-47c5-9d90-92a7a96b0523"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Logging every \"\>", "\[InvisibleSpace]", "20000", 
   "\[InvisibleSpace]", "\<\" steps\"\>"}],
  SequenceForm["Logging every ", 20000, " steps"],
  Editable->False]], "Print",
 CellChangeTimes->{
  3.9124129220114737`*^9, 3.912413382314457*^9, 3.912413432322916*^9, 
   3.912413726484405*^9, {3.912414112962682*^9, 3.912414135634413*^9}, {
   3.9124142719767647`*^9, 3.912414288480474*^9}, 3.912414448319663*^9, 
   3.912414501451324*^9, 3.912414667543682*^9, {3.9124147302044573`*^9, 
   3.912414756303781*^9}, {3.912414808931624*^9, 3.912414834130933*^9}},
 CellLabel->
  "During evaluation of \
In[429]:=",ExpressionUUID->"fad3935a-b201-4d51-bc67-f05e14aa33fc"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"-- The height difference after \"\>", "\[InvisibleSpace]", 
   "8000", "\[InvisibleSpace]", "\<\" steps was \"\>", "\[InvisibleSpace]", 
   "9506", "\[InvisibleSpace]", "\<\".\"\>"}],
  SequenceForm[
  "-- The height difference after ", 8000, " steps was ", 9506, "."],
  Editable->False]], "Print",
 CellChangeTimes->{
  3.9124129220114737`*^9, 3.912413382314457*^9, 3.912413432322916*^9, 
   3.912413726484405*^9, {3.912414112962682*^9, 3.912414135634413*^9}, {
   3.9124142719767647`*^9, 3.912414288480474*^9}, 3.912414448319663*^9, 
   3.912414501451324*^9, 3.912414667543682*^9, {3.9124147302044573`*^9, 
   3.912414756303781*^9}, 3.912414808931624*^9, 3.912414852130447*^9},
 CellLabel->
  "During evaluation of \
In[429]:=",ExpressionUUID->"5d8543d5-8da5-4443-873b-bd08472bbf7e"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Running for \"\>", "\[InvisibleSpace]", "16000", 
   "\[InvisibleSpace]", "\<\" steps...\"\>"}],
  SequenceForm["Running for ", 16000, " steps..."],
  Editable->False]], "Print",
 CellChangeTimes->{
  3.9124129220114737`*^9, 3.912413382314457*^9, 3.912413432322916*^9, 
   3.912413726484405*^9, {3.912414112962682*^9, 3.912414135634413*^9}, {
   3.9124142719767647`*^9, 3.912414288480474*^9}, 3.912414448319663*^9, 
   3.912414501451324*^9, 3.912414667543682*^9, {3.9124147302044573`*^9, 
   3.912414756303781*^9}, 3.912414808931624*^9, 3.912414852691204*^9},
 CellLabel->
  "During evaluation of \
In[429]:=",ExpressionUUID->"8c456664-06c9-45a4-b90e-5bf4dff908ab"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Logging every \"\>", "\[InvisibleSpace]", "20000", 
   "\[InvisibleSpace]", "\<\" steps\"\>"}],
  SequenceForm["Logging every ", 20000, " steps"],
  Editable->False]], "Print",
 CellChangeTimes->{
  3.9124129220114737`*^9, 3.912413382314457*^9, 3.912413432322916*^9, 
   3.912413726484405*^9, {3.912414112962682*^9, 3.912414135634413*^9}, {
   3.9124142719767647`*^9, 3.912414288480474*^9}, 3.912414448319663*^9, 
   3.912414501451324*^9, 3.912414667543682*^9, {3.9124147302044573`*^9, 
   3.912414756303781*^9}, 3.912414808931624*^9, 3.9124148526940002`*^9},
 CellLabel->
  "During evaluation of \
In[429]:=",ExpressionUUID->"e81475ea-e674-4aaf-aa78-6e48327c7adc"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"-- The height difference after \"\>", "\[InvisibleSpace]", 
   "16000", "\[InvisibleSpace]", "\<\" steps was \"\>", "\[InvisibleSpace]", 
   "9506", "\[InvisibleSpace]", "\<\".\"\>"}],
  SequenceForm[
  "-- The height difference after ", 16000, " steps was ", 9506, "."],
  Editable->False]], "Print",
 CellChangeTimes->{
  3.9124129220114737`*^9, 3.912413382314457*^9, 3.912413432322916*^9, 
   3.912413726484405*^9, {3.912414112962682*^9, 3.912414135634413*^9}, {
   3.9124142719767647`*^9, 3.912414288480474*^9}, 3.912414448319663*^9, 
   3.912414501451324*^9, 3.912414667543682*^9, {3.9124147302044573`*^9, 
   3.912414756303781*^9}, 3.912414808931624*^9, 3.9124148956278477`*^9},
 CellLabel->
  "During evaluation of \
In[429]:=",ExpressionUUID->"912a99bd-56f0-47ec-9a45-fb830a19ba30"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Running for \"\>", "\[InvisibleSpace]", "32000", 
   "\[InvisibleSpace]", "\<\" steps...\"\>"}],
  SequenceForm["Running for ", 32000, " steps..."],
  Editable->False]], "Print",
 CellChangeTimes->{
  3.9124129220114737`*^9, 3.912413382314457*^9, 3.912413432322916*^9, 
   3.912413726484405*^9, {3.912414112962682*^9, 3.912414135634413*^9}, {
   3.9124142719767647`*^9, 3.912414288480474*^9}, 3.912414448319663*^9, 
   3.912414501451324*^9, 3.912414667543682*^9, {3.9124147302044573`*^9, 
   3.912414756303781*^9}, 3.912414808931624*^9, 3.912414896772156*^9},
 CellLabel->
  "During evaluation of \
In[429]:=",ExpressionUUID->"3955792e-6a61-47b1-8a83-66643ac4cb4c"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Logging every \"\>", "\[InvisibleSpace]", "20000", 
   "\[InvisibleSpace]", "\<\" steps\"\>"}],
  SequenceForm["Logging every ", 20000, " steps"],
  Editable->False]], "Print",
 CellChangeTimes->{
  3.9124129220114737`*^9, 3.912413382314457*^9, 3.912413432322916*^9, 
   3.912413726484405*^9, {3.912414112962682*^9, 3.912414135634413*^9}, {
   3.9124142719767647`*^9, 3.912414288480474*^9}, 3.912414448319663*^9, 
   3.912414501451324*^9, 3.912414667543682*^9, {3.9124147302044573`*^9, 
   3.912414756303781*^9}, 3.912414808931624*^9, 3.9124148967751007`*^9},
 CellLabel->
  "During evaluation of \
In[429]:=",ExpressionUUID->"8041e9d3-40de-429c-81e5-d8a569ac918e"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"-- The height difference after \"\>", "\[InvisibleSpace]", 
   "32000", "\[InvisibleSpace]", "\<\" steps was \"\>", "\[InvisibleSpace]", 
   "8878", "\[InvisibleSpace]", "\<\".\"\>"}],
  SequenceForm[
  "-- The height difference after ", 32000, " steps was ", 8878, "."],
  Editable->False]], "Print",
 CellChangeTimes->{
  3.9124129220114737`*^9, 3.912413382314457*^9, 3.912413432322916*^9, 
   3.912413726484405*^9, {3.912414112962682*^9, 3.912414135634413*^9}, {
   3.9124142719767647`*^9, 3.912414288480474*^9}, 3.912414448319663*^9, 
   3.912414501451324*^9, 3.912414667543682*^9, {3.9124147302044573`*^9, 
   3.912414756303781*^9}, 3.912414808931624*^9, 3.912414966034191*^9},
 CellLabel->
  "During evaluation of \
In[429]:=",ExpressionUUID->"73f38ab5-536b-4469-9637-94b980091967"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Running for \"\>", "\[InvisibleSpace]", "64000", 
   "\[InvisibleSpace]", "\<\" steps...\"\>"}],
  SequenceForm["Running for ", 64000, " steps..."],
  Editable->False]], "Print",
 CellChangeTimes->{
  3.9124129220114737`*^9, 3.912413382314457*^9, 3.912413432322916*^9, 
   3.912413726484405*^9, {3.912414112962682*^9, 3.912414135634413*^9}, {
   3.9124142719767647`*^9, 3.912414288480474*^9}, 3.912414448319663*^9, 
   3.912414501451324*^9, 3.912414667543682*^9, {3.9124147302044573`*^9, 
   3.912414756303781*^9}, 3.912414808931624*^9, 3.912414968308062*^9},
 CellLabel->
  "During evaluation of \
In[429]:=",ExpressionUUID->"0d443d62-0e63-4722-b1b7-deba12f3a191"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Logging every \"\>", "\[InvisibleSpace]", "20000", 
   "\[InvisibleSpace]", "\<\" steps\"\>"}],
  SequenceForm["Logging every ", 20000, " steps"],
  Editable->False]], "Print",
 CellChangeTimes->{
  3.9124129220114737`*^9, 3.912413382314457*^9, 3.912413432322916*^9, 
   3.912413726484405*^9, {3.912414112962682*^9, 3.912414135634413*^9}, {
   3.9124142719767647`*^9, 3.912414288480474*^9}, 3.912414448319663*^9, 
   3.912414501451324*^9, 3.912414667543682*^9, {3.9124147302044573`*^9, 
   3.912414756303781*^9}, 3.912414808931624*^9, 3.912414968310853*^9},
 CellLabel->
  "During evaluation of \
In[429]:=",ExpressionUUID->"5a7f47c9-d52a-4d8b-91a7-10c9fe81f727"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"-- The height difference after \"\>", "\[InvisibleSpace]", 
   "64000", "\[InvisibleSpace]", "\<\" steps was \"\>", "\[InvisibleSpace]", 
   "7638", "\[InvisibleSpace]", "\<\".\"\>"}],
  SequenceForm[
  "-- The height difference after ", 64000, " steps was ", 7638, "."],
  Editable->False]], "Print",
 CellChangeTimes->{
  3.9124129220114737`*^9, 3.912413382314457*^9, 3.912413432322916*^9, 
   3.912413726484405*^9, {3.912414112962682*^9, 3.912414135634413*^9}, {
   3.9124142719767647`*^9, 3.912414288480474*^9}, 3.912414448319663*^9, 
   3.912414501451324*^9, 3.912414667543682*^9, {3.9124147302044573`*^9, 
   3.912414756303781*^9}, 3.912414808931624*^9, 3.912415106425127*^9},
 CellLabel->
  "During evaluation of \
In[429]:=",ExpressionUUID->"902f528b-c9ba-431f-8699-90837ab28d6e"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Running for \"\>", "\[InvisibleSpace]", "128000", 
   "\[InvisibleSpace]", "\<\" steps...\"\>"}],
  SequenceForm["Running for ", 128000, " steps..."],
  Editable->False]], "Print",
 CellChangeTimes->{
  3.9124129220114737`*^9, 3.912413382314457*^9, 3.912413432322916*^9, 
   3.912413726484405*^9, {3.912414112962682*^9, 3.912414135634413*^9}, {
   3.9124142719767647`*^9, 3.912414288480474*^9}, 3.912414448319663*^9, 
   3.912414501451324*^9, 3.912414667543682*^9, {3.9124147302044573`*^9, 
   3.912414756303781*^9}, 3.912414808931624*^9, 3.912415111069091*^9},
 CellLabel->
  "During evaluation of \
In[429]:=",ExpressionUUID->"bbc4fe57-3363-4f16-85ae-de81c202aad0"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Logging every \"\>", "\[InvisibleSpace]", "20000", 
   "\[InvisibleSpace]", "\<\" steps\"\>"}],
  SequenceForm["Logging every ", 20000, " steps"],
  Editable->False]], "Print",
 CellChangeTimes->{
  3.9124129220114737`*^9, 3.912413382314457*^9, 3.912413432322916*^9, 
   3.912413726484405*^9, {3.912414112962682*^9, 3.912414135634413*^9}, {
   3.9124142719767647`*^9, 3.912414288480474*^9}, 3.912414448319663*^9, 
   3.912414501451324*^9, 3.912414667543682*^9, {3.9124147302044573`*^9, 
   3.912414756303781*^9}, 3.912414808931624*^9, 3.9124151110720463`*^9},
 CellLabel->
  "During evaluation of \
In[429]:=",ExpressionUUID->"9a029207-c78e-46d2-80dd-acb855169a09"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"-- The height difference after \"\>", "\[InvisibleSpace]", 
   "128000", "\[InvisibleSpace]", "\<\" steps was \"\>", "\[InvisibleSpace]", 
   "5512", "\[InvisibleSpace]", "\<\".\"\>"}],
  SequenceForm[
  "-- The height difference after ", 128000, " steps was ", 5512, "."],
  Editable->False]], "Print",
 CellChangeTimes->{
  3.9124129220114737`*^9, 3.912413382314457*^9, 3.912413432322916*^9, 
   3.912413726484405*^9, {3.912414112962682*^9, 3.912414135634413*^9}, {
   3.9124142719767647`*^9, 3.912414288480474*^9}, 3.912414448319663*^9, 
   3.912414501451324*^9, 3.912414667543682*^9, {3.9124147302044573`*^9, 
   3.912414756303781*^9}, 3.912414808931624*^9, 3.912415390586821*^9},
 CellLabel->
  "During evaluation of \
In[429]:=",ExpressionUUID->"c32df61f-89d8-4010-8f1f-29563288eb79"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Running for \"\>", "\[InvisibleSpace]", "256000", 
   "\[InvisibleSpace]", "\<\" steps...\"\>"}],
  SequenceForm["Running for ", 256000, " steps..."],
  Editable->False]], "Print",
 CellChangeTimes->{
  3.9124129220114737`*^9, 3.912413382314457*^9, 3.912413432322916*^9, 
   3.912413726484405*^9, {3.912414112962682*^9, 3.912414135634413*^9}, {
   3.9124142719767647`*^9, 3.912414288480474*^9}, 3.912414448319663*^9, 
   3.912414501451324*^9, 3.912414667543682*^9, {3.9124147302044573`*^9, 
   3.912414756303781*^9}, 3.912414808931624*^9, 3.912415400086726*^9},
 CellLabel->
  "During evaluation of \
In[429]:=",ExpressionUUID->"d192bba6-50cf-4711-9e9a-15aee38d5b89"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Logging every \"\>", "\[InvisibleSpace]", "20000", 
   "\[InvisibleSpace]", "\<\" steps\"\>"}],
  SequenceForm["Logging every ", 20000, " steps"],
  Editable->False]], "Print",
 CellChangeTimes->{
  3.9124129220114737`*^9, 3.912413382314457*^9, 3.912413432322916*^9, 
   3.912413726484405*^9, {3.912414112962682*^9, 3.912414135634413*^9}, {
   3.9124142719767647`*^9, 3.912414288480474*^9}, 3.912414448319663*^9, 
   3.912414501451324*^9, 3.912414667543682*^9, {3.9124147302044573`*^9, 
   3.912414756303781*^9}, 3.912414808931624*^9, 3.9124154000900087`*^9},
 CellLabel->
  "During evaluation of \
In[429]:=",ExpressionUUID->"b7e666e9-92b0-4472-bbac-94e05fb53ccd"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"-- The height difference after \"\>", "\[InvisibleSpace]", 
   "256000", "\[InvisibleSpace]", "\<\" steps was \"\>", "\[InvisibleSpace]", 
   "2662", "\[InvisibleSpace]", "\<\".\"\>"}],
  SequenceForm[
  "-- The height difference after ", 256000, " steps was ", 2662, "."],
  Editable->False]], "Print",
 CellChangeTimes->{
  3.9124129220114737`*^9, 3.912413382314457*^9, 3.912413432322916*^9, 
   3.912413726484405*^9, {3.912414112962682*^9, 3.912414135634413*^9}, {
   3.9124142719767647`*^9, 3.912414288480474*^9}, 3.912414448319663*^9, 
   3.912414501451324*^9, 3.912414667543682*^9, {3.9124147302044573`*^9, 
   3.912414756303781*^9}, 3.912414808931624*^9, 3.9124159510999527`*^9},
 CellLabel->
  "During evaluation of \
In[429]:=",ExpressionUUID->"31c9dab0-5003-49ec-bd3c-1db79e7f464f"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Running for \"\>", "\[InvisibleSpace]", "512000", 
   "\[InvisibleSpace]", "\<\" steps...\"\>"}],
  SequenceForm["Running for ", 512000, " steps..."],
  Editable->False]], "Print",
 CellChangeTimes->{
  3.9124129220114737`*^9, 3.912413382314457*^9, 3.912413432322916*^9, 
   3.912413726484405*^9, {3.912414112962682*^9, 3.912414135634413*^9}, {
   3.9124142719767647`*^9, 3.912414288480474*^9}, 3.912414448319663*^9, 
   3.912414501451324*^9, 3.912414667543682*^9, {3.9124147302044573`*^9, 
   3.912414756303781*^9}, 3.912414808931624*^9, 3.912415969422639*^9},
 CellLabel->
  "During evaluation of \
In[429]:=",ExpressionUUID->"2b5ae421-52cf-446c-966c-326c02c448f5"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Logging every \"\>", "\[InvisibleSpace]", "20000", 
   "\[InvisibleSpace]", "\<\" steps\"\>"}],
  SequenceForm["Logging every ", 20000, " steps"],
  Editable->False]], "Print",
 CellChangeTimes->{
  3.9124129220114737`*^9, 3.912413382314457*^9, 3.912413432322916*^9, 
   3.912413726484405*^9, {3.912414112962682*^9, 3.912414135634413*^9}, {
   3.9124142719767647`*^9, 3.912414288480474*^9}, 3.912414448319663*^9, 
   3.912414501451324*^9, 3.912414667543682*^9, {3.9124147302044573`*^9, 
   3.912414756303781*^9}, 3.912414808931624*^9, 3.9124159694259872`*^9},
 CellLabel->
  "During evaluation of \
In[429]:=",ExpressionUUID->"a0c7e168-ddcc-43a3-af76-cf29585bd920"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"-- The height difference after \"\>", "\[InvisibleSpace]", 
   "512000", "\[InvisibleSpace]", "\<\" steps was \"\>", "\[InvisibleSpace]", 
   "528", "\[InvisibleSpace]", "\<\".\"\>"}],
  SequenceForm[
  "-- The height difference after ", 512000, " steps was ", 528, "."],
  Editable->False]], "Print",
 CellChangeTimes->{
  3.9124129220114737`*^9, 3.912413382314457*^9, 3.912413432322916*^9, 
   3.912413726484405*^9, {3.912414112962682*^9, 3.912414135634413*^9}, {
   3.9124142719767647`*^9, 3.912414288480474*^9}, 3.912414448319663*^9, 
   3.912414501451324*^9, 3.912414667543682*^9, {3.9124147302044573`*^9, 
   3.912414756303781*^9}, 3.912414808931624*^9, 3.912417070426071*^9},
 CellLabel->
  "During evaluation of \
In[429]:=",ExpressionUUID->"41b3afc5-49e2-49b5-b53a-20ede96cca42"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Running for \"\>", "\[InvisibleSpace]", "1024000", 
   "\[InvisibleSpace]", "\<\" steps...\"\>"}],
  SequenceForm["Running for ", 1024000, " steps..."],
  Editable->False]], "Print",
 CellChangeTimes->{
  3.9124129220114737`*^9, 3.912413382314457*^9, 3.912413432322916*^9, 
   3.912413726484405*^9, {3.912414112962682*^9, 3.912414135634413*^9}, {
   3.9124142719767647`*^9, 3.912414288480474*^9}, 3.912414448319663*^9, 
   3.912414501451324*^9, 3.912414667543682*^9, {3.9124147302044573`*^9, 
   3.912414756303781*^9}, 3.912414808931624*^9, 3.912417107751834*^9},
 CellLabel->
  "During evaluation of \
In[429]:=",ExpressionUUID->"61f50e41-4102-4807-874b-7da40b50f749"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Logging every \"\>", "\[InvisibleSpace]", "20000", 
   "\[InvisibleSpace]", "\<\" steps\"\>"}],
  SequenceForm["Logging every ", 20000, " steps"],
  Editable->False]], "Print",
 CellChangeTimes->{
  3.9124129220114737`*^9, 3.912413382314457*^9, 3.912413432322916*^9, 
   3.912413726484405*^9, {3.912414112962682*^9, 3.912414135634413*^9}, {
   3.9124142719767647`*^9, 3.912414288480474*^9}, 3.912414448319663*^9, 
   3.912414501451324*^9, 3.912414667543682*^9, {3.9124147302044573`*^9, 
   3.912414756303781*^9}, 3.912414808931624*^9, 3.912417107755316*^9},
 CellLabel->
  "During evaluation of \
In[429]:=",ExpressionUUID->"81d1fd93-f271-432a-bbac-c26e7a074213"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"-- The height difference after \"\>", "\[InvisibleSpace]", 
   "1024000", "\[InvisibleSpace]", "\<\" steps was \"\>", "\[InvisibleSpace]",
    "38", "\[InvisibleSpace]", "\<\".\"\>"}],
  SequenceForm[
  "-- The height difference after ", 1024000, " steps was ", 38, "."],
  Editable->False]], "Print",
 CellChangeTimes->{
  3.9124129220114737`*^9, 3.912413382314457*^9, 3.912413432322916*^9, 
   3.912413726484405*^9, {3.912414112962682*^9, 3.912414135634413*^9}, {
   3.9124142719767647`*^9, 3.912414288480474*^9}, 3.912414448319663*^9, 
   3.912414501451324*^9, 3.912414667543682*^9, {3.9124147302044573`*^9, 
   3.912414756303781*^9}, 3.912414808931624*^9, 3.912419255168951*^9},
 CellLabel->
  "During evaluation of \
In[429]:=",ExpressionUUID->"81c8d74c-cea0-4901-80ba-84972b68ef0b"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Running for \"\>", "\[InvisibleSpace]", "2048000", 
   "\[InvisibleSpace]", "\<\" steps...\"\>"}],
  SequenceForm["Running for ", 2048000, " steps..."],
  Editable->False]], "Print",
 CellChangeTimes->{
  3.9124129220114737`*^9, 3.912413382314457*^9, 3.912413432322916*^9, 
   3.912413726484405*^9, {3.912414112962682*^9, 3.912414135634413*^9}, {
   3.9124142719767647`*^9, 3.912414288480474*^9}, 3.912414448319663*^9, 
   3.912414501451324*^9, 3.912414667543682*^9, {3.9124147302044573`*^9, 
   3.912414756303781*^9}, 3.912414808931624*^9, 3.912419329947432*^9},
 CellLabel->
  "During evaluation of \
In[429]:=",ExpressionUUID->"c42251f0-90ee-4078-a67b-76b315bf5e80"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Logging every \"\>", "\[InvisibleSpace]", "20480", 
   "\[InvisibleSpace]", "\<\" steps\"\>"}],
  SequenceForm["Logging every ", 20480, " steps"],
  Editable->False]], "Print",
 CellChangeTimes->{
  3.9124129220114737`*^9, 3.912413382314457*^9, 3.912413432322916*^9, 
   3.912413726484405*^9, {3.912414112962682*^9, 3.912414135634413*^9}, {
   3.9124142719767647`*^9, 3.912414288480474*^9}, 3.912414448319663*^9, 
   3.912414501451324*^9, 3.912414667543682*^9, {3.9124147302044573`*^9, 
   3.912414756303781*^9}, 3.912414808931624*^9, 3.9124193299515047`*^9},
 CellLabel->
  "During evaluation of \
In[429]:=",ExpressionUUID->"7c27a79f-0a5d-4748-b93a-42dba9dffd28"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"-- The height difference after \"\>", "\[InvisibleSpace]", 
   "981377", "\[InvisibleSpace]", "\<\" steps was \"\>", "\[InvisibleSpace]", 
   "0", "\[InvisibleSpace]", "\<\".\"\>"}],
  SequenceForm[
  "-- The height difference after ", 981377, " steps was ", 0, "."],
  Editable->False]], "Print",
 CellChangeTimes->{
  3.9124129220114737`*^9, 3.912413382314457*^9, 3.912413432322916*^9, 
   3.912413726484405*^9, {3.912414112962682*^9, 3.912414135634413*^9}, {
   3.9124142719767647`*^9, 3.912414288480474*^9}, 3.912414448319663*^9, 
   3.912414501451324*^9, 3.912414667543682*^9, {3.9124147302044573`*^9, 
   3.912414756303781*^9}, 3.912414808931624*^9, 3.912421408537613*^9},
 CellLabel->
  "During evaluation of \
In[429]:=",ExpressionUUID->"276daed3-ce8c-4766-ad81-8f5e0e4db71d"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"The chain took \"\>", "\[InvisibleSpace]", "2048000", 
   "\[InvisibleSpace]", "\<\" steps to converge. Here are the results:\"\>"}],
  
  SequenceForm[
  "The chain took ", 2048000, " steps to converge. Here are the results:"],
  Editable->False]], "Print",
 CellChangeTimes->{
  3.9124129220114737`*^9, 3.912413382314457*^9, 3.912413432322916*^9, 
   3.912413726484405*^9, {3.912414112962682*^9, 3.912414135634413*^9}, {
   3.9124142719767647`*^9, 3.912414288480474*^9}, 3.912414448319663*^9, 
   3.912414501451324*^9, 3.912414667543682*^9, {3.9124147302044573`*^9, 
   3.912414756303781*^9}, 3.912414808931624*^9, 3.9124214085419703`*^9},
 CellLabel->
  "During evaluation of \
In[429]:=",ExpressionUUID->"0b8b7123-3ede-4d62-9cb3-2387bfcdb046"]
}, Open  ]]
}, Open  ]],

Cell["Finally, the output for the cube of size 15 :", "Text",
 CellChangeTimes->{{3.9124457307074623`*^9, 
  3.912445748355562*^9}},ExpressionUUID->"4fb8cb37-2a12-47da-b2ff-\
cd1b9c17dba2"],

Cell[BoxData[
 RowBox[{
  RowBox[{"outCube15", " ", "=", " ", 
   RowBox[{"Import", "[", 
    RowBox[{"StringJoin", "[", 
     RowBox[{
     "logDir", ",", " ", 
      "\"\<coupling_15_samples/Sun 24 Dec 2023 21:13:28.mx\>\""}], "]"}], 
    "]"}]}], ";"}]], "Code",
 CellChangeTimes->{{3.912443107223297*^9, 3.912443134657501*^9}, {
  3.9124431746889563`*^9, 3.9124432064471292`*^9}},
 CellLabel->"In[54]:=",ExpressionUUID->"133e8dfb-481b-420c-aaff-48447d5a9a0d"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"cubeLayers", "[", "outCube15", "]"}], "\n", 
 RowBox[{"cubeSlicesAllAxesSimultaneously", "[", "outCube15", "]"}], "\n", 
 RowBox[{"cubeSlicesAllAxesSeparately", "[", "outCube15", "]"}]}], "Code",
 CellChangeTimes->{{3.912421610557783*^9, 3.91242162992883*^9}, {
  3.912443214832703*^9, 3.912443266269453*^9}},
 CellLabel->"In[55]:=",ExpressionUUID->"41b7f8ba-34ea-4163-85b2-17ab13b150fc"],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`i$$ = 1, Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{
      Hold[$CellContext`i$$], 1, 8, 1}}, Typeset`size$$ = {
    416., {181., 185.}}, Typeset`update$$ = 0, Typeset`initDone$$, 
    Typeset`skipInitDone$$ = True}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, "Variables" :> {$CellContext`i$$ = 1}, 
      "ControllerVariables" :> {}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, 
      "Body" :> $CellContext`displayCube[$CellContext`dim$14123, 
        Part[CompressedData["
1:eJyNl2ty4yAQhOWXLBCQM+yV9gi5wN7/30piHt0DcaVSTrmNwHz0PPCf739/
vx/LsnzBa7ndH8/X+t5S3kttrCqrwmpnlVklVttHtbJ6sXqyerC6s7qxWj4Q
HZrGWhUlo0XGLrWXHcaOzzKrhE8O6n28B7X29fu8Y6eX8n2fREDBKvL+7FFx
IuFrQHSuakR9b32s6+NvU4pzn+fnojqFvFcK+VyZOqvxVnjy2Her/qTw7j/6
O4+6mUdKdK198cuYjl/znELeZ923s/YV4H9OhQlr8VnHTlvkJUIlmsfzPI8o
6vSsaxE++etExteMtmuk892zMkcr6pyaRijwmnq7nxTPaZq/88qAeWS0Z9SB
A7VofErMokuHJseKR5mdgKu8twrPnry1+Pzk3l4UIZ4p1od6Nat1Qy2AM7Ic
w936DOMtEGU9n22P12yNugznCW7TqI9kW8Gz2R2Z1uff8lllwOqAjEMU1lKB
2olMZXwWCNRt4au+psxI+J1QkX/Zj/DZcFaUOz1y9Bs1rnynQlThBflL9eaI
ZyQ48xfdLonPcbNaljWPkrsSPBs6LHanFeKDq3eR3IcTTo3P2jyiejl4rRUJ
87UxUd0o289ah9VuVd19CVkXag7n68vqsfUj5G0eS50X8zBBBrrr4B5WFfcI
Oo7y9H7kcVmVSNbmzhbvV8MtCPmedgrcYQv1I/PXaiPHc9GTnGgltmzv+3kj
YaurddyLV3uZMIXeHTrf5F5HtyDqobHDst9WV7h6h3pF2qjpBqH91/I13DeQ
qMF9Mg+3zVYD341vPXf284HV+Ixnc8M6LGiIEq9moZrbDO+/w30jRl3wKBLF
3wvh7h104A9+h/gO+fy5HwUdKkPIoxB1waNAFH4//AdgU4g2
         "], 
         Span[$CellContext`i$$, -$CellContext`i$$], 
         Span[$CellContext`i$$, -$CellContext`i$$], 
         Span[$CellContext`i$$, -$CellContext`i$$]], "DeepSeaColors"], 
      "Specifications" :> {{$CellContext`i$$, 1, 8, 1}}, "Options" :> {}, 
      "DefaultOptions" :> {}],
     ImageSizeCache->{462., {224.6875, 230.3125}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{3.9124216304565353`*^9, 3.912421789055585*^9, 
  3.912443216129654*^9, 3.9124432666758337`*^9, 3.912446792842936*^9, 
  3.9124472811518383`*^9},
 CellLabel->"Out[55]=",ExpressionUUID->"8ad6fbce-0d96-4aa3-8405-ee746e486160"],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`i$$ = 1, Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{
      Hold[$CellContext`i$$], 1, 15, 1}}, Typeset`size$$ = {
    551., {267.6875, 273.3125}}, Typeset`update$$ = 0, Typeset`initDone$$, 
    Typeset`skipInitDone$$ = True}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, "Variables" :> {$CellContext`i$$ = 1}, 
      "ControllerVariables" :> {}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, 
      "Body" :> \
$CellContext`cubeSlicesAllAxesSimultaneouslyGrid[CompressedData["
1:eJyNl2ty4yAQhOWXLBCQM+yV9gi5wN7/30piHt0DcaVSTrmNwHz0PPCf739/
vx/LsnzBa7ndH8/X+t5S3kttrCqrwmpnlVklVttHtbJ6sXqyerC6s7qxWj4Q
HZrGWhUlo0XGLrWXHcaOzzKrhE8O6n28B7X29fu8Y6eX8n2fREDBKvL+7FFx
IuFrQHSuakR9b32s6+NvU4pzn+fnojqFvFcK+VyZOqvxVnjy2Her/qTw7j/6
O4+6mUdKdK198cuYjl/znELeZ923s/YV4H9OhQlr8VnHTlvkJUIlmsfzPI8o
6vSsaxE++etExteMtmuk892zMkcr6pyaRijwmnq7nxTPaZq/88qAeWS0Z9SB
A7VofErMokuHJseKR5mdgKu8twrPnry1+Pzk3l4UIZ4p1od6Nat1Qy2AM7Ic
w936DOMtEGU9n22P12yNugznCW7TqI9kW8Gz2R2Z1uff8lllwOqAjEMU1lKB
2olMZXwWCNRt4au+psxI+J1QkX/Zj/DZcFaUOz1y9Bs1rnynQlThBflL9eaI
ZyQ48xfdLonPcbNaljWPkrsSPBs6LHanFeKDq3eR3IcTTo3P2jyiejl4rRUJ
87UxUd0o289ah9VuVd19CVkXag7n68vqsfUj5G0eS50X8zBBBrrr4B5WFfcI
Oo7y9H7kcVmVSNbmzhbvV8MtCPmedgrcYQv1I/PXaiPHc9GTnGgltmzv+3kj
YaurddyLV3uZMIXeHTrf5F5HtyDqobHDst9WV7h6h3pF2qjpBqH91/I13DeQ
qMF9Mg+3zVYD341vPXf284HV+Ixnc8M6LGiIEq9moZrbDO+/w30jRl3wKBLF
3wvh7h104A9+h/gO+fy5HwUdKkPIoxB1waNAFH4//AdgU4g2
        
        "], $CellContext`i$$], 
      "Specifications" :> {{$CellContext`i$$, 1, 15, 1}}, "Options" :> {}, 
      "DefaultOptions" :> {}],
     ImageSizeCache->{597., {312.6875, 318.3125}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{3.9124216304565353`*^9, 3.912421789055585*^9, 
  3.912443216129654*^9, 3.9124432666758337`*^9, 3.912446792842936*^9, 
  3.912447281552691*^9},
 CellLabel->"Out[56]=",ExpressionUUID->"a2ce7699-b2ad-4d98-9998-6bac2f8c84e5"],

Cell[BoxData[
 TagBox[GridBox[{
    {
     TagBox[
      StyleBox[
       DynamicModuleBox[{$CellContext`i$$ = 1, Typeset`show$$ = True, 
        Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
        Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
        "\"untitled\"", Typeset`specs$$ = {{
          Hold[$CellContext`i$$], 1, 15, 1}}, Typeset`size$$ = {
        180., {267.3875, 273.0125}}, Typeset`update$$ = 0, Typeset`initDone$$,
         Typeset`skipInitDone$$ = True}, 
        DynamicBox[Manipulate`ManipulateBoxes[
         1, StandardForm, "Variables" :> {$CellContext`i$$ = 1}, 
          "ControllerVariables" :> {}, 
          "OtherVariables" :> {
           Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
            Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
            Typeset`specs$$, Typeset`size$$, Typeset`update$$, 
            Typeset`initDone$$, Typeset`skipInitDone$$}, 
          "Body" :> (
           Part[$CellContext`args$14171, 
              1] = {$CellContext`i$$}; \
$CellContext`sliceGridWithHeight[CompressedData["
1:eJyNl2ty4yAQhOWXLBCQM+yV9gi5wN7/30piHt0DcaVSTrmNwHz0PPCf739/
vx/LsnzBa7ndH8/X+t5S3kttrCqrwmpnlVklVttHtbJ6sXqyerC6s7qxWj4Q
HZrGWhUlo0XGLrWXHcaOzzKrhE8O6n28B7X29fu8Y6eX8n2fREDBKvL+7FFx
IuFrQHSuakR9b32s6+NvU4pzn+fnojqFvFcK+VyZOqvxVnjy2Her/qTw7j/6
O4+6mUdKdK198cuYjl/znELeZ923s/YV4H9OhQlr8VnHTlvkJUIlmsfzPI8o
6vSsaxE++etExteMtmuk892zMkcr6pyaRijwmnq7nxTPaZq/88qAeWS0Z9SB
A7VofErMokuHJseKR5mdgKu8twrPnry1+Pzk3l4UIZ4p1od6Nat1Qy2AM7Ic
w936DOMtEGU9n22P12yNugznCW7TqI9kW8Gz2R2Z1uff8lllwOqAjEMU1lKB
2olMZXwWCNRt4au+psxI+J1QkX/Zj/DZcFaUOz1y9Bs1rnynQlThBflL9eaI
ZyQ48xfdLonPcbNaljWPkrsSPBs6LHanFeKDq3eR3IcTTo3P2jyiejl4rRUJ
87UxUd0o289ah9VuVd19CVkXag7n68vqsfUj5G0eS50X8zBBBrrr4B5WFfcI
Oo7y9H7kcVmVSNbmzhbvV8MtCPmedgrcYQv1I/PXaiPHc9GTnGgltmzv+3kj
YaurddyLV3uZMIXeHTrf5F5HtyDqobHDst9WV7h6h3pF2qjpBqH91/I13DeQ
qMF9Mg+3zVYD341vPXf284HV+Ixnc8M6LGiIEq9moZrbDO+/w30jRl3wKBLF
3wvh7h104A9+h/gO+fy5HwUdKkPIoxB1waNAFH4//AdgU4g2
             
             "], $CellContext`args$14171]), 
          "Specifications" :> {{$CellContext`i$$, 1, 15, 1}}, "Options" :> {},
           "DefaultOptions" :> {}],
         ImageSizeCache->{243., {312.6875, 318.3125}},
         SingleEvaluation->True],
        Deinitialization:>None,
        DynamicModuleValues:>{},
        SynchronousInitialization->True,
        UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
        UnsavedVariables:>{Typeset`initDone$$},
        UntrackedVariables:>{Typeset`size$$}], "Manipulate",
       Deployed->True,
       StripOnInput->False],
      Manipulate`InterpretManipulate[1]], 
     TagBox[
      StyleBox[
       DynamicModuleBox[{$CellContext`i$$ = 1, Typeset`show$$ = True, 
        Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
        Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
        "\"untitled\"", Typeset`specs$$ = {{
          Hold[$CellContext`i$$], 1, 15, 1}}, Typeset`size$$ = {
        180., {267.3875, 273.0125}}, Typeset`update$$ = 0, Typeset`initDone$$,
         Typeset`skipInitDone$$ = True}, 
        DynamicBox[Manipulate`ManipulateBoxes[
         1, StandardForm, "Variables" :> {$CellContext`i$$ = 1}, 
          "ControllerVariables" :> {}, 
          "OtherVariables" :> {
           Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
            Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
            Typeset`specs$$, Typeset`size$$, Typeset`update$$, 
            Typeset`initDone$$, Typeset`skipInitDone$$}, 
          "Body" :> (
           Part[$CellContext`args$14172, 
              2] = {$CellContext`i$$}; \
$CellContext`sliceGridWithHeight[CompressedData["
1:eJyNl2ty4yAQhOWXLBCQM+yV9gi5wN7/30piHt0DcaVSTrmNwHz0PPCf739/
vx/LsnzBa7ndH8/X+t5S3kttrCqrwmpnlVklVttHtbJ6sXqyerC6s7qxWj4Q
HZrGWhUlo0XGLrWXHcaOzzKrhE8O6n28B7X29fu8Y6eX8n2fREDBKvL+7FFx
IuFrQHSuakR9b32s6+NvU4pzn+fnojqFvFcK+VyZOqvxVnjy2Her/qTw7j/6
O4+6mUdKdK198cuYjl/znELeZ923s/YV4H9OhQlr8VnHTlvkJUIlmsfzPI8o
6vSsaxE++etExteMtmuk892zMkcr6pyaRijwmnq7nxTPaZq/88qAeWS0Z9SB
A7VofErMokuHJseKR5mdgKu8twrPnry1+Pzk3l4UIZ4p1od6Nat1Qy2AM7Ic
w936DOMtEGU9n22P12yNugznCW7TqI9kW8Gz2R2Z1uff8lllwOqAjEMU1lKB
2olMZXwWCNRt4au+psxI+J1QkX/Zj/DZcFaUOz1y9Bs1rnynQlThBflL9eaI
ZyQ48xfdLonPcbNaljWPkrsSPBs6LHanFeKDq3eR3IcTTo3P2jyiejl4rRUJ
87UxUd0o289ah9VuVd19CVkXag7n68vqsfUj5G0eS50X8zBBBrrr4B5WFfcI
Oo7y9H7kcVmVSNbmzhbvV8MtCPmedgrcYQv1I/PXaiPHc9GTnGgltmzv+3kj
YaurddyLV3uZMIXeHTrf5F5HtyDqobHDst9WV7h6h3pF2qjpBqH91/I13DeQ
qMF9Mg+3zVYD341vPXf284HV+Ixnc8M6LGiIEq9moZrbDO+/w30jRl3wKBLF
3wvh7h104A9+h/gO+fy5HwUdKkPIoxB1waNAFH4//AdgU4g2
             
             "], $CellContext`args$14172]), 
          "Specifications" :> {{$CellContext`i$$, 1, 15, 1}}, "Options" :> {},
           "DefaultOptions" :> {}],
         ImageSizeCache->{243., {312.6875, 318.3125}},
         SingleEvaluation->True],
        Deinitialization:>None,
        DynamicModuleValues:>{},
        SynchronousInitialization->True,
        UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
        UnsavedVariables:>{Typeset`initDone$$},
        UntrackedVariables:>{Typeset`size$$}], "Manipulate",
       Deployed->True,
       StripOnInput->False],
      Manipulate`InterpretManipulate[1]], 
     TagBox[
      StyleBox[
       DynamicModuleBox[{$CellContext`i$$ = 1, Typeset`show$$ = True, 
        Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
        Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
        "\"untitled\"", Typeset`specs$$ = {{
          Hold[$CellContext`i$$], 1, 15, 1}}, Typeset`size$$ = {
        180., {267.3875, 273.0125}}, Typeset`update$$ = 0, Typeset`initDone$$,
         Typeset`skipInitDone$$ = True}, 
        DynamicBox[Manipulate`ManipulateBoxes[
         1, StandardForm, "Variables" :> {$CellContext`i$$ = 1}, 
          "ControllerVariables" :> {}, 
          "OtherVariables" :> {
           Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
            Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
            Typeset`specs$$, Typeset`size$$, Typeset`update$$, 
            Typeset`initDone$$, Typeset`skipInitDone$$}, 
          "Body" :> (
           Part[$CellContext`args$14173, 
              3] = {$CellContext`i$$}; \
$CellContext`sliceGridWithHeight[CompressedData["
1:eJyNl2ty4yAQhOWXLBCQM+yV9gi5wN7/30piHt0DcaVSTrmNwHz0PPCf739/
vx/LsnzBa7ndH8/X+t5S3kttrCqrwmpnlVklVttHtbJ6sXqyerC6s7qxWj4Q
HZrGWhUlo0XGLrWXHcaOzzKrhE8O6n28B7X29fu8Y6eX8n2fREDBKvL+7FFx
IuFrQHSuakR9b32s6+NvU4pzn+fnojqFvFcK+VyZOqvxVnjy2Her/qTw7j/6
O4+6mUdKdK198cuYjl/znELeZ923s/YV4H9OhQlr8VnHTlvkJUIlmsfzPI8o
6vSsaxE++etExteMtmuk892zMkcr6pyaRijwmnq7nxTPaZq/88qAeWS0Z9SB
A7VofErMokuHJseKR5mdgKu8twrPnry1+Pzk3l4UIZ4p1od6Nat1Qy2AM7Ic
w936DOMtEGU9n22P12yNugznCW7TqI9kW8Gz2R2Z1uff8lllwOqAjEMU1lKB
2olMZXwWCNRt4au+psxI+J1QkX/Zj/DZcFaUOz1y9Bs1rnynQlThBflL9eaI
ZyQ48xfdLonPcbNaljWPkrsSPBs6LHanFeKDq3eR3IcTTo3P2jyiejl4rRUJ
87UxUd0o289ah9VuVd19CVkXag7n68vqsfUj5G0eS50X8zBBBrrr4B5WFfcI
Oo7y9H7kcVmVSNbmzhbvV8MtCPmedgrcYQv1I/PXaiPHc9GTnGgltmzv+3kj
YaurddyLV3uZMIXeHTrf5F5HtyDqobHDst9WV7h6h3pF2qjpBqH91/I13DeQ
qMF9Mg+3zVYD341vPXf284HV+Ixnc8M6LGiIEq9moZrbDO+/w30jRl3wKBLF
3wvh7h104A9+h/gO+fy5HwUdKkPIoxB1waNAFH4//AdgU4g2
             
             "], $CellContext`args$14173]), 
          "Specifications" :> {{$CellContext`i$$, 1, 15, 1}}, "Options" :> {},
           "DefaultOptions" :> {}],
         ImageSizeCache->{243., {312.6875, 318.3125}},
         SingleEvaluation->True],
        Deinitialization:>None,
        DynamicModuleValues:>{},
        SynchronousInitialization->True,
        UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
        UnsavedVariables:>{Typeset`initDone$$},
        UntrackedVariables:>{Typeset`size$$}], "Manipulate",
       Deployed->True,
       StripOnInput->False],
      Manipulate`InterpretManipulate[1]]}
   },
   AutoDelete->False,
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Grid"]], "Output",
 CellChangeTimes->{3.9124216304565353`*^9, 3.912421789055585*^9, 
  3.912443216129654*^9, 3.9124432666758337`*^9, 3.912446792842936*^9, 
  3.9124472817775393`*^9},
 CellLabel->"Out[57]=",ExpressionUUID->"039e8e54-7c60-432c-bccf-d66bb6f35425"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"viewChangeSteps", "[", 
        RowBox[{
        "n_", ",", " ", "maxGrid_", ",", " ", "minGrid_", ",", " ", 
         "steps_"}], "]"}], " ", ":=", " ", 
       RowBox[{
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"gridsList", " ", "=", " ", 
            RowBox[{"NestList", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"oneStep", "[", 
                RowBox[{"n", ",", " ", 
                 RowBox[{"Sequence", " ", "@@", " ", "#"}]}], "]"}], " ", 
               "&"}], ",", " ", 
              RowBox[{"{", 
               RowBox[{"maxGrid", ",", " ", "minGrid"}], "}"}], ",", " ", 
              "steps"}], "]"}]}], ";", " ", "\n", 
           RowBox[{"Manipulate", "[", 
            RowBox[{
             RowBox[{"Grid", "[", 
              RowBox[{"{", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"displayCube", "[", 
                  RowBox[{"n", ",", " ", 
                   RowBox[{
                    RowBox[{"gridsList", "[", 
                    RowBox[{"[", "k", "]"}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], "]"}], ",", " ", 
                 RowBox[{"displayCube", "[", 
                  RowBox[{"n", ",", " ", 
                   RowBox[{
                    RowBox[{"gridsList", "[", 
                    RowBox[{"[", "k", "]"}], "]"}], "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], "]"}]}], "}"}], "}"}], 
              "]"}], ",", 
             RowBox[{"{", 
              RowBox[{"k", ",", "1", ",", "steps", ",", "1"}], "}"}]}], 
            "]"}]}], ")"}], "\n", "\n", 
         RowBox[{"checkHeightDifference", "[", 
          RowBox[{"n_", ",", " ", "maxGrid_", ",", " ", "minGrid_"}], "]"}]}],
         " ", ":=", " ", 
        RowBox[{"Total", "[", 
         RowBox[{
          RowBox[{"Table", "[", 
           RowBox[{
            RowBox[{"Abs", "[", 
             RowBox[{
              RowBox[{"maxGrid", "[", 
               RowBox[{"[", 
                RowBox[{"i", ",", " ", "j", ",", " ", "k"}], "]"}], "]"}], 
              " ", "-", " ", 
              RowBox[{"minGrid", "[", 
               RowBox[{"[", 
                RowBox[{"i", ",", " ", "j", ",", " ", "k"}], "]"}], "]"}]}], 
             "]"}], ",", " ", 
            RowBox[{"{", 
             RowBox[{"i", ",", " ", "2", ",", " ", 
              RowBox[{"n", " ", "-", " ", "1"}]}], "}"}], ",", " ", 
            RowBox[{"{", 
             RowBox[{"j", ",", " ", "2", ",", " ", 
              RowBox[{"n", " ", "-", " ", "1"}]}], "}"}]}], "]"}], ",", " ", 
          RowBox[{"{", 
           RowBox[{"k", ",", " ", "2", ",", " ", 
            RowBox[{"n", " ", "-", " ", "1"}]}], "}"}]}], "]"}]}]}], ",", " ",
       "2"}], "]"}], "\n", "\n", 
    RowBox[{"viewAfterSteps", "[", 
     RowBox[{
     "n_", ",", " ", "maxGrid_", ",", " ", "minGrid_", ",", " ", "steps_", 
      ",", " ", "logInterval_", ",", " ", "prevStep_"}], "]"}]}], " ", ":=", 
   " ", 
   RowBox[{
    RowBox[{
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"step", " ", "=", " ", "prevStep"}], "}"}], ",", "\n", "  ", 
       RowBox[{
        RowBox[{"PrintTemporary", "[", 
         RowBox[{"ProgressIndicator", "[", 
          RowBox[{"Dynamic", "[", 
           RowBox[{"step", "/", 
            RowBox[{"(", 
             RowBox[{"steps", " ", "+", " ", "prevStep"}], ")"}]}], "]"}], 
          "]"}], "]"}], ";", " ", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"time", ",", " ", "finalGrids"}], "}"}], " ", "=", " ", 
         RowBox[{"AbsoluteTiming", "[", 
          RowBox[{"Catch", "[", 
           RowBox[{"Nest", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"(", "\n", "  ", 
               RowBox[{
                RowBox[{"If", "[", 
                 RowBox[{
                  RowBox[{
                   RowBox[{
                    RowBox[{"Mod", "[", 
                    RowBox[{"step", ",", " ", "logInterval"}], "]"}], " ", "==",
                     " ", "0"}], " ", "||", " ", 
                   RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], " ", "==", " ", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}]}], ",", " ", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"Export", "[", 
                    RowBox[{
                    RowBox[{"StringJoin", "[", 
                    RowBox[{
                    RowBox[{"ToString", "[", 
                    RowBox[{"NotebookDirectory", "[", "]"}], "]"}], ",", " ", 
                    "\"\<output files/coupling_\>\"", ",", " ", 
                    RowBox[{"ToString", "[", "n", "]"}], ",", " ", 
                    "\"\</log_\>\"", ",", " ", 
                    RowBox[{"ToString", "[", "step", "]"}], ",", " ", 
                    "\"\<.mx\>\""}], "]"}], ",", " ", "#"}], "]"}], ";", " ", 
                    "\n", "    ", 
                    RowBox[{"Print", "[", 
                    RowBox[{"checkHeightDifference", "[", 
                    RowBox[{"n", ",", " ", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", " ", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], "]"}], "]"}]}], ")"}]}],
                  "]"}], ";", " ", "\n", "  ", 
                RowBox[{"If", "[", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], " ", "==", " ", 
                   RowBox[{"#", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], ",", " ", 
                  RowBox[{"Throw", "[", "#", "]"}]}], "]"}], ";", " ", "\n", 
                "  ", 
                RowBox[{"step", "++"}], ";", " ", "\n", "  ", 
                RowBox[{"oneStep", "[", 
                 RowBox[{"n", ",", " ", 
                  RowBox[{"Sequence", " ", "@@", " ", "#"}]}], "]"}]}], ")"}],
               " ", "&"}], ",", " ", "\n", "  ", 
             RowBox[{"{", 
              RowBox[{"maxGrid", ",", " ", "minGrid"}], "}"}], ",", " ", 
             RowBox[{"steps", " ", "+", " ", "1"}]}], "]"}], "]"}], "]"}]}], 
        ";", "\n", "  ", 
        RowBox[{"{", 
         RowBox[{"time", ",", " ", "step", ",", " ", "finalGrids"}], 
         "}"}]}]}], "\n", "]"}], "\n", "\n", 
     RowBox[{"displayTime", "[", "time_", "]"}]}], " ", ":=", " ", 
    RowBox[{"DateString", "[", 
     RowBox[{"time", ",", " ", 
      RowBox[{"{", 
       RowBox[{
       "\"\<Hour\>\"", ",", " ", "\"\<:\>\"", ",", " ", "\"\<Minute\>\"", ",",
         " ", "\"\<:\>\"", ",", " ", "\"\<Second\>\""}], "}"}]}], "]"}]}]}], 
  "*)"}]], "Code",
 CellChangeTimes->{{3.896460701243726*^9, 3.896460711875445*^9}, {
   3.8965083628926687`*^9, 3.8965083911961737`*^9}, 3.912412819884923*^9},
 CellLabel->
  "In[158]:=",ExpressionUUID->"974ffde9-b169-46f3-a1ad-6a3e27e09793"]
}, Open  ]]
},
WindowSize->{1440., 758.25},
WindowMargins->{{0, Automatic}, {0, Automatic}},
TaggingRules-><|"TryRealOnly" -> False|>,
Magnification:>1. Inherited,
FrontEndVersion->"13.0 for Linux x86 (64-bit) (December 2, 2021)",
StyleDefinitions->Notebook[{
   Cell[
    CellGroupData[{
      Cell["DarkStyle for Notebooks", "Title"], 
      Cell[
       StyleData[StyleDefinitions -> "Default.nb"]], 
      Cell[
       CellGroupData[{
         Cell["Styles for Tongue menu cells", "Section"], 
         Cell[
          StyleData[
          "WolframAlphaShort", StyleDefinitions -> StyleData["Input"]], 
          StyleKeyMapping -> {
           "=" -> "WolframAlphaLong", "Backspace" -> "Input"}, EvaluationMode -> 
          "WolframAlphaShort", 
          CellEventActions -> {"ReturnKeyDown" :> FrontEndTokenExecute[
              EvaluationNotebook[], "HandleShiftReturn"]}, 
          CellFrameLabels -> {{
             Cell[
              BoxData[
               StyleBox[
               "\[FreeformPrompt]", FontColor -> RGBColor[0, 0.7, 1]]]], 
             None}, {None, None}}, DefaultFormatType -> TextForm, 
          ShowCodeAssist -> False, FormatType -> TextForm, FontFamily -> 
          "Helvetica"], 
         Cell[
          StyleData[
          "WolframAlphaShortInput", StyleDefinitions -> StyleData["Input"]], 
          EvaluationMode -> "WolframAlphaShort", 
          CellEventActions -> {"ReturnKeyDown" :> FrontEndTokenExecute[
              EvaluationNotebook[], "HandleShiftReturn"]}, 
          CellFrameLabels -> {{
             Cell[
              BoxData[
               StyleBox[
               "\[FreeformPrompt]", FontColor -> RGBColor[0, 0.7, 1]]], 
              CellBaseline -> Baseline], None}, {None, None}}, ShowCodeAssist -> 
          False, FormatType -> TextForm, FontFamily -> "Helvetica"], 
         Cell[
          StyleData[
          "WolframAlphaLong", StyleDefinitions -> StyleData["Input"]], 
          StyleKeyMapping -> {
           "=" -> "Input", "Backspace" -> "WolframAlphaShort"}, 
          EvaluationMode -> "WolframAlphaLong", 
          CellEventActions -> {"ReturnKeyDown" :> FrontEndTokenExecute[
              EvaluationNotebook[], "HandleShiftReturn"]}, 
          CellFrameLabels -> {{
             Cell[
              BoxData[
               StyleBox[
               "\[WolframAlphaPrompt]", FontColor -> RGBColor[0, 0.7, 1]]]], 
             None}, {None, None}}, DefaultFormatType -> TextForm, 
          ShowCodeAssist -> False, FormatType -> TextForm, FontFamily -> 
          "Helvetica"], 
         Cell[
          StyleData["WolframAlphaFullOutput"], 
          CellMargins -> {{20, 10}, {Inherited, Inherited}}], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["ExternalLanguage"], CellFrame -> 1, 
             CellMargins -> {{66, 10}, {8, 8}}, 
             StyleKeyMapping -> {"Backspace" -> "Input"}, Evaluatable -> True,
              EvaluationMode -> "ExternalLanguage", CellGroupingRules -> 
             "InputGrouping", StripStyleOnPaste -> True, 
             CellEvaluationLanguage -> "Python", 
             CellFrameMargins -> {{4, 8}, {8, 8}}, CellFrameColor -> 
             RGBColor[0.2549, 0.23137, 0.42549], CellFrameLabels -> {{
                Cell[
                 BoxData[
                  DynamicBox[
                   ToBoxes[
                   ExternalEvaluate`FE`$ExternalLanguageMenuDataChanged; 
                    FrontEnd`Private`MakeExternalLanguageMenu[
                    ExternalEvaluate`FE`GetDefaultCellEvaluationLanguage[], 
                    ExternalEvaluate`FE`GetExternalLanguageMenuData[]], 
                    StandardForm], 
                   TrackedSymbols :> {
                    ExternalEvaluate`FE`$ExternalLanguageMenuDataChanged}, 
                   ImageSizeCache -> {
                    35., {10.64208984375, 17.35791015625}}]], "Output", 
                 Background -> None, CellFrame -> 0], None}, {None, None}}, 
             CellFrameLabelMargins -> 0, AllowInlineCells -> False, 
             Hyphenation -> False, AutoQuoteCharacters -> {}, 
             PasteAutoQuoteCharacters -> {}, LanguageCategory -> "Formula", 
             ScriptLevel -> 1, MenuSortingValue -> 1800, FontFamily -> Dynamic[
               CurrentValue[{StyleHints, "CodeFont"}]], FontSize -> 12, 
             FontColor -> GrayLevel[0.97], Background -> 
             RGBColor[0.18, 0.172, 0.22]], 
            Cell[
             StyleData["ExternalLanguage", "Presentation"], 
             CellMargins -> {{101, 10}, {8, 15}}, FontSize -> 18], 
            Cell[
             StyleData["ExternalLanguage", "SlideShow"], ShowGroupOpener -> 
             False, CellMargins -> {{110, 10}, {8, 15}}, FontSize -> 18], 
            Cell[
             StyleData["ExternalLanguage", "Printout"], 
             CellMargins -> {{48, 10}, {8, 8}}, 
             CellFrameMargins -> {{2, 8}, {8, 8}}]}, Open]]}, Open]], 
      Cell[
       CellGroupData[{
         Cell["Notebook options settings", "Section"], 
         Cell[
          StyleData[All, "Working"], InitializationCellEvaluation -> False, 
          DockedCells -> None, DefaultNewCellStyle -> "Code", 
          ShowPredictiveInterface -> False], 
         Cell[
          StyleData["Notebook"], 
          CellBracketOptions -> {
           "Color" -> RGBColor[0., 0.8, 1], "HoverColor" -> 
            RGBColor[0.78, 0.64, 1], "Thickness" -> 1.3, "Widths" -> {2, 8}}, 
          StyleKeyMapping -> {
           "==" -> "WolframAlphaLong", "Backspace" -> "WolframAlphaShort", 
            "=" -> "WolframAlphaShort", "*" -> "Item", ">" -> 
            "ExternalLanguage", "Backspace" -> "Code"}, 
          AutoStyleOptions -> {
           "CommentStyle" -> {
             FontColor -> RGBColor[0.89, 0.56, 1., 0.95], ShowAutoStyles -> 
              False, ShowSyntaxStyles -> False, AutoNumberFormatting -> 
              False}, "ExcessArgumentStyle" -> {
             FontColor -> 
              RGBColor[
               0.8627450980392157, 0.19607843137254902`, 0.1843137254901961]},
             "FunctionLocalVariableStyle" -> {
             FontColor -> RGBColor[0.52549, 0.843137, 1.]}, 
            "GraphicsCompatibilityProblemStyle" -> {
             FontColor -> 
              RGBColor[
               0.8627450980392157, 0.19607843137254902`, 0.1843137254901961]},
             "LocalScopeConflictStyle" -> {
             FontColor -> 
              RGBColor[
               0.8274509803921568, 0.21176470588235294`, 0.5098039215686274]},
             "LocalVariableStyle" -> {
             FontColor -> RGBColor[0., 0.8200000000000001, 0.32]}, 
            "MissingArgumentStyle" -> {
             FontColor -> 
              RGBColor[
               0.8627450980392157, 0.19607843137254902`, 0.1843137254901961]},
             "MisspelledWordStyle" -> {
             FontColor -> 
              RGBColor[
               0.8274509803921568, 0.21176470588235294`, 0.5098039215686274]},
             "NoKernelPresentStyle" -> {
             FontColor -> 
              RGBColor[
               0.16470588235294117`, 0.6313725490196078, 0.596078431372549]}, 
            "PatternVariableStyle" -> {
             FontColor -> RGBColor[0.11, 1., 0.08], FontSlant -> "Italic"}, 
            "StringStyle" -> {
             FontColor -> RGBColor[0.98, 0.71, 0.], ShowAutoStyles -> False, 
              ShowSyntaxStyles -> False, AutoNumberFormatting -> False}, 
            "UndefinedSymbolStyle" -> {FontColor -> RGBColor[0.42, 0.94, 1]}, 
            "UnknownOptionStyle" -> {
             FontColor -> 
              RGBColor[
               0.8627450980392157, 0.19607843137254902`, 0.1843137254901961]},
             "UnwantedAssignmentStyle" -> {
             FontColor -> 
              RGBColor[
               0.8627450980392157, 0.19607843137254902`, 
                0.1843137254901961]}}, 
          CodeAssistOptions -> {
           "AutoConvertEnable" -> False, 
            "HeadHighlightStyle" -> {
             Background -> None, FontColor -> RGBColor[1, 1, 0], FontWeight -> 
              Bold}, "MatchHighlightStyle" -> {
             Background -> None, FontColor -> RGBColor[1, 1, 0], FontWeight -> 
              Bold}}, TranslationOptions -> {"Language" -> None}, FontColor -> 
          RGBColor[0, 0.7, 1], Background -> GrayLevel[0.15]], 
         Cell[
          StyleData["DialogStyle"], FontColor -> RGBColor[0, 0.7, 1]], 
         Cell[
          StyleData["NotebookObject"], FontColor -> RGBColor[0, 0.7, 1]], 
         Cell[
          StyleData["LinguisticAssistant"], FontColor -> 
          RGBColor[0, 0.7, 1]]}, Open]], 
      Cell[
       CellGroupData[{
         Cell["Styles for Title and Section Cells", "Section"], 
         Cell[
          StyleData["Title"], FontColor -> GrayLevel[1]], 
         Cell[
          StyleData["Chapter"], FontColor -> RGBColor[0.8, 0.8, 0.8]], 
         Cell[
          StyleData["Subchapter"], FontColor -> RGBColor[0.65, 0.05, 0.65]], 
         Cell[
          StyleData["Subtitle"], FontColor -> 
          RGBColor[0.196078, 0.694118, 0.862745]], 
         Cell[
          StyleData["Subsubtitle"], FontColor -> 
          RGBColor[0.196078, 0.394118, 0.562745]], 
         Cell[
          StyleData["Subsubtitle"]], 
         Cell[
          StyleData["Section"], FontColor -> 
          RGBColor[
           0.1399099717708095, 0.5224231326771954, 0.6501869230182346]], 
         Cell[
          StyleData["Subsection"], FontColor -> GrayLevel[0.749996]], 
         Cell[
          StyleData["Subsubsection"], FontColor -> 
          RGBColor[0.823529, 0.490654, 0.202274]], 
         Cell[
          StyleData["Subsubsubsection"], FontColor -> 
          RGBColor[0.954147, 0.694224, 0.124651]], 
         Cell[
          StyleData["Subsubsubsubsection"], FontColor -> 
          RGBColor[0.913237, 0.365469, 0.0854353]], 
         Cell[
          StyleData["Text"], FontFamily -> "Gill Sans Light", FontSize -> 14, 
          FontWeight -> "Plain", FontSlant -> "Plain", FontColor -> 
          GrayLevel[0.683803]], 
         Cell[
          StyleData["Item"], CellDingbat -> 
          StyleBox["\[FilledSmallSquare]", Alignment -> Baseline, 
            RGBColor[0, 0.7, 1]], CellMargins -> {{81, 10}, {4, 8}}, 
          ReturnCreatesNewCell -> True, 
          StyleKeyMapping -> {"Tab" -> "Subitem", "*" -> "Subitem"}, 
          CellGroupingRules -> {"GroupTogetherNestedGrouping", 15000}, 
          CellFrameLabelMargins -> 4, CounterIncrements -> "Item", 
          CounterAssignments -> {{"Subitem", 0}, {"Subsubitem", 0}}, 
          MenuSortingValue -> 1600, FontFamily -> "Source Sans Pro", FontSize -> 
          15], 
         Cell[
          StyleData["ItemParagraph"], FontColor -> GrayLevel[0.6]], 
         Cell[
          StyleData["SubitemParagraph"], FontColor -> GrayLevel[0.6]], 
         Cell[
          StyleData["SubsubitemParagraph"], FontColor -> GrayLevel[0.6]], 
         Cell[
          CellGroupData[{
            Cell["Chapter", "Subsection"], 
            Cell[
             StyleData["Chapter"], CounterIncrements -> "Chapter", 
             CounterAssignments -> {{"Subchapter", 0}, {"Section", 0}, {
               "Equation", 0}, {"Figure", 0}, {"Subsubtitle", 0}, {
               "Item", 0}, {"Subitem", 0}, {"Subsubitem", 0}, {
               "ItemNumbered", 0}, {"SubitemNumbered", 0}, {
               "SubsubitemNumbered", 0}}, MenuSortingValue -> 1150, 
             MenuCommandKey :> "2"], 
            Cell[
             StyleData["Subchapter"], CellDingbat -> 
             StyleBox["\[MathematicaIcon]", Alignment -> Baseline, 
               RGBColor[0., 0.043, 0.9]], CounterIncrements -> "Subchapter", 
             CounterAssignments -> {{"Section", 0}, {"Equation", 0}, {
               "Figure", 0}, {"Item", 0}, {"Subitem", 0}, {"Subsubitem", 0}, {
               "ItemNumbered", 0}, {"SubitemNumbered", 0}, {
               "SubsubitemNumbered", 0}}, MenuSortingValue -> 1200, 
             MenuCommandKey :> "3"]}, Open]]}, Open]], 
      Cell[
       CellGroupData[{
         Cell["Input and Output cells", "Section"], 
         Cell[
          StyleData["Code"], 
          CellMargins -> {{66, Inherited}, {Inherited, Inherited}}, 
          CellFrameLabelMargins -> {{17, Inherited}, {Inherited, Inherited}}, 
          FontSize -> 13, FontWeight -> Plain, FontColor -> GrayLevel[1], 
          Background -> GrayLevel[0.1]], 
         Cell[
          StyleData["InitializationCell"], 
          CellMargins -> {{55, Inherited}, {Inherited, Inherited}}, 
          CellFrameMargins -> {{10, 10}, {5, 5}}, CellFrameLabelMargins -> -5,
           FontColor -> GrayLevel[1], Background -> GrayLevel[0.25]], 
         Cell[
          StyleData["Input"], 
          CellMargins -> {{66, Inherited}, {Inherited, Inherited}}, 
          CellFrameLabelMargins -> {{17, Inherited}, {Inherited, Inherited}}, 
          FontSize -> 13, FontColor -> GrayLevel[0.7]], 
         Cell[
          StyleData["Output"], CellFrame -> True, 
          CellMargins -> {{55, Inherited}, {Inherited, Inherited}}, 
          CellLabelStyle -> {"CellLabel", FontColor -> GrayLevel[0.78]}, 
          CellFrameMargins -> {{10, 0}, {0, 0}}, CellFrameStyle -> {
            Directive[
             GrayLevel[1, 0]], 
            Directive[
             GrayLevel[1, 0]], 
            Directive[
             GrayLevel[1, 0]], 
            Directive[
             RGBColor[0.45, 0.45, 0.95], 
             Thickness[1], 
             Dashing[{4, 6}]]}, CellFrameLabelMargins -> -5, FontSize -> 13], 
         
         Cell[
          StyleData["Message"], CellFrame -> True, 
          CellMargins -> {{55, Inherited}, {Inherited, Inherited}}, 
          CellLabelStyle -> {"CellLabel", FontColor -> GrayLevel[0.78]}, 
          CellFrameMargins -> {{10, 0}, {0, 0}}, CellFrameStyle -> {
            Directive[
             GrayLevel[1, 0]], 
            Directive[
             GrayLevel[1, 0]], 
            Directive[
             GrayLevel[1, 0]], 
            Directive[
             RGBColor[0.45, 0.45, 0.95], 
             Thickness[1], 
             Dashing[{4, 6}]]}, CellFrameLabelMargins -> -5, FontColor -> 
          RGBColor[
           0.704600595101854, 0.24277103837644007`, 0.22278171969176777`]], 
         Cell[
          StyleData["Print"], CellFrame -> True, 
          CellMargins -> {{55, Inherited}, {Inherited, Inherited}}, 
          CellLabelStyle -> {"CellLabel", FontColor -> GrayLevel[0.78]}, 
          CellFrameMargins -> {{10, 0}, {0, 0}}, CellFrameStyle -> {
            Directive[
             GrayLevel[1, 0]], 
            Directive[
             GrayLevel[1, 0]], 
            Directive[
             GrayLevel[1, 0]], 
            Directive[
             RGBColor[0.45, 0.45, 0.95], 
             Thickness[1], 
             Dashing[{4, 6}]]}, CellFrameLabelMargins -> -5, FontColor -> 
          GrayLevel[0.3]]}, Open]], 
      Cell[
       CellGroupData[{
         Cell["misc", "Section"], 
         Cell[
          StyleData["InformationCell"], 
          CellBracketOptions -> {
           "Color" -> RGBColor[0.760174, 0.600641, 0.675288]}, FontColor -> 
          GrayLevel[0.3]], 
         Cell[
          StyleData["InformationLink"], FontColor -> 
          RGBColor[0.4525, 0.48138, 0.7]], 
         Cell[
          StyleData["InformationLinkLF"], FontColor -> 
          RGBColor[0.4525, 0.48138, 0.7]], 
         Cell[
          StyleData["CellLabel"], 
          CellLabelMargins -> {{12, Inherited}, {Inherited, Inherited}}, 
          LanguageCategory -> None, StyleMenuListing -> None, FontFamily -> 
          "Helvetica", FontSize -> 9]}, Open]], 
      Cell[
       CellGroupData[{
         Cell["Styles for Formulas and Programming", "Section"], 
         Cell[
          StyleData["DisplayFormula"], FontColor -> GrayLevel[0.85]], 
         Cell[
          StyleData["DisplayFormulaNumbered"], FontColor -> GrayLevel[0.85]], 
         
         Cell[
          StyleData["Program"], CellFrameColor -> GrayLevel[0.4]]}, Open]], 
      Cell[
       CellGroupData[{
         Cell[
          TextData[{"Styles for ", 
            StyleBox["Mathematica", FontSlant -> "Italic"], 
            " System\[Hyphen]specific Elements"}], "Section", 
          CellChangeTimes -> {{3.601920784160323*^9, 3.60192078489342*^9}, 
            3.60356525124664*^9, {3.6037117681643677`*^9, 
            3.6037117683195887`*^9}}], 
         Cell[
          CellGroupData[{
            Cell["FormatType Styles", "Subsection"], 
            Cell[
             StyleData["StandardForm"]], 
            Cell[
             StyleData["CellExpression"], FontColor -> GrayLevel[0], 
             Background -> GrayLevel[0.75]], 
            Cell[
             StyleData["CellLabel"], FontSize -> 9, FontColor -> 
             RGBColor[0.603861, 0.615915, 0.607843]]}, Open]], 
         Cell[
          CellGroupData[{
            Cell[
            "Graphics Styles", "Subsection", 
             CellChangeTimes -> {{3.603565272271762*^9, 
              3.603565284491351*^9}}], 
            Cell[
             StyleData["GraphicsAxes"], LineColor -> 
             RGBColor[
              0.5764705882352941, 0.6313725490196078, 0.6313725490196078], 
             FontFamily -> "Avenir", FontSize -> 9, FontWeight -> "Plain", 
             FontSlant -> "Plain", FontColor -> 
             RGBColor[
              0.5764705882352941, 0.6313725490196078, 0.6313725490196078]], 
            Cell[
             StyleData["GraphicsFrame"], LineColor -> 
             RGBColor[
              0.5764705882352941, 0.6313725490196078, 0.6313725490196078], 
             FontFamily -> "Avenir", FontSize -> 9, FontWeight -> "Plain", 
             FontSlant -> "Plain", FontColor -> 
             RGBColor[
              0.5764705882352941, 0.6313725490196078, 0.6313725490196078]], 
            Cell[
             StyleData["Graphics3DAxes"], LineColor -> 
             RGBColor[
              0.5764705882352941, 0.6313725490196078, 0.6313725490196078], 
             FontFamily -> "Arial", FontSize -> 9, FontWeight -> "Plain", 
             FontSlant -> "Plain", FontColor -> 
             RGBColor[
              0.5764705882352941, 0.6313725490196078, 0.6313725490196078]]}, 
           Open]]}, Open]]}, Open]]}, Visible -> False, FrontEndVersion -> 
  "13.0 for Linux x86 (64-bit) (December 2, 2021)", StyleDefinitions -> 
  "Default.nb"],
ExpressionUUID->"15b5dd27-6829-4586-82c0-a7ea75e62e6d"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[558, 20, 75, 0, 38, "CodeText",ExpressionUUID->"ec0c784a-ce9d-4c5a-b232-cf84abfadbcd"],
Cell[636, 22, 385, 7, 46, "Text",ExpressionUUID->"1c0f1225-b49f-4433-89f2-3809bd6fabfe"],
Cell[1024, 31, 2752, 67, 221, "Code",ExpressionUUID->"e646de66-4019-4a45-9f24-b862c681f906"],
Cell[3779, 100, 553, 11, 92, "Text",ExpressionUUID->"7def9534-b5ec-46ec-afcf-1dbb61179113"],
Cell[4335, 113, 188, 4, 24, "Input",ExpressionUUID->"5bd8729e-1b5d-4b5f-b063-cb7f0991f434"],
Cell[4526, 119, 162, 3, 32, "Text",ExpressionUUID->"8a942dd6-5ed6-43b7-bf58-29d355d7d106"],
Cell[4691, 124, 545, 12, 56, "Code",ExpressionUUID->"25294259-c6c3-46b8-9874-58800bbfe360"],
Cell[5239, 138, 192, 6, 52, "Text",ExpressionUUID->"137fda44-2f58-466e-b9cf-77f14954051f"],
Cell[5434, 146, 2686, 76, 303, "Code",ExpressionUUID->"27a3c9a8-323b-4c69-ac0d-666ac9c09b77"],
Cell[8123, 224, 339, 7, 52, "Text",ExpressionUUID->"ba87411f-0479-4ab8-9fa6-a40adbcfb0e3"],
Cell[8465, 233, 14553, 370, 1231, "Code",ExpressionUUID->"fcac06f5-8334-4b9b-ad54-5a70c0e8fdd2"],
Cell[23021, 605, 14839, 303, 551, "Code",ExpressionUUID->"34a5ce17-7bbe-4b28-b8dc-8f3c89a7e4af"],
Cell[37863, 910, 5804, 135, 283, "Code",ExpressionUUID->"43c9ca43-dc34-48cc-ba70-58f0db2b1acf"],
Cell[43670, 1047, 2769, 41, 412, "Text",ExpressionUUID->"b80fafbb-a30b-4188-b067-42d643f41c2b"],
Cell[46442, 1090, 14913, 362, 736, "Code",ExpressionUUID->"1cb6fad7-3d75-46e5-bdfd-cc2c5aa8136f"],
Cell[CellGroupData[{
Cell[61380, 1456, 187, 3, 54, "Subsection",ExpressionUUID->"3cf80991-5947-4fae-80f3-2de0a0a27c13"],
Cell[61570, 1461, 1563, 38, 138, "Code",ExpressionUUID->"2148de09-ed05-4808-bed8-2a80b8dfc5bc"],
Cell[CellGroupData[{
Cell[63158, 1503, 677, 10, 34, "Code",ExpressionUUID->"57af5111-0f01-4f8c-80d8-9d8ac3a7ab54"],
Cell[63838, 1515, 3703, 71, 299, "Output",ExpressionUUID->"38a9cb05-6124-4f8a-a75b-b65257f8754f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[67578, 1591, 797, 11, 56, "Code",ExpressionUUID->"1c71fc96-a296-4b0b-ab7f-73c9848f5424"],
Cell[68378, 1604, 3332, 62, 654, "Output",ExpressionUUID->"21c41a23-b8bc-427e-ba15-990a3449b637"],
Cell[71713, 1668, 8431, 164, 654, "Output",ExpressionUUID->"d29d781f-eaaa-4852-8428-56c80285011b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[80181, 1837, 556, 9, 56, "Code",ExpressionUUID->"af9d4561-7cad-4ed1-ba9c-ad923ed74cc4"],
Cell[80740, 1848, 5057, 100, 654, "Output",ExpressionUUID->"aa23d139-1e6b-4d44-ba60-d4be1104e941"],
Cell[85800, 1950, 3284, 62, 654, "Output",ExpressionUUID->"4cae0807-1121-4891-89d8-6885cea0d29a"]
}, Open  ]],
Cell[89099, 2015, 658, 11, 72, "Text",ExpressionUUID->"00cba1b4-7863-4035-b775-b728565720c5"],
Cell[CellGroupData[{
Cell[89782, 2030, 419, 7, 34, "Code",ExpressionUUID->"8a6f1077-1d8d-412d-b17e-7e387e7a6104"],
Cell[90204, 2039, 6701, 140, 931, "Output",ExpressionUUID->"20f7c4cb-b0db-4a16-82ed-b1c3b2f82431"],
Cell[96908, 2181, 8108, 169, 390, "Output",ExpressionUUID->"0cf7af11-1c17-42bb-9958-8cd8ecfaa108"]
}, Open  ]],
Cell[105031, 2353, 462, 9, 52, "Text",ExpressionUUID->"d7acfd83-2905-4c91-8de5-560bb0ab3d78"],
Cell[105496, 2364, 1023, 23, 76, "Code",ExpressionUUID->"4a151634-84be-4917-bc9d-83c658b41256"],
Cell[106522, 2389, 189083, 3114, 358, 2606, 56, "CachedBoxData", "BoxData", InheritFromParent,ExpressionUUID->"cabde1b3-64e9-4f2a-bb8d-089c9750c524"],
Cell[295608, 5505, 141118, 2328, 358, 3138, 65, "CachedBoxData", "BoxData", InheritFromParent,ExpressionUUID->"b2fc9085-dff3-4763-9494-f96de94b9815"],
Cell[436729, 7835, 277, 6, 32, "Text",ExpressionUUID->"0523a527-9135-41ff-91cc-a27f8aea4859"],
Cell[CellGroupData[{
Cell[437031, 7845, 757, 16, 56, "Code",ExpressionUUID->"d51e056e-190d-42a3-a07a-ca0d26fe9e42"],
Cell[437791, 7863, 9167, 213, 56, "Output",ExpressionUUID->"6089ec0f-ec43-4e5b-bd74-f70880f89d89"],
Cell[446961, 8078, 9216, 214, 56, "Output",ExpressionUUID->"caee3b95-5e6c-4420-846b-cafa9b8d5c83"]
}, Open  ]],
Cell[456192, 8295, 239, 7, 52, "Text",ExpressionUUID->"49bd5e14-9583-45dc-952d-0822b9efa7c7"],
Cell[456434, 8304, 25555, 614, 2221, "Code",ExpressionUUID->"6babd98d-b119-4bcd-9c2e-7c324a23bf54"],
Cell[481992, 8920, 277, 6, 32, "Text",ExpressionUUID->"c6dc01b4-d9e3-41d4-a11f-2a7a1bfb6ae9"],
Cell[CellGroupData[{
Cell[482294, 8930, 294, 6, 34, "Code",ExpressionUUID->"079fc432-aa5d-4e3b-8dc1-2ab978cbc470"],
Cell[CellGroupData[{
Cell[482613, 8940, 716, 14, 24, "Print",ExpressionUUID->"cb9a0ce4-ea62-4c56-b218-a6b23141e656"],
Cell[483332, 8956, 714, 14, 24, "Print",ExpressionUUID->"88de0c62-6f08-4b1a-a6ff-af411f862be6"],
Cell[484049, 8972, 837, 16, 24, "Print",ExpressionUUID->"4130b192-24fe-42cb-ab2d-893cd2637c7c"],
Cell[484889, 8990, 711, 14, 24, "Print",ExpressionUUID->"7c11b217-1799-499c-bcfd-815c18965efe"],
Cell[485603, 9006, 716, 14, 24, "Print",ExpressionUUID->"cf2c6d8c-fbaa-49e5-9111-ef2382824263"],
Cell[486322, 9022, 837, 16, 24, "Print",ExpressionUUID->"074e25b6-17fe-45a0-9176-4d7be8582130"],
Cell[487162, 9040, 714, 14, 24, "Print",ExpressionUUID->"7d77fe8b-ab57-47c5-9d90-92a7a96b0523"],
Cell[487879, 9056, 714, 14, 24, "Print",ExpressionUUID->"fad3935a-b201-4d51-bc67-f05e14aa33fc"],
Cell[488596, 9072, 835, 16, 24, "Print",ExpressionUUID->"5d8543d5-8da5-4443-873b-bd08472bbf7e"],
Cell[489434, 9090, 714, 14, 24, "Print",ExpressionUUID->"8c456664-06c9-45a4-b90e-5bf4dff908ab"],
Cell[490151, 9106, 714, 14, 24, "Print",ExpressionUUID->"e81475ea-e674-4aaf-aa78-6e48327c7adc"],
Cell[490868, 9122, 839, 16, 24, "Print",ExpressionUUID->"912a99bd-56f0-47ec-9a45-fb830a19ba30"],
Cell[491710, 9140, 714, 14, 24, "Print",ExpressionUUID->"3955792e-6a61-47b1-8a83-66643ac4cb4c"],
Cell[492427, 9156, 714, 14, 24, "Print",ExpressionUUID->"8041e9d3-40de-429c-81e5-d8a569ac918e"],
Cell[493144, 9172, 837, 16, 24, "Print",ExpressionUUID->"73f38ab5-536b-4469-9637-94b980091967"],
Cell[493984, 9190, 714, 14, 24, "Print",ExpressionUUID->"0d443d62-0e63-4722-b1b7-deba12f3a191"],
Cell[494701, 9206, 712, 14, 24, "Print",ExpressionUUID->"5a7f47c9-d52a-4d8b-91a7-10c9fe81f727"],
Cell[495416, 9222, 837, 16, 24, "Print",ExpressionUUID->"902f528b-c9ba-431f-8699-90837ab28d6e"],
Cell[496256, 9240, 716, 14, 24, "Print",ExpressionUUID->"bbc4fe57-3363-4f16-85ae-de81c202aad0"],
Cell[496975, 9256, 714, 14, 24, "Print",ExpressionUUID->"9a029207-c78e-46d2-80dd-acb855169a09"],
Cell[497692, 9272, 839, 16, 24, "Print",ExpressionUUID->"c32df61f-89d8-4010-8f1f-29563288eb79"],
Cell[498534, 9290, 716, 14, 24, "Print",ExpressionUUID->"d192bba6-50cf-4711-9e9a-15aee38d5b89"],
Cell[499253, 9306, 714, 14, 24, "Print",ExpressionUUID->"b7e666e9-92b0-4472-bbac-94e05fb53ccd"],
Cell[499970, 9322, 841, 16, 24, "Print",ExpressionUUID->"31c9dab0-5003-49ec-bd3c-1db79e7f464f"],
Cell[500814, 9340, 716, 14, 24, "Print",ExpressionUUID->"2b5ae421-52cf-446c-966c-326c02c448f5"],
Cell[501533, 9356, 714, 14, 24, "Print",ExpressionUUID->"a0c7e168-ddcc-43a3-af76-cf29585bd920"],
Cell[502250, 9372, 837, 16, 24, "Print",ExpressionUUID->"41b3afc5-49e2-49b5-b53a-20ede96cca42"],
Cell[503090, 9390, 718, 14, 24, "Print",ExpressionUUID->"61f50e41-4102-4807-874b-7da40b50f749"],
Cell[503811, 9406, 712, 14, 24, "Print",ExpressionUUID->"81d1fd93-f271-432a-bbac-c26e7a074213"],
Cell[504526, 9422, 837, 16, 24, "Print",ExpressionUUID->"81c8d74c-cea0-4901-80ba-84972b68ef0b"],
Cell[505366, 9440, 718, 14, 24, "Print",ExpressionUUID->"c42251f0-90ee-4078-a67b-76b315bf5e80"],
Cell[506087, 9456, 714, 14, 24, "Print",ExpressionUUID->"7c27a79f-0a5d-4748-b93a-42dba9dffd28"],
Cell[506804, 9472, 833, 16, 24, "Print",ExpressionUUID->"276daed3-ce8c-4766-ad81-8f5e0e4db71d"],
Cell[507640, 9490, 796, 16, 24, "Print",ExpressionUUID->"0b8b7123-3ede-4d62-9cb3-2387bfcdb046"]
}, Open  ]]
}, Open  ]],
Cell[508463, 9510, 189, 3, 32, "Text",ExpressionUUID->"4fb8cb37-2a12-47da-b2ff-cd1b9c17dba2"],
Cell[508655, 9515, 463, 11, 34, "Code",ExpressionUUID->"133e8dfb-481b-420c-aaff-48447d5a9a0d"],
Cell[CellGroupData[{
Cell[509143, 9530, 413, 6, 76, "Code",ExpressionUUID->"41b7f8ba-34ea-4163-85b2-17ab13b150fc"],
Cell[509559, 9538, 2837, 55, 478, "Output",ExpressionUUID->"8ad6fbce-0d96-4aa3-8405-ee746e486160"],
Cell[512399, 9595, 2682, 53, 654, "Output",ExpressionUUID->"a2ce7699-b2ad-4d98-9998-6bac2f8c84e5"],
Cell[515084, 9650, 8286, 163, 654, "Output",ExpressionUUID->"039e8e54-7c60-432c-bccf-d66bb6f35425"]
}, Open  ]],
Cell[523385, 9816, 7148, 170, 365, "Code",ExpressionUUID->"974ffde9-b169-46f3-a1ad-6a3e27e09793"]
}, Open  ]]
}
]
*)

